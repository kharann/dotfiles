module.exports=function(e){var t={};function i(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(o,s,function(t){return e[t]}.bind(null,s));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=191)}([function(e,t){e.exports=require("vscode")},function(e,t){e.exports=require("path")},function(e,t,i){var o=i(20),s=36e5,r=6e4,n=2,a=/[T ]/,c=/:/,l=/^(\d{2})$/,h=[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],d=/^(\d{4})/,m=[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],u=/^-(\d{2})$/,g=/^-?(\d{3})$/,p=/^-?(\d{2})-?(\d{2})$/,f=/^-?W(\d{2})$/,v=/^-?W(\d{2})-?(\d{1})$/,_=/^(\d{2}([.,]\d*)?)$/,w=/^(\d{2}):?(\d{2}([.,]\d*)?)$/,b=/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,C=/([Z+-].*)$/,y=/^(Z)$/,k=/^([+-])(\d{2})$/,S=/^([+-])(\d{2}):?(\d{2})$/;function P(e,t,i){t=t||0,i=i||0;var o=new Date(0);o.setUTCFullYear(e,0,4);var s=7*t+i+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+s),o}e.exports=function(e,t){if(o(e))return new Date(e.getTime());if("string"!=typeof e)return new Date(e);var i=(t||{}).additionalDigits;i=null==i?n:Number(i);var x=function(e){var t,i={},o=e.split(a);if(c.test(o[0])?(i.date=null,t=o[0]):(i.date=o[0],t=o[1]),t){var s=C.exec(t);s?(i.time=t.replace(s[1],""),i.timezone=s[1]):i.time=t}return i}(e),F=function(e,t){var i,o=h[t],s=m[t];if(i=d.exec(e)||s.exec(e)){var r=i[1];return{year:parseInt(r,10),restDateString:e.slice(r.length)}}if(i=l.exec(e)||o.exec(e)){var n=i[1];return{year:100*parseInt(n,10),restDateString:e.slice(n.length)}}return{year:null}}(x.date,i),$=F.year,D=function(e,t){if(null===t)return null;var i,o,s,r;if(0===e.length)return(o=new Date(0)).setUTCFullYear(t),o;if(i=u.exec(e))return o=new Date(0),s=parseInt(i[1],10)-1,o.setUTCFullYear(t,s),o;if(i=g.exec(e)){o=new Date(0);var n=parseInt(i[1],10);return o.setUTCFullYear(t,0,n),o}if(i=p.exec(e)){o=new Date(0),s=parseInt(i[1],10)-1;var a=parseInt(i[2],10);return o.setUTCFullYear(t,s,a),o}if(i=f.exec(e))return r=parseInt(i[1],10)-1,P(t,r);if(i=v.exec(e)){r=parseInt(i[1],10)-1;var c=parseInt(i[2],10)-1;return P(t,r,c)}return null}(F.restDateString,$);if(D){var T,N=D.getTime(),R=0;return x.time&&(R=function(e){var t,i,o;if(t=_.exec(e))return(i=parseFloat(t[1].replace(",",".")))%24*s;if(t=w.exec(e))return i=parseInt(t[1],10),o=parseFloat(t[2].replace(",",".")),i%24*s+o*r;if(t=b.exec(e)){i=parseInt(t[1],10),o=parseInt(t[2],10);var n=parseFloat(t[3].replace(",","."));return i%24*s+o*r+1e3*n}return null}(x.time)),x.timezone?(U=x.timezone,T=(L=y.exec(U))?0:(L=k.exec(U))?(B=60*parseInt(L[2],10),"+"===L[1]?-B:B):(L=S.exec(U))?(B=60*parseInt(L[2],10)+parseInt(L[3],10),"+"===L[1]?-B:B):0):(T=new Date(N+R).getTimezoneOffset(),T=new Date(N+R+T*r).getTimezoneOffset()),new Date(N+R+T*r)}var U,L,B;return new Date(e)}},function(e,t){e.exports=require("fs")},function(e,t,i){var o=i(2),s=i(5);e.exports=function(e){var t=o(e),i=t.getFullYear(),r=new Date(0);r.setFullYear(i+1,0,4),r.setHours(0,0,0,0);var n=s(r),a=new Date(0);a.setFullYear(i,0,4),a.setHours(0,0,0,0);var c=s(a);return t.getTime()>=n.getTime()?i+1:t.getTime()>=c.getTime()?i:i-1}},function(e,t,i){var o=i(14);e.exports=function(e){return o(e,{weekStartsOn:1})}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setHours(0,0,0,0),t}},function(e,t,i){var o,s=i(12),r=s.Buffer,n={};for(o in s)s.hasOwnProperty(o)&&"SlowBuffer"!==o&&"Buffer"!==o&&(n[o]=s[o]);var a=n.Buffer={};for(o in r)r.hasOwnProperty(o)&&"allocUnsafe"!==o&&"allocUnsafeSlow"!==o&&(a[o]=r[o]);if(n.Buffer.prototype=r.prototype,a.from&&a.from!==Uint8Array.from||(a.from=function(e,t,i){if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof e);if(e&&void 0===e.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);return r(e,t,i)}),a.alloc||(a.alloc=function(e,t,i){if("number"!=typeof e)throw new TypeError('The "size" argument must be of type number. Received type '+typeof e);if(e<0||e>=2*(1<<30))throw new RangeError('The value "'+e+'" is invalid for option "size"');var o=r(e);return t&&0!==t.length?"string"==typeof i?o.fill(t,i):o.fill(t):o.fill(0),o}),!n.kStringMaxLength)try{n.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}n.constants||(n.constants={MAX_LENGTH:n.kMaxLength},n.kStringMaxLength&&(n.constants.MAX_STRING_LENGTH=n.kStringMaxLength)),e.exports=n},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setDate(i.getDate()+s),i}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e).getTime(),s=Number(t);return new Date(i+s)}},function(e,t,i){var o=i(4),s=i(5);e.exports=function(e){var t=o(e),i=new Date(0);return i.setFullYear(t,0,4),i.setHours(0,0,0,0),s(i)}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e).getTime(),s=o(t).getTime();return i<s?-1:i>s?1:0}},function(e,t){e.exports=require("buffer")},function(e,t,i){var o=i(83),s=i(84);e.exports={distanceInWords:o(),format:s()}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=t&&Number(t.weekStartsOn)||0,s=o(e),r=s.getDay(),n=(r<i?7:0)+r-i;return s.setDate(s.getDate()-n),s.setHours(0,0,0,0),s}},function(e,t,i){var o=i(6),s=6e4,r=864e5;e.exports=function(e,t){var i=o(e),n=o(t),a=i.getTime()-i.getTimezoneOffset()*s,c=n.getTime()-n.getTimezoneOffset()*s;return Math.round((a-c)/r)}},function(e,t,i){var o=i(2),s=i(21);e.exports=function(e,t){var i=o(e),r=Number(t),n=i.getMonth()+r,a=new Date(0);a.setFullYear(i.getFullYear(),n,1),a.setHours(0,0,0,0);var c=s(a);return i.setMonth(n,Math.min(c,i.getDate())),i}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()-s.getTime()}},function(e,t,i){var o=i(7).Buffer,s=i(172),r=e.exports;r.encodings=null,r.defaultCharUnicode="ï¿½",r.defaultCharSingleByte="?",r.encode=function(e,t,i){e=""+(e||"");var s=r.getEncoder(t,i),n=s.write(e),a=s.end();return a&&a.length>0?o.concat([n,a]):n},r.decode=function(e,t,i){"string"==typeof e&&(r.skipDecodeWarning||(console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding"),r.skipDecodeWarning=!0),e=o.from(""+(e||""),"binary"));var s=r.getDecoder(t,i),n=s.write(e),a=s.end();return a?n+a:n},r.encodingExists=function(e){try{return r.getCodec(e),!0}catch(e){return!1}},r.toEncoding=r.encode,r.fromEncoding=r.decode,r._codecDataCache={},r.getCodec=function(e){r.encodings||(r.encodings=i(173));for(var t=r._canonicalizeEncoding(e),o={};;){var s=r._codecDataCache[t];if(s)return s;var n=r.encodings[t];switch(typeof n){case"string":t=n;break;case"object":for(var a in n)o[a]=n[a];o.encodingName||(o.encodingName=t),t=n.type;break;case"function":return o.encodingName||(o.encodingName=t),s=new n(o,r),r._codecDataCache[o.encodingName]=s,s;default:throw new Error("Encoding not recognized: '"+e+"' (searched as: '"+t+"')")}}},r._canonicalizeEncoding=function(e){return(""+e).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g,"")},r.getEncoder=function(e,t){var i=r.getCodec(e),o=new i.encoder(t,i);return i.bomAware&&t&&t.addBOM&&(o=new s.PrependBOM(o,t)),o},r.getDecoder=function(e,t){var i=r.getCodec(e),o=new i.decoder(t,i);return!i.bomAware||t&&!1===t.stripBOM||(o=new s.StripBOM(o,t)),o};var n="undefined"!=typeof process&&process.versions&&process.versions.node;if(n){var a=n.split(".").map(Number);(a[0]>0||a[1]>=10)&&i(188)(r),i(189)(r)}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});i(1);const o=i(0);async function s(){const e=o.extensions.getExtension(t.extensionId);if(!e)return null;const i=e.isActive?e.exports:await e.activate();if(!i)return null;return i.getApi?i.getApi("0.3.967"):i.getApiAsync("0.3.967")}t.extensionId="ms-vsliveshare.vsliveshare",t.getApi=s,t.getApiAsync=function(){return s()},function(e){e[e.None=0]="None",e[e.Host=1]="Host",e[e.Guest=2]="Guest"}(t.Role||(t.Role={})),function(e){e[e.None=0]="None",e[e.ReadOnly=1]="ReadOnly",e[e.ReadWrite=3]="ReadWrite",e[e.Owner=255]="Owner"}(t.Access||(t.Access={})),function(e){e.Session="liveshare.session",e.ExplorerSession="liveshare.session.explorer",e.Contacts="liveshare.contacts",e.Feedback="liveshare.feedback"}(t.View||(t.View={})),function(e){e.Participants="participants",e.Servers="servers",e.Terminals="terminals",e.CurrentUser="participants.currentuser",e.Guest="participants.guest",e.FollowedGuest="participants.guest.followed",e.Participant="participants.participant",e.FollowedParticipant="participants.participant.followed",e.LocalServer="servers.local",e.RemoteServer="servers.remote",e.LocalTerminalReadOnly="terminals.local.readonly",e.LocalTerminalReadWrite="terminals.local.readwrite",e.RemoteTerminal="terminals.remote",e.SuggestedContacts="contacts.suggested",e.AvailableContacts="contacts.available",e.ContactsProvider="contacts.provider",e.ContactsStatus="contacts.status",e.Contact="contacts.contact",e.SessionFeedbackQuestion="feedback.sessionFeedback",e.ReportAProblem="feedback.reportAProblem",e.TweetUsYourFeedback="feedback.tweetUsYourFeedback",e.Survey="feedback.survey",e.GoodFeedback="feedback.goodFeedback",e.BadFeedback="feedback.badFeedback",e.DontAskAgain="feedback.dontAskAgain",e.Thankyou="feedback.thankyou",e.Loading="loading",e.Other="other"}(t.ViewItem||(t.ViewItem={}))},function(e,t){e.exports=function(e){return e instanceof Date}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getFullYear(),s=t.getMonth(),r=new Date(0);return r.setFullYear(i,s+1,0),r.setHours(0,0,0,0),r.getDate()}},function(e,t,i){var o=i(8);e.exports=function(e,t){var i=Number(t);return o(e,7*i)}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e).getTime(),s=o(t).getTime();return i>s?-1:i<s?1:0}},function(e,t,i){var o=i(2),s=i(41),r=i(11);e.exports=function(e,t){var i=o(e),n=o(t),a=r(i,n),c=Math.abs(s(i,n));return i.setMonth(i.getMonth()-a*c),a*(c-(r(i,n)===-a))}},function(e,t,i){var o=i(17);e.exports=function(e,t){var i=o(e,t)/1e3;return i>0?Math.floor(i):Math.ceil(i)}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setHours(23,59,59,999),t}},function(e,t,i){var o=i(2),s=i(5),r=i(10),n=6048e5;e.exports=function(e){var t=o(e),i=s(t).getTime()-r(t).getTime();return Math.round(i/n)+1}},function(e,t,i){var o=i(14);e.exports=function(e,t,i){var s=o(e,i),r=o(t,i);return s.getTime()===r.getTime()}},function(e){e.exports=[["0","\0",127,"â¬"],["8140","ä¸ä¸ä¸ä¸ä¸ä¸ä¸ä¸ä¸ ä¸¡ä¸£ä¸¦ä¸©ä¸®ä¸¯ä¸±ä¸³ä¸µä¸·ä¸¼ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹¢ä¹£ä¹¤ä¹¥ä¹§ä¹¨ä¹ª",5,"ä¹²ä¹´",9,"ä¹¿",6,"äºäº"],["8180","äºäºäºäºäºäºäºäº£äºªäº¯äº°äº±äº´äº¶äº·äº¸äº¹äº¼äº½äº¾ä»ä»ä»ä»ä»ä»ä»ä»ä» ä»¢ä»¦ä»§ä»©ä»­ä»®ä»¯ä»±ä»´ä»¸ä»¹ä»ºä»¼ä»¾ä¼ä¼",6,"ä¼ä¼ä¼",4,"ä¼ä¼ä¼¡ä¼£ä¼¨ä¼©ä¼¬ä¼­ä¼®ä¼±ä¼³ä¼µä¼·ä¼¹ä¼»ä¼¾",4,"ä½ä½ä½",5,"ä½ä½ä½ä½¡ä½¢ä½¦ä½¨ä½ªä½«ä½­ä½®ä½±ä½²ä½µä½·ä½¸ä½¹ä½ºä½½ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾¡ä¾¢"],["8240","ä¾¤ä¾«ä¾­ä¾°",4,"ä¾¶",8,"ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿",4,"ä¿ä¿ä¿ ä¿¢ä¿¤ä¿¥ä¿§ä¿«ä¿¬ä¿°ä¿²ä¿´ä¿µä¿¶ä¿·ä¿¹ä¿»ä¿¼ä¿½ä¿¿",11],["8280","åååååååååååå å¢å£å¤å§å«å¯",10,"å»å½å¿ååååååååååå",4,"åååååå",7,"å¦",5,"å­",8,"å¸å¹åºå¼å½ååååååååååå",20,"å¤å¦åªå«å­",4,"å³",6,"å¼"],["8340","å½",17,"å",5,"åååå",10,"å¨å©åªå«å¯å°å±å²å´å¶",4,"å¼",9,"å"],["8380","ååå",5,"å",13,"å¢",28,"åååååååååååååå",4,"å£å¤å¦å§å©åªå¯å²åºå¾å¿åååååååååååååååååå¡å£å¦",4,"å­å®å´å¸å¹åºå¾å¿åååååååååå",5],["8440","ååååååå¢å£å¥",5,"å¬å®å±å²å´å·å¾åååååååååååååå¡å¢å£å¥å¦å§åªå¬å¯å±å²å´åµå¼å¾å",5,"åååååååå"],["8480","åååååå å¢å£å¤å¦å¨å«å¬å­å®å°å±å³",9,"å¾åå",4,"å",6,"ååå",6,"åå¤å¥å¦å§å®å¯å°å´",9,"åååååååååååååååååå",5,"å å¡å¢å£å¥",10,"å±",7,"å»å¼å½åååååååååå"],["8540","åååååååååå¢å¤å¥å§å¨å©å«å¬å­å¯",9,"å¼å½åååååååååååååå¥å¨åªå¬å­å²å¶å¹å»å¼å½å¾åååååååå"],["8580","å",4,"ååååååå å¡å¤å§åªå«å¬å­å¯",6,"å·å¸å¹åºå¼å½å¾åå",4,"ååååååååååå¡å¢å§å´åºå¾å¿ååååååååååå¢å¤å¥åªå°å³å¶å·åºå½å¿ååååååååååååå",4,"å£å¥å§å©",7,"å´å¹åºå¾å¿åååååååååååååååå å¡"],["8640","å¢å¥å®å°å²åµå¶å·å¹åºå¼å¾åååååååå ",4,"å«å¬å¯å°å±å´",5,"å»å¾ååååååå",4,"ååå",5,"ååååå¡å¥å¦"],["8680","å¨å©å«å­å²å´åµå¶å¸å¹åºå»å½åååååå",4,"ååååå",4,"åååå å¢å£å¨å©å«å¯",5,"å¹åºå½å¿ååååååååååååååå ",6,"å¨",8,"å²å´å¶å¸åºå¼å¿",4,"åååååååååå",4,"åå å¢å§å©å­å®å°å±å´å¶å¸",4,"å¿åååå"],["8740","åååååå",7,"ååååå å¡å¢å¥å¦å¨å©åªå«å®å¯å°å³åµå·å¸åºå¼å½å¾å",11,"å",4,"ååååå",4],["8780","å£å¥å¦å§å­å®å¯å°å²å³å´åµå·å¸å¹åºå½",7,"å",6,"åååå",14,"å¤",10,"å°",6,"å¸å¹åºå»å½",12,"å",8,"åååååå£å¥",5,"å¬å®å¯å²å³å¶å·å¸å»å¼åååååå",6],["8840","å",9,"ååå å¡å¢å¤å¥å¦å§å«å±å²å´",4,"å¼å½å¿ååååååååå",4,"ååå¢å£å¥å§å¬å®å°å±å²å´åµå¸å¹åºå½å¾å¿å"],["8880","åååååå",4,"å",6,"ååååå¥å¨åªå¬å¯å°å±å³åµå¶å·å¹",8,"å",6,"ååååååååååå¡å¢å£å¥",7,"å®å°å±å²å³åµå¶å·å»å¼å¾å¿å å å å å å å å å å å å å å å å å å å å å å å ¢å £å ¥",4,"å «",4,"å ±å ²å ³å ´å ¶",7],["8940","å ¾",5,"å¡",6,"å¡å¡å¡å¡å¡å¡å¡å¡å¡",4,"å¡",5,"å¡¦",4,"å¡­",16,"å¡¿å¢å¢å¢å¢å¢å¢å¢å¢"],["8980","å¢",4,"å¢",4,"å¢å¢å¢å¢ ",7,"å¢ª",17,"å¢½å¢¾å¢¿å£å£å£å£å£",10,"å£å£å£å£",13,"å£¥",5,"å£­å£¯å£±å£²å£´å£µå£·å£¸å£º",7,"å¤å¤å¤å¤",4,"å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤å¤ å¤¡å¤¢å¤£å¤¦å¤¨å¤¬å¤°å¤²å¤³å¤µå¤¶å¤»"],["8a40","å¤½å¤¾å¤¿å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥",4,"å¥¡å¥£å¥¤å¥¦",12,"å¥µå¥·å¥ºå¥»å¥¼å¥¾å¥¿å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦å¦ å¦¡å¦¢å¦¦"],["8a80","å¦§å¦¬å¦­å¦°å¦±å¦³",5,"å¦ºå¦¼å¦½å¦¿",6,"å§å§å§å§å§å§å§å§å§å§å§å§",4,"å§¤å§¦å§§å§©å§ªå§«å§­",11,"å§ºå§¼å§½å§¾å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨å¨¡å¨¢å¨¤å¨¦å¨§å¨¨å¨ª",6,"å¨³å¨µå¨·",4,"å¨½å¨¾å¨¿å©",4,"å©å©å©",9,"å©å©å©å©å©",5],["8b40","å©¡å©£å©¤å©¥å©¦å©¨å©©å©«",8,"å©¸å©¹å©»å©¼å©½å©¾åª",17,"åª",6,"åª",13,"åª«åª¬"],["8b80","åª­",4,"åª´åª¶åª·åª¹",4,"åª¿å«å«",5,"å«å«å«",4,"å«å«å«å«å«å«å«å«å«å«¢å«¤å«¥å«§å«¨å«ªå«¬",4,"å«²",22,"å¬",11,"å¬",25,"å¬³å¬µå¬¶å¬¸",7,"å­",6],["8c40","å­",7,"å­å­å­å­ å­¡å­§å­¨å­«å­­å­®å­¯å­²å­´å­¶å­·å­¸å­¹å­»å­¼å­¾å­¿å®å®å®å®å®å®å®å®å®å®å®å®§å®¨å®©å®¬å®­å®®å®¯å®±å®²å®·å®ºå®»å®¼å¯å¯å¯å¯å¯å¯å¯å¯å¯å¯"],["8c80","å¯å¯",8,"å¯ å¯¢å¯£å¯¦å¯§å¯©",4,"å¯¯å¯±",6,"å¯½å¯¾å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å°å° å°¡å°£å°¦å°¨å°©å°ªå°«å°­å°®å°¯å°°å°²å°³å°µå°¶å°·å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±å±¢å±¤å±§",6,"å±°å±²",6,"å±»å±¼å±½å±¾å²å²",4,"å²å²å²å²å²å²å²å²å²",4,"å²¤",4],["8d40","å²ªå²®å²¯å²°å²²å²´å²¶å²¹å²ºå²»å²¼å²¾å³å³å³å³",5,"å³",5,"å³",5,"å³",6,"å³¢å³£å³§å³©å³«å³¬å³®å³¯å³±",9,"å³¼",4],["8d80","å´å´å´å´",5,"å´",4,"å´å´å´å´å´å´å´å´",4,"å´¥å´¨å´ªå´«å´¬å´¯",4,"å´µ",7,"å´¿",7,"åµåµåµ",10,"åµåµåµåµ",10,"åµªåµ­åµ®åµ°åµ±åµ²åµ³åµµ",12,"å¶",21,"å¶å¶å¶å¶å¶å¶ "],["8e40","å¶¡",21,"å¶¸",12,"å·",6,"å·",12,"å·å·å· å·£å·¤å·ªå·¬å·­"],["8e80","å·°å·µå·¶å·¸",4,"å·¿å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸å¸",7,"å¸¨",4,"å¸¯å¸°å¸²",4,"å¸¹å¸ºå¸¾å¸¿å¹å¹å¹å¹",5,"å¹",6,"å¹",4,"å¹å¹å¹å¹ å¹£",14,"å¹µå¹·å¹¹å¹¾åºåºåºåºåºåºåºåºåºåºåºåºåºåº¡åº¢åº£åº¤åº¨",4,"åº®",4,"åº´åººåº»åº¼åº½åº¿",6],["8f40","å»å»å»å»",5,"å»å»å»å»å»å»å»",11,"å»©å»«",8,"å»µå»¸å»¹å»»å»¼å»½å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼å¼¡å¼¢å¼£å¼¤"],["8f80","å¼¨å¼«å¼¬å¼®å¼°å¼²",6,"å¼»å¼½å¼¾å¼¿å½",14,"å½å½å½å½å½å½å½å½å½ å½£å½¥å½§å½¨å½«å½®å½¯å½²å½´å½µå½¶å½¸å½ºå½½å½¾å½¿å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾å¾ å¾¢",5,"å¾©å¾«å¾¬å¾¯",5,"å¾¶å¾¸å¾¹å¾ºå¾»å¾¾",4,"å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿å¿¢å¿£å¿¥å¿¦å¿¨å¿©å¿¬å¿¯å¿°å¿²å¿³å¿´å¿¶å¿·å¿¹å¿ºå¿¼æ"],["9040","æææææææææææææ¢æ£æ¤æ¬æ­æ®æ°",4,"æ¶",4,"æ½æ¾ææ",6,"ææææææææææææææ æ¡æ¥æ¦æ®æ±æ²æ´æµæ·æ¾æ"],["9080","ææææææææææææææææææææ¡æ¢æ¤æ¥æ§æ©æªæ®æ°æ³æµæ¶æ·æ¹æºæ½",7,"ææææ",4,"æææææææææ¡",4,"æªæ±æ²æµæ·æ¸æ»",4,"æææææææææ",4,"æææææææææ¡æ¢æ¥æ¨æ©æªæ¬",18,"æ",6],["9140","ææææææææææ",6,"æææ æ¡æ£æ¤æ¥æ¦æ©",6,"æ±æ²æ³æ´æ¶æ¸",18,"æææ",4,"æ"],["9180","æ",6,"æ",8,"æªæ«æ­",9,"æ¸",5,"æ¿æææ",4,"ææ",4,"ææ",16,"æ§",13,"æ¶",8,"æ",5,"æææææææææ æ£æ¦æ§æ¨æ©æ«æ­æ¯æ°æ±æ²æµæ¶æ¸",4,"æææææ"],["9240","ææææææææ",6,"æ¤æ¥æ¨æ±æ²æ´æµæ·æ¸æºæ»æ½ææææææææ",5,"ææææææ£æ¦æ§æ©æªæ­æ®æ¯æ°æ²æ³æ´æ¶æ·æ¸æºæ¾ææ"],["9280","ææææææææ æ¡æ¤æªæ«æ°æ²æµæ¸æ¹æºæ»ææææææææææææææææææææ¦æ§æ©æ¬æ­æ®æ°æ±æ³",5,"æ»æ¼æ¾æ¿æææææææææææ",7,"æ æ¤æ¥æ¦æ¨æªæ«æ¬æ¯æ°æ²æ³æ´æµæ¸æ¹æ¼æ½æ¾æ¿æææææææææææææ",6,"æ¡æ¤æ¦æ«æ¯æ±æ²æµæ¶æ¹æ»æ½æ¿æ"],["9340","ææææææææææææææ",6,"ææ¢æ¤",4,"æ«æ¬æ®æ¯æ°æ±æ³æµæ·æ¹æºæ»æ¼æ¾æææ",4,"æææææ",5,"æææ¢æ£æ¤"],["9380","æ¥æ§æ¨æ©æ«æ®",5,"æµ",4,"æ»æ¼æ¾æææææ",6,"æææææ",4,"æ",7,"æ¨æªæ«æ¬æ®",9,"æ»",6,"æææ",8,"æææææææææ",4,"æ¥æ¦æ§æ¨æªæ«æ¯æ±æ²æ³æ´æ¶æ¹æ»æ½æ¾æ¿ææææ",6,"ææææææææ"],["9440","æææææ æ¡æ£æ¥æ§",24,"æ",7,"æ",7,"æ",4,"æ",8],["9480","æ¢æ£æ¤æ¦",4,"æ¬æ­æ°æ±æ²æ³æ·æºæ¼æ½æ",4,"ææææææææææææææææ æ¡æ¤æ¥æ§æ¨æ©æªæ­æ®æ¯æ±æ³æµæ¶æ¸",14,"æææææææææææææææ æ¢æ£æ¦æ¨æªæ¬æ®æ±",7,"æºæ»æ¾æ¿æææææææææææææ",7,"æ¡æ£æ¤æªæ«"],["9540","æ²æ³æ´æµæ¸æ¹æ»",4,"æææææææææææææææææææ¡æ¢æ£æ¤æ¦æ©æªæ«æ¬æ®æ°æ²æ³æ·",4,"æ½æ¿æææ",6,"æææææ"],["9580","ææææææ æ¢æ£æ¥æ§æ©",4,"æ±æ²æ³æµæ¸æ¹æ»æ¼æ½æ¿ææææææææææææææææææ",4,"æ",8,"æ©",4,"æ¯",4,"æµæ¶æ·æ¸æºæ»æ¼æ½æ¿",25,"ææ",7,"æ§æ¨æª",5,"æ±æµæ¶æ¸æºæ»æ½æææ"],["9640","æææææææææææææææææ ",5,"æ§æ©æ®æ°æ²æ³æ¶æ·æ¸æ¹æ»æ¼æ¾æ¿æææææææææææ",4,"ææ¢æ£æ¤æ¦æ§æ«æ¬æ®æ±æ´æ¶"],["9680","æ¸æ¹æºæ»æ½ææææææææææææææææææææ æ¡æ¤æ¦æ©æ¬æ®æ±æ²æ´æ¹",7,"ææ",9,"ææææææ¡æ£æ¤æ¦æ§æ¨æªæ«æ­æ®æ²æµ",7,"æ¾æ æ æ æ æ æ æ æ æ æ æ ",4,"æ æ æ  æ ¢",6,"æ «",6,"æ ´æ µæ ¶æ ºæ »æ ¿æ¡æ¡æ¡æ¡æ¡æ¡",5],["9740","æ¡æ¡æ¡æ¡æ¡ªæ¡¬",7,"æ¡µæ¡¸",8,"æ¢æ¢æ¢",7,"æ¢æ¢æ¢æ¢æ¢æ¢æ¢",9,"æ¢£æ¢¤æ¢¥æ¢©æ¢ªæ¢«æ¢¬æ¢®æ¢±æ¢²æ¢´æ¢¶æ¢·æ¢¸"],["9780","æ¢¹",6,"æ£æ£",5,"æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£æ£",4,"æ£¡æ£¢æ£¤",9,"æ£¯æ£²æ£³æ£´æ£¶æ£·æ£¸æ£»æ£½æ£¾æ£¿æ¤æ¤æ¤æ¤æ¤",4,"æ¤æ¤æ¤æ¤",11,"æ¤¡æ¤¢æ¤£æ¤¥",7,"æ¤®æ¤¯æ¤±æ¤²æ¤³æ¤µæ¤¶æ¤·æ¤¸æ¤ºæ¤»æ¤¼æ¤¾æ¥æ¥æ¥",16,"æ¥æ¥æ¥æ¥æ¥æ¥æ¥"],["9840","æ¥¡æ¥¢æ¥¤æ¥¥æ¥§æ¥¨æ¥©æ¥ªæ¥¬æ¥­æ¥¯æ¥°æ¥²",4,"æ¥ºæ¥»æ¥½æ¥¾æ¥¿æ¦æ¦æ¦æ¦æ¦æ¦æ¦",5,"æ¦æ¦æ¦æ¦æ¦",9,"æ¦©æ¦ªæ¦¬æ¦®æ¦¯æ¦°æ¦²æ¦³æ¦µæ¦¶æ¦¸æ¦¹æ¦ºæ¦¼æ¦½"],["9880","æ¦¾æ¦¿æ§æ§",7,"æ§æ§æ§æ§æ§æ§æ§",5,"æ§æ§æ§æ§¡",11,"æ§®æ§¯æ§°æ§±æ§³",9,"æ§¾æ¨",9,"æ¨",11,"æ¨",5,"æ¨ æ¨¢",5,"æ¨©æ¨«æ¨¬æ¨­æ¨®æ¨°æ¨²æ¨³æ¨´æ¨¶",6,"æ¨¿",4,"æ©æ©æ©",7,"æ©",6,"æ©"],["9940","æ©",4,"æ©¢æ©£æ©¤æ©¦",10,"æ©²",6,"æ©ºæ©»æ©½æ©¾æ©¿æªæªæªæª",8,"æªæª",4,"æª",7,"æª¡",5],["9980","æª§æª¨æªªæª­",114,"æ¬¥æ¬¦æ¬¨",6],["9a40","æ¬¯æ¬°æ¬±æ¬³æ¬´æ¬µæ¬¶æ¬¸æ¬»æ¬¼æ¬½æ¬¿æ­æ­æ­æ­æ­æ­æ­æ­æ­",11,"æ­",7,"æ­¨æ­©æ­«",13,"æ­ºæ­½æ­¾æ­¿æ®æ®æ®"],["9a80","æ®æ®æ®æ®æ®æ®æ®æ®æ®æ®æ®",4,"æ®¢",7,"æ®«",7,"æ®¶æ®¸",6,"æ¯æ¯æ¯æ¯",4,"æ¯æ¯æ¯æ¯æ¯æ¯æ¯",4,"æ¯¢",7,"æ¯¬æ¯­æ¯®æ¯°æ¯±æ¯²æ¯´æ¯¶æ¯·æ¯¸æ¯ºæ¯»æ¯¼æ¯¾",6,"æ°",4,"æ°æ°æ°æ°æ°æ°æ° æ°£æ°¥æ°«æ°¬æ°­æ°±æ°³æ°¶æ°·æ°¹æ°ºæ°»æ°¼æ°¾æ°¿æ±æ±æ±æ±æ±",4,"æ±æ±æ±æ±æ±"],["9b40","æ±æ±æ±¢æ±£æ±¥æ±¦æ±§æ±«",4,"æ±±æ±³æ±µæ±·æ±¸æ±ºæ±»æ±¼æ±¿æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ² æ²¢æ²¨æ²¬æ²¯æ²°æ²´æ²µæ²¶æ²·æ²ºæ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³æ³"],["9b80","æ³æ³æ³æ³æ³æ³¤æ³¦æ³§æ³©æ³¬æ³­æ³²æ³´æ³¹æ³¿æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´æ´",5,"æ´¦æ´¨æ´©æ´¬æ´­æ´¯æ´°æ´´æ´¶æ´·æ´¸æ´ºæ´¿æµæµæµæµæµæµæµæµæµæµæµæµæµæµ¡æµ¢æµ¤æµ¥æµ§æµ¨æµ«æµ¬æµ­æµ°æµ±æµ²æµ³æµµæµ¶æµ¹æµºæµ»æµ½",4,"æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶",4,"æ¶æ¶¢æ¶¥æ¶¬æ¶­æ¶°æ¶±æ¶³æ¶´æ¶¶æ¶·æ¶¹",5,"æ·æ·æ·æ·æ·æ·"],["9c40","æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·æ·¢æ·£æ·¥æ·§æ·¨æ·©æ·ªæ·­æ·¯æ·°æ·²æ·´æ·µæ·¶æ·¸æ·ºæ·½",7,"æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸æ¸¢æ¸¦æ¸§æ¸¨æ¸ªæ¸¬æ¸®æ¸°æ¸±æ¸³æ¸µ"],["9c80","æ¸¶æ¸·æ¸¹æ¸»",7,"æ¹",7,"æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹ ",10,"æ¹¬æ¹­æ¹¯",14,"æºæºæºæºæºæºæº",4,"æº",6,"æºæºæºæºæºæº æº¡æº£æº¤æº¦æº¨æº©æº«æº¬æº­æº®æº°æº³æºµæº¸æº¹æº¼æº¾æº¿æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»£æ»§æ»ª",5],["9d40","æ»°æ»±æ»²æ»³æ»µæ»¶æ»·æ»¸æ»º",7,"æ¼æ¼æ¼æ¼æ¼æ¼",4,"æ¼æ¼æ¼æ¼",9,"æ¼¡æ¼¢æ¼£æ¼¥æ¼¦æ¼§æ¼¨æ¼¬æ¼®æ¼°æ¼²æ¼´æ¼µæ¼·",6,"æ¼¿æ½æ½æ½"],["9d80","æ½æ½æ½æ½æ½æ½æ½æ½",9,"æ½æ½æ½æ½æ½æ½ æ½¡æ½£æ½¤æ½¥æ½§",5,"æ½¯æ½°æ½±æ½³æ½µæ½¶æ½·æ½¹æ½»æ½½",6,"æ¾æ¾æ¾æ¾æ¾æ¾",12,"æ¾æ¾æ¾æ¾ æ¾¢",4,"æ¾¨",10,"æ¾´æ¾µæ¾·æ¾¸æ¾º",5,"æ¿æ¿",5,"æ¿",6,"æ¿",10,"æ¿æ¿¢æ¿£æ¿¤æ¿¥"],["9e40","æ¿¦",7,"æ¿°",32,"ç",7,"ç",6,"ç¤",6],["9e80","ç«",9,"ç¶ç·ç¸çº",17,"ççç",13,"ç",11,"ç®ç±ç²ç³ç´ç·ç¹çºç»ç½ççççççççççççççççççç",12,"ç°ç²ç´çµç¶çºç¾ç¿çççççç",12,"ç"],["9f40","çççç ç¡ç¢ç£ç¥çªç®ç°",6,"ç¸çºç»ç¼ç¾",10,"ç",4,"ççççç",10,"ç§",7,"ç²ç³ç´"],["9f80","çµç·",13,"ççççççç",12,"çç",4,"ç¥ç©",4,"ç¯ç°ç±ç´çµç¶ç·ç¹ç»ç¼ç¾",5,"ç",4,"çççççççççççç",4,"ç¡",6,"ç©çªç«ç­",5,"ç´ç¶ç·ç¸çº",8,"ç",9,"ç",4],["a040","ç",9,"ç¡ç¢ç£ç¤ç¦ç¨",5,"ç¯",9,"çº",11,"ç",19],["a080","ççç",9,"ç©ç«ç­ç®ç¯ç²ç³ç´çºç¼ç¾ç",6,"çççççççççççççççç ç£ç¤ç¥ç¨çªç«ç¬ç­ç°ç±ç³ç´ç¶ç·ç¸ç»ç¼ç½ççç",4,"ççççç",11,"ç ",11,"ç®ç±ç²ç³çµçº",6,"çççççççççççççççç"],["a1a1","ãããÂ·ËËÂ¨ããâï½ââ¦ââââããã",7,"ããããÂ±ÃÃ·â¶â§â¨âââªâ©ââ·ââ¥â¥â âââ«â®â¡âââ½ââ â®â¯â¤â¥ââµâ´ââÂ°â²â³âï¼Â¤ï¿ ï¿¡â°Â§âââââââââ¡â â³â²â»ââââã"],["a2a1","â°",9],["a2b1","â",19,"â´",19,"â ",9],["a2e5","ã ",9],["a2f1","â ",11],["a3a1","ï¼ï¼ï¼ï¿¥ï¼",88,"ï¿£"],["a4a1","ã",82],["a5a1","ã¡",85],["a6a1","Î",16,"Î£",6],["a6c1","Î±",16,"Ï",6],["a6e0","ï¸µï¸¶ï¸¹ï¸ºï¸¿ï¹ï¸½ï¸¾ï¹ï¹ï¹ï¹"],["a6ee","ï¸»ï¸¼ï¸·ï¸¸ï¸±"],["a6f4","ï¸³ï¸´"],["a7a1","Ð",5,"ÐÐ",25],["a7d1","Ð°",5,"ÑÐ¶",25],["a840","ËËËâââ¥âµâââââââââ£ââ¦â§â¿â",35,"â",6],["a880","â",7,"ââââ¼â½â¢â£â¤â¥ââããã"],["a8a1","ÄÃ¡ÇÃ ÄÃ©ÄÃ¨Ä«Ã­ÇÃ¬ÅÃ³ÇÃ²Å«ÃºÇÃ¹ÇÇÇÇÃ¼ÃªÉ"],["a8bd","ÅÅ"],["a8c0","É¡"],["a8c5","ã",36],["a940","ã¡",8,"ã£ãããããã¡ãããããï¸°ï¿¢ï¿¤"],["a959","â¡ã±"],["a95c","â"],["a960","ã¼ããã½ã¾ãããï¹",9,"ï¹ï¹ï¹ï¹ï¹",8],["a980","ï¹¢",4,"ï¹¨ï¹©ï¹ªï¹«"],["a996","ã"],["a9a4","â",75],["aa40","çççç¢",5,"çªç«çµç¶ç¹ç½ç¾ç¿ççç",5,"ççççççççççççç ç£ç¤ç¦ç§ç¨ç­ç¯ç°ç²ç³çµç¶çºç»ç¼ç½ç",8],["aa80","çççççççççççç",7,"ç¡",10,"ç®ç°ç±"],["ab40","ç²",11,"ç¿",4,"çççççççççççççççççççç ç¡ç£",5,"çªç¬ç­ç±ç´çµç¶ç¸ç¹ç¼ç½ç¾ç¿çç",4],["ab80","çççç",6,"çççççç¡ç¢ç£ç¤ç¦ç¨çªç«ç¬ç®ç¯ç°ç±ç³",4],["ac40","ç¸",10,"çççççççç",8,"ç",5,"ç£ç¤ç§ç©ç«ç­ç¯ç±ç²ç·",4,"ç½ç¾ç¿çç",11],["ac80","ç",6,"çççç ",12,"ç®ç¯ç±",4,"ç¸ç¹çº"],["ad40","ç»ç¼ç½ç¿ççççççççççç",10,"çç",7,"çª",15,"ç»",12],["ad80","ç",9,"ç",8,"ççç¡ç¥ç§",6,"ç°ç±ç²"],["ae40","ç³çµç¸",6,"ççççç",7,"ççççççççççç ",4,"ç¦ç§çªç®ç´ç¶ç¹ç¼ç½ç¿ççççççççççççççççç"],["ae80","ç",7,"ç§ç¨ç©ç«",6,"ç³çµç¶ç·çº",4,"çççççç"],["af40","çççççççççççççç¢ç¦",4,"ç­ç¶ç·çºç»ç¿ççççççççççççççççç ç¡ç¥ç©ç¬ç­ç®ç¯ç²ç³çµç¶ç·ç¸çºç»ç½ç¾çççç"],["af80","çççççççççççççççç¡ç£ç§ç¨ç¬ç®ç¯ç±ç²ç¶ç·ç¹çºç»ç½ççç"],["b040","ç",6,"ç",5,"çç",4,"ççç ç¡ç¢ç¤",6,"ç¬ç­ç®ç°",7,"ç¹çºç¼ç¿ççççççççççççççççç"],["b080","ç",7,"ç¥",8,"ç¯ç°ç³çµ",9,"çççåé¿åæ¨åååççè¼ç®è¾ç¢ç±ééæ°¨å®ä¿ºææå²¸èºæ¡è®æçå¹æç¬ç¿±è¢å²å¥¥ææ¾³è­ææå­å§ç¬å«ç¤å·´æè·é¶æèåé¸ç½¢ç¸ç½æç¾æä½°è´¥æç¨æç­æ¬æ³è¬é¢æ¿çæ®æä¼´ç£ååç»é¦å¸®æ¢æ¦èç»æ£ç£èéåè°¤èèåè¤å¥"],["b140","ççççççççççççç ",4,"ç¦",7,"ç°ç³çµç¶ç·çºç»ç½ç¿çççççççç",10,"ççççç¡ç£ç¤ç¥ç§çªç«"],["b180","ç¬ç®ç°",4,"ç¹ç»ç½ç¾ç¿ççççç",7,"ç",7,"çèé¹ä¿å ¡é¥±å®æ±æ¥æ´è±¹é²çæ¯ç¢æ²ååè¾èè´é¡åçå¤æ«çè¢«å¥è¯æ¬ç¬¨å´©ç»·ç­æ³µè¹¦è¿¸é¼é¼»æ¯éç¬å½¼ç¢§èè½æ¯æ¯æ¯å¸åºç¹é­æå¼å¿è¾å£èé¿éé­è¾¹ç¼è´¬æä¾¿ååè¾¨è¾©è¾«éæ å½ªèè¡¨é³æå«çªå½¬ææ¿æ»¨å®¾æåµå°æä¸ç§é¥¼ç³"],["b240","çççç ç¤ç§ç©çªç­",11,"çºç»ç¼çççç",5,"ççç",11,"ç¡ç£ç¤ç¦ç¨ç«ç­ç®ç¯ç±ç²ç´ç¶",4],["b280","ç¼ç¾ç",12,"ç",8,"çççç",4,"ç¤çå¹¶ç»è æ­æ¨éµæ³¢ååæéç®ä¼¯å¸è¶èèæ¸¤æ³é©³æååºè¡¥å ä¸å¸æ­¥ç°¿é¨ææ¦çè£ææè´¢ç¬è¸©éå½©èè¡é¤åèæ®æ­æ¨ç¿èè±ä»æ²§èæç³æ§½æ¹èåç­ä¾§åæµå±è¹­æåè¬è¶æ¥ç¢´æ½å¯å²å·®è¯§ææ´è±ºææºèé¦è°ç¼ é²äº§éé¢¤æç"],["b340","ç¦ç¨çªç¯ç°ç±ç²ç´çµç·ç¹çºç»ç¼ç ",5,"ç ç ç ç ç ç ç ç ç ç ç  ç ¡ç ¢ç ¤ç ¨ç ªç «ç ®ç ¯ç ±ç ²ç ³ç µç ¶ç ½ç ¿ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡"],["b380","ç¡ç¡ç¡",11,"ç¡¯",7,"ç¡¸ç¡¹ç¡ºç¡»ç¡½",6,"åºå°å¸¸é¿å¿è åæçå±å¡è¶æéæå²æ½®å·¢åµçè½¦æ¯æ¤æ£å½»æ¾é´è£è¾°å°æ¨å¿±æ²éè¶è¡¬æç§°åæ©æåä¹ç¨æ©æ¾è¯æ¿ééªç§¤åç´æåæ± è¿å¼é©°è»é½¿ä¾å°ºèµ¤ç¿æ¥ç½åå²è«å´å® æ½é¬ç´è¸ç¨ æç­¹ä»ç»¸çä¸è­ååºæ©±å¨èºééæ»é¤æ¥"],["b440","ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ ç¢¢ç¢¤ç¢¦ç¢¨",7,"ç¢µç¢¶ç¢·ç¢¸ç¢ºç¢»ç¢¼ç¢½ç¢¿ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£",9],["b480","ç£¤ç£¥ç£¦ç£§ç£©ç£ªç£«ç£­",4,"ç£³ç£µç£¶ç£¸ç£¹ç£»",5,"ç¤ç¤ç¤ç¤",6,"ç¡å¨çæè§¦å¤æ£å·ç©¿æ¤½ä¼ è¹åä¸²ç®çªå¹¢åºé¯åå¹çæ¶é¤åæ¥æ¤¿éåæ·³çº¯è ¢æ³ç»°çµè¨ç£éè¾æç·è¯æ­¤åºèµæ¬¡èªè±å±åä»ä¸åç²éç°ä¿è¹¿ç¯¡çªæ§å´å¬èçç²¹æ·¬ç¿ æå­å¯¸ç£æ®ææªæ«éæ­è¾¾ç­ç©æå¤§åæ­¹å£æ´å¸¦æ®ä»£è´·è¢å¾é®"],["b540","ç¤",5,"ç¤",9,"ç¤",4,"ç¤¥",14,"ç¤µ",4,"ç¤½ç¤¿ç¥ç¥ç¥ç¥ç¥ç¥",8,"ç¥ç¥ç¥ç¥ç¥¡ç¥£"],["b580","ç¥¤ç¥¦ç¥©ç¥ªç¥«ç¥¬ç¥®ç¥°",6,"ç¥¹ç¥»",4,"ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦æ è½æä¸¹åé¸æ¸èæ¦æ°®ä½æ®æ·¡è¯å¼¹èå½æ¡åè¡æ¡£åæ£è¹åå²ç¥·å¯¼å°ç¨»æ¼éçå¾·å¾çè¹¬ç¯ç»ç­çªå³éå ¤ä½æ»´è¿ªæç¬çæ¶¤ç¿å«¡æµåºå°èç¬¬å¸å¼éç¼é¢ ææ»ç¢ç¹å¸éå«çµä½ç¸åºæ¦å¥ æ·æ®¿ç¢å¼éååæåéè°è·ç¹ç¢è¶è¿­è°å "],["b640","ç¦",6,"ç¦",11,"ç¦¨",10,"ç¦´",4,"ç¦¼ç¦¿ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§",5,"ç§ ç§¡ç§¢ç§¥ç§¨ç§ª"],["b680","ç§¬ç§®ç§±",6,"ç§¹ç§ºç§¼ç§¾ç§¿ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨",4,"ç¨ç¨ç¨ç¨ç¨ç¨ä¸ç¯å®éé¡¶é¼é­å®è®¢ä¸¢ä¸å¬è£æå¨æ ä¾æ«å»æ´åææé¡è±éçé½ç£æ¯çç¬è¯»å µç¹èµæéèåº¦æ¸¡å¦ç«¯ç­é»æ®µæ­ç¼å åéå¯¹å¢©å¨è¹²æ¦é¡¿å¤éç¾éæåå¤å¤ºåèº²æµè·ºèµåæ°å è¾å³¨é¹ä¿é¢è®¹å¨¥æ¶åæ¼ééé¥¿æ©èå¿è³å°é¥µæ´±äº"],["b740","ç¨ç¨ç¨¡ç¨¢ç¨¤",14,"ç¨´ç¨µç¨¶ç¨¸ç¨ºç¨¾ç©",5,"ç©",9,"ç©",4,"ç©",16],["b780","ç©©",6,"ç©±ç©²ç©³ç©µç©»ç©¼ç©½ç©¾çªçªçªçªçªçªçªçªçªçªçªçªçªçªçªçªçª¡çª¢è´°åç½ç­ä¼ä¹éæ³çè©å¸çªç¿»æ¨ç¾éç¹å¡ç¦åè¿èè´©ç¯é¥­æ³åè³æ¹èªæ¿é²å¦¨ä»¿è®¿çººæ¾è²éå¡é£è¥åªè¯½å èºåºæ²¸è´¹è¬éå©æ°åçº·åçæ±¾ç²å¥ä»½å¿¿æ¤ç²ªä¸°å°æ«èå³°éé£ç¯ç½é¢å¯ç¼è®½å¥å¤ä½å¦å¤«æ·è¤å­µæ¶æè¾å¹æ°ç¬¦ä¼ä¿æ"],["b840","çª£çª¤çª§çª©çªªçª«çª®",4,"çª´",10,"ç«",10,"ç«",9,"ç«ç«ç«ç«ç«ç«ç«¡ç«¢ç«¤ç«§",5,"ç«®ç«°ç«±ç«²ç«³"],["b880","ç«´",4,"ç«»ç«¼ç«¾ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬¡ç¬¢ç¬£ç¬§ç¬©ç¬­æµ®æ¶ªç¦è¢±å¼ç«æè¾ä¿¯éæ§è¯èåºèèµ´å¯è¦èµå¤åä»éç¶è¹è´å¯è®£éå¦ç¼åå¶åè¯¥æ¹æ¦éçæºå¹²çææç«¿èèµ¶æç§æ¢èµ£ååé¢ç¼¸èçº²å²æ¸¯æ ç¯çé«èç¾ç³æéç¨¿åå¥æ­ææé¸½è³çå²é©èæ ¼è¤ééé¬ä¸ªåç»æ ¹è·èæ´åºç¾¹"],["b940","ç¬¯ç¬°ç¬²ç¬´ç¬µç¬¶ç¬·ç¬¹ç¬»ç¬½ç¬¿",5,"ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­¡ç­£",10,"ç­¯ç­°ç­³ç­´ç­¶ç­¸ç­ºç­¼ç­½ç­¿ç®ç®ç®ç®ç®",6,"ç®ç®"],["b980","ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç® ç®£ç®¤ç®¥ç®®ç®¯ç®°ç®²ç®³ç®µç®¶ç®·ç®¹",7,"ç¯ç¯ç¯åè¿æ¢å·¥æ»åæ­é¾ä¾èº¬å¬å®«å¼å·©æ±æ±è´¡å±é©å¾æ²èçå¢æè´­å¤è¾èåç®ä¼°æ²½å­¤å§é¼å¤èéª¨è°·è¡æé¡¾åºéå®çåå¯¡æè¤ä¹ææªæ£ºå³å®å è§ç®¡é¦ç½æ¯çè´¯åå¹¿éç°è§å­ç¡å½é¾éºè½¨é¬¼è¯¡ç¸æ¡æè·ªè´µå½è¾æ»æ£éé­å½æè£¹è¿å"],["ba40","ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯",4,"ç¯ç¯ç¯ç¯ç¯ ç¯¢ç¯£ç¯¤ç¯§ç¯¨ç¯©ç¯«ç¯¬ç¯­ç¯¯ç¯°ç¯²",4,"ç¯¸ç¯¹ç¯ºç¯»ç¯½ç¯¿",7,"ç°ç°ç°ç°ç°ç°",5,"ç°ç°ç°"],["ba80","ç°",4,"ç° ",5,"ç°¨ç°©ç°«",12,"ç°¹",5,"ç±éª¸å­©æµ·æ°¦äº¥å®³éªé£æ¨é¯é©å«æ¶µå¯å½åç½ç¿°æ¼ææ±æ¾æçæ±æ±å¤¯æ­èªå£åè±ªæ¯«éå¥½èå·æµ©åµåè·èæ ¸ç¦¾åä½åçè²éæ²³æ¶¸èµ«è¤é¹¤è´ºå¿é»çå¾ç æ¨å¼äº¨æ¨ªè¡¡æè½°åçè¹é¸¿æ´ªå®å¼çº¢åä¾¯ç´å¼åååå¼ä¹å¿½çå£¶è«è¡è´çç³æ¹"],["bb40","ç±",9,"ç±",36,"ç±µ",5,"ç±¾",9],["bb80","ç²ç²",6,"ç²ç²ç²ç²ç²ç²ç² ç²¡ç²£ç²¦ç²§ç²¨ç²©ç²«ç²¬ç²­ç²¯ç²°ç²´",4,"ç²ºç²»å¼§èå¬æ¤äºæ²ªæ·è±ååç¾æ»ç»ååè¯æ§å¾ææ·®åæ¬¢ç¯æ¡è¿ç¼æ¢æ£å¤çªè±¢çæ¶£å®¦å¹»èæé»ç£ºèç°§çå°æ¶çæå¹æè°ç°æ¥è¾å¾½æ¢èåæ¯ææ§åæ æ¦è´¿ç§½ä¼ç©æ±è®³è¯²ç»è¤æå©é­æµæ··è±æ´»ä¼ç«è·ææéè´§ç¥¸å»å¾åºæºç¸ç¨½ç§¯ç®"],["bc40","ç²¿ç³ç³ç³ç³ç³ç³ç³ç³",6,"ç³ç³ç³ç³ç³ç³¡",6,"ç³©",5,"ç³°",7,"ç³¹ç³ºç³¼",13,"ç´",5],["bc80","ç´",14,"ç´¡ç´£ç´¤ç´¥ç´¦ç´¨ç´©ç´ªç´¬ç´­ç´®ç´°",6,"èé¥¥è¿¹æ¿è®¥é¸¡å§¬ç»©ç¼åææ£è¾ç±éåæ¥ç¾æ±²å³å«çº§æ¤å èå·±èæåå­£ä¼ç¥­åæ¸æµå¯å¯è®¡è®°æ¢å¿éå¦ç»§çºªåæ·å¤¹ä½³å®¶å èé¢è´¾ç²é¾åç¨¼ä»·æ¶é©¾å«æ­¼çåå°ç¬ºé´çå¼è©è°å¥¸ç¼è§æ£æ¬ç¢±ç¡·æ£æ¡ç®ä¿­åªåèæ§é´è·µè´±è§é®ç®­ä»¶"],["bd40","ç´·",54,"çµ¯",7],["bd80","çµ¸",32,"å¥è°åé¥¯æ¸æºæ¶§å»ºåµå§å°æµæ±çèæ¡¨å¥è®²å é±éèæ¤ç¤ç¦è¶äº¤éæµéªå¨å¼æé°ç«ä¾¥èç¡è§é¥ºç¼´ç»å¿æéµè½¿è¾å«çªæ­æ¥çç§¸è¡é¶æªå«èæ¡æ°æ·ç«ç«­æ´ç»è§£å§æèè¥çåä»ç¥è¯«å±å·¾ç­æ¤éä»æ´¥è¥ç´§é¦ä»è°¨è¿é³æç¦è¿ç¬æµ¸"],["be40","ç¶",12,"ç¶§",6,"ç¶¯",42],["be80","ç·",32,"å°½å²èå¢èçæ¶é²¸äº¬æç²¾ç²³ç»äºè­¦æ¯é¢éå¢æ¬éå¾çéç«ç«åç¯çªæªç©¶çº çé­ä¹ç¸ä¹éå©ææ§è¼èåå°±çé æçç½å±é©¹èå±åç©ä¸¾æ²®èææ®å·¨å·è·è¸é¯ä¿±å¥æ§ç¬å§æé¹å¨å¦ç·å·ç»¢ææ«ææåçµè§å³è¯ç»åèé§ååå³»"],["bf40","ç·»",62],["bf80","ç¸ºç¸¼",4,"ç¹",4,"ç¹",21,"ä¿ç«£æµé¡éªååå¡å¯å¼æ©æ¥·å¯æ¨åå ªååç çåº·æ·ç³ ææäº¢çèæ·ç¤é å·èæ¯æ£µç£é¢ç§å£³å³å¯æ¸´åå»å®¢è¯¾è¯åå¦æ³åå­ç©ºæå­æ§æ å£æ£å¯æ¯å­çªè¦é·åºè£¤å¤¸å®æè·¨è¯åç­·ä¾©å¿«å®½æ¬¾å¡ç­çæ¡ç¿ç¶æ·åµäºçå²¿çª¥èµå¥é­å"],["c040","ç¹",35,"çº",23,"çºçºçº"],["c080","çº®çº´çº»çº¼ç»ç»¤ç»¬ç»¹ç¼ç¼ç¼ç¼·ç¼¹ç¼»",6,"ç½ç½",9,"ç½ç½é¦æ§æºå¤ææå°æ¬æ©å»éåæåè¡èè¾£å¦è±æ¥èµèå©ªæ æ¦ç¯®éå°æ¾è°°æ½è§æç¼çæ»¥çæ¦ç¼å»éææµªæå³ç¢èä½¬å§¥éªçæ¶åä¹é·é­è¾ç£ç´¯å¡åæèç±»æ³ªæ£±æ¥å·åæ¢¨çé»ç¯±ç¸ç¦»æ¼çæéé²¤ç¤¼èèåæ ä¸½åå±ç ¾åå©åä¾ä¿"],["c140","ç½ç½ç½ç½ç½ç½ç½ ç½£",4,"ç½«ç½¬ç½­ç½¯ç½°ç½³ç½µç½¶ç½·ç½¸ç½ºç½»ç½¼ç½½ç½¿ç¾ç¾",7,"ç¾ç¾ç¾",4,"ç¾",4,"ç¾ç¾ç¾ ç¾¢ç¾£ç¾¥ç¾¦ç¾¨",6,"ç¾±"],["c180","ç¾³",4,"ç¾ºç¾»ç¾¾ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿",4,"ç¿ç¿ç¿",5,"ç¿¢ç¿£ç¢ç«ç²æ²¥é¶åçå©ä¿©èè²è¿é°å»ææ¶å¸æè¸é¾æç¼ç»ç²®åæ¢ç²±è¯ä¸¤è¾éæ¾äº®è°æ©èåççå¯¥è¾½æ½¦äºæé£å»æåè£çå£çç³æç£·éä¸´é»é³æ·åèµåæç²è±é¶é¾éä¼¶ç¾åçµéµå²­é¢å¦ä»¤æºçæ¦´ç¡«é¦çåç¤æµæ³å­é¾èåç¬¼çª¿"],["c240","ç¿¤ç¿§ç¿¨ç¿ªç¿«ç¿¬ç¿­ç¿¯ç¿²ç¿´",6,"ç¿½ç¿¾ç¿¿èèèèèèèèèèèèèèè¡è£è¤è«",5,"è²è´è¹èºè¼è¾èèèèèèèèèèèèèèè"],["c280","èè",13,"è«",5,"è²",11,"éåæ¢éæ¥¼å¨æç¯æ¼éè¦å¢é¢åºçæ³å¤èé²éºç¢é²è·¯èµé¹¿æ½ç¦å½éæ®é©´åéä¾£æå±¥å±¡ç¼èæ°¯å¾çæ»¤ç»¿å³¦æå­ªæ»¦åµä¹±æ ç¥æ¡è½®ä¼¦ä»æ²¦çº¶è®ºèèºç½é»é£ç®©éª¡è£¸è½æ´éªç»å¦éº»çç èé©¬éªåååä¹°éº¦åè¿èçé¦è®æ»¡èæ¼æ¢æ¼«"],["c340","è¾èèèèèè",5,"èèèèèè£è¦è§è¨è¬è°è³èµè¶è¸è¹è»èè",4,"è",6,"èèè è¢è£è¦è®èµè·è¹è»è¾è¿èèèèèèèè"],["c380","èèèèèèèè",12,"è­è®è°è³è´èµè·è¹",4,"è¿è°©èè«ç²æ°å¿è½ç«èéæ¯çéå¯èåå¸½è²è´¸ä¹ç«ææ¢é¶éç¤æ²¡çåªéæ¯ç¾æ§å¯å¦¹åªé¨é·ä»¬èèæª¬çé°çæ¢¦å­ç¯éé¡ç³è¿·è°å¼¥ç±³ç§è§æ³èå¯å¹æ£ç ç»µåååå¨©ç¼é¢èæçèç§æ¸ºåºå¦èç­æ°æ¿ç¿ææ¯é½æèé¸£é­åå½è°¬æ¸"],["c440","è",5,"èèèèèèèèèè",4,"è¡è¢è£è¤è¦è¨èªè«è¬è¯è²è³èµè¶è·è¸èè",4,"èèèèèèè",5,"èèè",4,"è¤è¥"],["c480","è§è©è«",7,"è´",5,"è¼è½è¾è¿èèèèèèè",6,"æ¹èæ¨¡èç£¨æ©é­æ¹æ«è«å¢¨é»æ²«æ¼ å¯éè°çææç¡äº©å§æ¯å¢æ®å¹åææ¨ç®ç¦ç§ç©æ¿åªåé é£å¨çº³æ°ä¹å¥¶èå¥åç·é¾åæ èæ¼é¹æ·å¢é¦åå«©è½å¦®éåªæ³¥å°¼æä½ å¿è»éæººè«æå¹´ç¢¾æµæ»å¿µå¨é¿é¸å°¿æèå­½å®ééæ¶æ¨æ çåå®"],["c540","è",14,"è¤è¥è¦è¨è©è«è®",4,"èµ",5,"è½è¿èè",4,"èèèèè",5,"èè è¤è¥è¦è§è©è®è²èºè¼è½è¿"],["c580","èèèèèèèèèèèè",7,"èèèèèè ",7,"è©æ§æ³çæ­é®çº½èæµåå¼å¥´åªæå¥³æèçæªæ¦ç³¯è¯ºå¦æ¬§é¸¥æ®´èåå¶æ²¤åªè¶´ç¬å¸æç¶ææçå¾æ¹æ´¾ææ½çç£ç¼çå¤åä¹åºæèªèæåå¨ç®è¢è·æ³¡å¸èå¹è£´èµéªéä½©æ²å·çç °æ¨ç¹æ¾å½­è¬æ£ç¡¼ç¯·è¨æé¹æ§ç¢°å¯ç é¹æ¹æ«åçµæ¯"],["c640","èªè«è¬è­è±èµè¶è·è¸è»è¼èèèèèèèèèèèèèèèèè è¢è£è§è²èµè¶èºè»è¼è¿èèèèèèèèèèèè¢è§è¨è©èªè¬è­è®è°è²è³èµè¶è¸"],["c680","èºè¼",4,"èèèèèèèèèè",9,"è©èªè®è°è²è·è»è½å¤è¾ç²ç®å¹çå»å±è­¬ç¯åçéªé£æ¼ç¢ç¥¨æç¥æ¼é¢è´«åèä¹åªè¹èå¹³å­ç¶è¯å±å¡æ³¼é¢å©ç ´é­è¿«ç²åæéºä»èè¡è©è²åæ´åæ®æµ¦è°±æçææ¬ºæ æå¦»ä¸åæ¼ææ²å¶æ£å¥æ­§ç¦å´èé½æç¥ç¥éªèµ·å²ä¹ä¼å¯å¥ç å¨æ°è¿å¼æ±½æ³£è®«æ"],["c740","è¾è¿èèèèèè",4,"èè",4,"èè¢è°",6,"è¹èºè¾",6,"èèèèèèèèèèèèèèèèèè¡",6,"è¬è­è®"],["c780","è¯èµè»è¾è¿èèèèèèèèèèèèèèèèèèèè¢è£è¤è¦è§è¨è«è¬è­æ°æ´½çµæ¦ééåè¿ç­¾ä»è°¦ä¹¾é»é±é³åæ½é£æµè°´å åµæ¬ æ­æªåèç¾å¢è·å¼ºæ¢æ©é¹æ²ææ¡¥ç§ä¹ä¾¨å·§éæ¬ç¿å³­ä¿çªåèä¸æ¯çªé¦ä¾µäº²ç§¦ç´å¤è¹æç¦½å¯æ²éè½»æ°¢å¾å¿æ¸ææ´æ°°æé¡·è¯·åºç¼ç©·ç§ä¸é±çæ±åéæ³è¶åºèæ²èº¯å±é©±æ¸ "],["c840","è®è¯è³",4,"èºè»è¼è¾è¿èèèèèèèèè",5,"èèèè",5,"è©",7,"è²",5,"è¹èºè»è¾",7,"èèè"],["c880","è",6,"è",4,"èèèèè è¢è¤",4,"èªè®è¯è°è²è´è·è¹è»è¼åå¨¶é¾è¶£å»åé¢§æéæ³å¨çæ³ç¬å¸åç¼ºçç¸å´é¹æ¦·ç¡®éè£ç¾¤ç¶çåæç¤å£¤æå·è®©é¥¶æ°ç»æ¹ç­å£¬ä»äººå¿é§ä»»è®¤åå¦çº«æä»æ¥æè¸èè£èçæº¶å®¹ç»åææèè¹è åå­ºå¦è¾±ä¹³æ±å¥è¤¥è½¯é®èçéé°æ¶¦è¥å¼±ææ´è¨è®é³å¡èµä¸å"],["c940","è½",4,"èèèèèèè",7,"èèèèèèè è¢",12,"è°è±è³èµè¶è·è»è¼è¾èèèèèèèèèèèèèèè"],["c980","è",4,"èè¡è¢è¤è§",4,"è­è®è¯è±",10,"è½è¾èèèä¼æ£æ¡åä¸§æéªæ«å«çè²æ¶©æ£®å§èç æå¹æ²çº±å»å¥çç­æçè«æå±±å ç½è¡«éªéæèµ¡è³åæ±æç¼®å¢ä¼¤åèµæä¸å°è£³æ¢¢æç¨ç§èåºé¶å°å¨éµç»å¥¢èµèèèèµ¦æå°ææ¶ç¤¾è®¾ç ·ç³å»ä¼¸èº«æ·±å¨ ç»ç¥æ²å®¡å©¶çè¾ææ¸å£°çç¥ç²åç»³"],["ca40","è",8,"èèèèèèèèèèèèèèè è¢",8,"è­",9,"è¾",4,"èèèèè",10],["ca80","èèèèèèè",4,"è¥è¦è§è©",8,"è³èµè¶è·è¸è¼è½è¿èèççå©èå£å¸å¤±ç®æ½æ¹¿è¯å°¸è±åç³æ¾æ¶ä»é£èå®è¯å²ç¢ä½¿å±é©¶å§å¼ç¤ºå£«ä¸æ¿äºæ­èªéå¿æ¯åå¬éä»ä¾éé¥°æ°å¸æå®¤è§è¯æ¶æé¦å®å¯¿æå®åç¦å½è¬æ¢æ¢³æ®æè¾åèæ·çä¹¦èµå­°çè¯ææç½²èé»é¼ å±æ¯è¿°æ ææç«å¢åº¶æ°æ¼±"],["cb40","èèèè",6,"è",10,"è",6,"è¥è¦è§è©è«è¬è­è±",5,"è¸èº",6,"è",6,"è",4,"èè"],["cb80","èè",5,"è",6,"è¥è¦è§è¨èª",14,"æå·èæè¡°ç©å¸æ æ´éåç½è°æ°´ç¡ç¨å®ç¬é¡ºèè¯´ç¡æçæ¯æå¶æç§å¸ä¸æ­»èå¯ºå£åä¼ºä¼¼é¥²å·³æ¾è¸æé¢éå®è®¼è¯µæèæå½èé¥ä¿ç´ éç²å³å¡æº¯å®¿è¯èé¸èç®è½ééç»¥é«ç¢å²ç©éé§ç¥å­æç¬èæ¢­åç¼©çç´¢éæå¡ä»å®å¥¹å¡"],["cc40","è¹èºè¼è½è¾è",4,"è",10,"èèèèè",15,"è¨èª",13,"è¹èºè»è½è¾è¿è"],["cc80","è",11,"èèè",4,"èèèèè è¡è£",7,"ç­æè¹è¸èèæ¬å°æ³°éå¤ªææ±°åæè´ªç«æ»©åæªç°æ½­è°­è°å¦æ¯¯è¢ç¢³æ¢å¹ç­æ±¤å¡æªå æ£ èåç³åèººæ·è¶ç«ææ¶æ»ç»¦èæ¡éæ·é¶è®¨å¥ç¹è¤è¾ç¼èªæ¢¯åè¸¢éæé¢è¹å¼ä½æ¿åææ¶åå±å¤©æ·»å¡«ç°çæ¬èèææ¡è¿¢çºè·³è´´éå¸åå¬ç"],["cd40","è­è¯è°è²",6,"è",6,"è",4,"èè",5,"è",4,"è¥è¦è«è­è®è²è³è·è¸è¹è»",4,"èèèèèèèèèèèèèè"],["cd80","èè è¡è¢è£è¥è¦è§è¨èªè«è¬è¯èµè¶è·èºè»è¼è½è¿èèèèèèèèèèèèæ±å»·åäº­åº­æºèéæ¡é®ç³åéå½¤ç«¥æ¡¶æç­ç»çå·æå¤´éå¸ç§çªå¾å¾éæ¶å± åååæ¹å¢æ¨é¢è¿èè¤ªéåå±¯èææè±é¸µéé©®é©¼æ¤­å¦¥æå¾æåèæ´¼å¨ç¦è¢æ­ªå¤è±å¼¯æ¹¾ç©é¡½ä¸¸ç·å®ç¢æ½æçæå®å©ä¸èæ±ªçäº¡æç½å¾æºæå¿å¦å¨"],["ce40","èèèèè è¤è¦è§è¨èªè«è¬è­è¯è°è²è³èµè¶è¸è¹èºè¼è½è",6,"èèèèèèèèèèèè",5,"è¡è¢è¦",7,"è¯è±è²è³èµ"],["ce80","è·è¸è¹èºè¿èèèèèèèèè",4,"èèèè",6,"è ",4,"å·å¾®å±é¦è¿æ¡å´å¯æä¸ºæ½ç»´èèå§ä¼ä¼ªå°¾çº¬æªèå³çèåé­ä½æ¸­è°å°æ°å«çæ¸©èæé»çº¹å»ç¨³ç´é®å¡ç¿ç®æèæ¶¡çªææ¡å§æ¡æ²å·«åé¨ä¹æ±¡è¯¬å±æ èæ¢§å¾å´æ¯æ­¦äºæåèä¼ä¾®åæé¾æ¤ç©å¿å¡æè¯¯æçæè¥¿ç¡ç½æ°å»å¸é¡çº"],["cf40","è¥è¦è§è©èªè®è°è±è²è´è¶è·è¸è¹è»è¼è¾è¿è",4,"èèèè",4,"è",6,"èèèèè¡è¢è£è¤è¦è§è¨è©è«è¬è­è¯",9],["cf80","èºè»è¼è½è¿è è è è ",5,"è ",7,"è è è è è è ",4,"è £ç¨æ¯å¸æèå¤æçç¯æºªæ±çæªè¢­å¸­ä¹ åª³åé£æ´ç³»éæç»çè¾å£éè¾æå³¡ä¾ ç­ä¸å¦å¤åæé¨åä»é²çº¤å¸è´¤è¡è·é²æ¶å¼¦å«æ¾é©ç°ç®å¿èºé¦ç¾¡å®ªé·éçº¿ç¸å¢é¶é¦ç®±è¥æ¹ä¹¡ç¿ç¥¥è¯¦æ³åäº«é¡¹å··æ©¡ååè±¡è§ç¡éåå®å£éæ¶å®µæ·æ"],["d040","è ¤",13,"è ³",5,"è ºè »è ½è ¾è ¿è¡è¡è¡è¡",5,"è¡",5,"è¡è¡è¡è¡",6,"è¡¦è¡§è¡ªè¡­è¡¯è¡±è¡³è¡´è¡µè¡¶è¡¸è¡¹è¡º"],["d080","è¡»è¡¼è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢è¢",4,"è¢",4,"è¢£è¢¥",5,"å°å­æ ¡èå¸ç¬ææ¥äºæ­èéåææºéªæèè°åæ¢°å¸è¹ææ³æ³»è°¢å±èªè¯éæ¬£è¾æ°å¿»å¿ä¿¡è¡æè¥ç©æºå´ååå½¢é¢è¡éå¹¸ææ§å§åå¶è¸åæ±¹éçä¼ä¿®ç¾æ½åéç§è¢ç»£å¢æéèåé¡»å¾è®¸èéåæ­åºçæ¤çµ®å©¿ç»ªç»­è½©å§å®£æ¬æç"],["d140","è¢¬è¢®è¢¯è¢°è¢²",4,"è¢¸è¢¹è¢ºè¢»è¢½è¢¾è¢¿è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£è£",4,"è£ è£¡è£¦è£§è£©",6,"è£²è£µè£¶è£·è£ºè£»è£½è£¿è¤è¤è¤",5],["d180","è¤è¤",4,"è¤è¤",4,"è¤",4,"è¤¢è¤£è¤¤è¤¦è¤§è¤¨è¤©è¤¬è¤­è¤®è¤¯è¤±è¤²è¤³è¤µè¤·éç£ç©ç»é´èå­¦ç©´éªè¡åçå¾ªæ¬è¯¢å¯»é©¯å·¡æ®æ±è®­è®¯éè¿åæ¼é¸¦é¸­åä¸«è½çèå´è¡æ¶¯éåäºè®¶çå½éçæ·¹çä¸¥ç èå²©å»¶è¨é¢éçæ²¿å¥æ©ç¼è¡æ¼è³å °çåç éåå½¦ç°å®´è°éªæ®å¤®é¸¯ç§§æ¨æ¬ä½¯ç¡ç¾æ´é³æ°§ä»°çå»æ ·æ¼¾éè°å¦ç¶"],["d240","è¤¸",8,"è¥è¥è¥",24,"è¥ ",5,"è¥§",19,"è¥¼"],["d280","è¥½è¥¾è¦è¦è¦è¦è¦",26,"æå°§é¥çªè°£å§å¬èè¯è¦èæ¤°åè¶ç·éå¶ä¹é¡µæä¸å¶æ³èå¤æ¶²ä¸å£¹å»æé±ä¾ä¼è¡£é¢å¤·éç§»ä»ªè°çæ²å®å§¨å½æ¤èåå·²ä¹ç£ä»¥èºææéå±¹äº¿å½¹èé¸èç«äº¦è£ææ¯å¿ä¹çæº¢è¯£è®®è°è¯å¼ç¿¼ç¿ç»èµè«å æ®·é³é´å§»åé¶æ·«å¯é¥®å°¹å¼é"],["d340","è¦¢",30,"è§è§è§è§è§è§è§è§è§è§è§è§ è§¡è§¢è§¤è§§è§¨è§©è§ªè§¬è§­è§®è§°è§±è§²è§´",6],["d380","è§»",4,"è¨",5,"è¨",21,"å°è±æ¨±å©´é¹°åºç¼¨è¹è¤è¥è§èè¿èµ¢çå½±é¢ç¡¬æ åæ¥ä½£èçåº¸éè¸è¹åæ³³æ¶æ°¸æ¿åç¨å¹½ä¼æ å¿§å°¤ç±é®éç¹æ²¹æ¸¸éæåå³ä½éè¯±åå¹¼è¿æ·¤äºçæ¦èæèä½ä¿é¾é±¼ææ¸æ¸éäºå¨±é¨ä¸å±¿ç¦¹å®è¯­ç¾½çåèéåéå»å³ªå¾¡ææ¬²ç±è²èª"],["d440","è¨",31,"è¨¿",8,"è©",21],["d480","è©",25,"è©º",6,"æµ´å¯è£é¢è±«é©­é¸³æ¸å¤åå£è¢åæ´è¾å­ååç¿æºç¼è¿èæ¿æ¨é¢æ°çº¦è¶è·é¥å²³ç²¤ææ¦éèäºé§åé¨åè¿è´éæéµå­åç ¸ææ ½åç¾å®°è½½åå¨å±ææèµèµèè¬é­ç³å¿è»æ£æ©æ¾¡è¤èºåªé çç¶ç¥è´£æ©åæ³½è´¼æå¢ææ¾èµ æå³æ¸£æ­è½§"],["d540","èª",7,"èª",7,"èª",46],["d580","è«",32,"é¡é¸ç¨æ æ¦¨åä¹ç¸è¯ææå®çªåºå¯¨ç»æ¯¡è©¹ç²æ²¾çæ©è¾å´­å±è¸æ å æç«æ¹ç»½æ¨ç« å½°æ¼³å¼ ææ¶¨æä¸å¸è´¦ä»èç´éææ­æ¾æ²¼èµµç§ç½©åèå¬é®æå²è°è¾èéèè¿æµçæççç §è»è´éä¾¦æç¹è¯éæ¯ééµè¸æ£çå¾ç°äºææ´æ¯æ­£æ¿"],["d640","è«¤",34,"è¬",27],["d680","è¬¤è¬¥è¬§",30,"å¸§çéè¯èææ¯å±èç¥è¢èæ±ä¹ç»èç´æ¤æ®æ§å¼ä¾åææ­¢è¶¾åªæ¨çº¸å¿ææ·è³è´ç½®å¸å³å¶æºç§©ç¨è´¨ççæ»æ²»çªä¸­çå¿ éè¡·ç»ç§è¿éä»²ä¼èå¨å·æ´²è¯ç²¥è½´èå¸åç±å®æ¼éª¤ç æ ªèæ±çªè¯¸è¯éç«¹çç®æç©å±ä¸»èæ±å©èè´®é¸ç­"],["d740","è­",31,"è­§",4,"è­­",25],["d780","è®",24,"è®¬è®±è®»è¯è¯è¯ªè°è°ä½æ³¨ç¥é©»æçªæ½ä¸ç è½¬æ°èµç¯æ¡©åºè£å¦æå£®ç¶æ¤é¥è¿½èµå ç¼è°åææåæ¡ç¢èéåçç¼æµå¹å¨èµå§¿æ»æ·å­ç´«ä»ç±½æ»å­èªæ¸å­é¬æ£è¸ªå®ç»¼æ»çºµé¹èµ°å¥æç§è¶³åæç¥è¯é»ç»é»çºå´éæç½ªå°éµæ¨å·¦ä½æåä½ååº§"],["d840","è°¸",8,"è±è±è±è±è±è±è±è±",7,"è±è±è±è±è±",5,"è±£",6,"è±¬",6,"è±´è±µè±¶è±·è±»",6,"è²è²è²è²"],["d880","è²è²è²",6,"è²è²è²è²",20,"äºä¸åä¸å»¿åä¸äºä¸é¬²å­¬å©ä¸¨ç¦ºä¸¿åä¹å¤­ç»å®æ°åè¤é¦æ¯ç¾é¼ä¸¶äºé¼ä¹ä¹©äºèå­å¬åä»ååå£å¥å®é¥èµååµå¦å®å¾èµå¦å£åååå­å³å¿åååå¡åè¯å½åååååç½äº»ä»ä»ä»ä»¨ä»¡ä»«ä»ä¼ä»³ä¼¢ä½¤ä»µä¼¥ä¼§ä¼ä¼«ä½ä½§æ¸ä½ä½"],["d940","è²®",62],["d980","è³­",32,"ä½ä½ä¼²ä¼½ä½¶ä½´ä¾ä¾ä¾ä¾ä½¾ä½»ä¾ªä½¼ä¾¬ä¾ä¿¦ä¿¨ä¿ªä¿ä¿ä¿£ä¿ä¿ä¿ä¿¸å©åä¿³å¬åå®å­ä¿¾ååå¥å¨å¾ååååå¬å»å¥å§å©åºååå­å¬å¦å®ååä»æ°½ä½ä½¥ä¿é¾ æ±ç±´å®å·½é»é¦åå¤å¹åè¨åå«å¤åäº åäº³è¡®è¢¤äºµèè£ç¦å¬´è ç¾¸å«å±å½å¼"],["da40","è´",14,"è´ èµèµèµèµèµ¥èµ¨èµ©èµªèµ¬èµ®èµ¯èµ±èµ²èµ¸",8,"è¶è¶è¶è¶è¶è¶è¶",4,"è¶è¶è¶",9,"è¶ è¶¡"],["da80","è¶¢è¶¤",12,"è¶²è¶¶è¶·è¶¹è¶»è¶½è·è·è·è·è·è·è·è·è·è·è·è·è·ååå¢å¥è® è®¦è®§è®ªè®´è®µè®·è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯è¯ è¯¤è¯¨è¯©è¯®è¯°è¯³è¯¶è¯¹è¯¼è¯¿è°è°è°è°è°è°è°è°è°è°è°è°è°è°è°è°è° è°¡è°¥è°§è°ªè°«è°®è°¯è°²è°³è°µè°¶å©åºéé¢é¡é±éªé½é¼ééééé§é¬é²é´éééé°ééééé¬é¡é´é³é¶éº"],["db40","è·è·è·è·è· è·¡è·¢è·¥è·¦è·§è·©è·­è·®è·°è·±è·²è·´è·¶è·¼è·¾",6,"è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸è¸",7,"è¸ è¸¡è¸¤",4,"è¸«è¸­è¸°è¸²è¸³è¸´è¸¶è¸·è¸¸è¸»è¸¼è¸¾"],["db80","è¸¿è¹è¹è¹è¹",4,"è¹",5,"è¹",11,"è¹§è¹¨è¹ªè¹«è¹®è¹±é¸é°ééé¾ééééé¦é¢éééé«é¯é¾éé¢éé£é±é¯é¹ééåå¥å¢å¬å­å¾å¿ååå°åç®çå»´åµå¼é¬¯å¶å¼çå·¯åå©å¡å¡¾å¢¼å£å£å©å¬åªå³å¹å®å¯åå»åå©åå«åå¼å»å¨å­å¶å³å­å¤åå²åå§å´åå åååååå¸å´å¯å¸å¤å"],["dc40","è¹³è¹µè¹·",4,"è¹½è¹¾èºèºèºèºèºèº",6,"èºèºèºèº",6,"èºèº",11,"èº­èº®èº°èº±èº³",6,"èº»",7],["dc80","è»",10,"è»",21,"å å å½å­å å å å¡å  å¡¥å¡¬å¢å¢å¢å¢é¦¨é¼æ¿è¹è½è¿èèè¨èèèèèè«è¸è¾è°èèè£èè·è®èèèè©è´è¡èªèèèè¤è¡èè·è¤èèèè´èèèè»èèèèèèè èèèèèèèè¼è´è±èèè¯èèèèèèè è­èºè³è¦è¥"],["dd40","è»¥",62],["dd80","è¼¤",32,"è¨èè©è¬èªè­è®è°è¸è³è´è èªèèèè¼è¶è©è½è¸è»èèè¨èºè¼èèè¥èå èèèè½èèè¸èèèèèèè¸è¹èªèèè¦è°è¡èèèèè³èèèºèè¸è¼èè©è¶èèè±è­èèèè¦è½èèè¿èºè è¡è¹è´èè¥è£èçè¸è°è¹èèº"],["de40","è½",32,"è½ªè¾è¾è¾è¾è¾ è¾¡è¾¢è¾¤è¾¥è¾¦è¾§è¾ªè¾¬è¾­è¾®è¾¯è¾²è¾³è¾´è¾µè¾·è¾¸è¾ºè¾»è¾¼è¾¿è¿è¿è¿"],["de80","è¿",4,"è¿è¿è¿è¿è¿è¿ è¿¡è¿£è¿§è¿¬è¿¯è¿±è¿²è¿´è¿µè¿¶è¿ºè¿»è¿¼è¿¾è¿¿éééééééèè»è¿è¼èèè¨è¤èèºç¢èè²è»è¤è¨èèè¹è®èèè¹è·è°èèèè¿è§èè©èè¼å»¾å¼å¤¼å¥è·å¥å¥å¥åå°¢å°¥å°¬å°´ææªææ»ææææ®æ¢æ¶æ¹æææ­æ¶æ±æºææ´æ­æ¬ææ©æ®æ¼æ²æ¸æ æ¿ææææææ¾æææææ ææ¦æ¡æææ­æ"],["df40","ééé£é¤é¥é§",5,"é°",4,"é·é¹éºé½é¿ééééé",4,"ééééééé",5,"é¤é¦é§é©éªé«é¬é¯",4,"é¶",6,"é¾é"],["df80","ééééééé",4,"ééééééééé é¤é¥é§é¨é©é«é­é²é·é¼é½é¿éæºæ·æ¸ææºææææ¤æ¢ææ¥æ®å¼å¿çå¼åå±å½å©å¨å»åååååååååå¡ååå£å²ååå·å±å¤åååå¶å¦ååå­åå´åå§å¦ååå²å£åå»å¿ååååå©åªå¤ååååå§å å½åå³å¢å£ååå§åªå§ååµåå­ååå¿åå¼"],["e040","éééééééééééééééééé é£é¤é¥é©éªé¬é®é°é±é²é³éµé¶é·é¹éºé»é¼é¿éééé",19,"ééé"],["e080","ééé é¡é¤",10,"é°é²",6,"éº",8,"éå·ååµå¶å·å³å°ååååå±å¹åååå¾ååå»åå½å¾åååªå·åååå«å¬åå¦ååå¯å¥å²å³ååå¨åµå¤è¾ååååå¤å£å¾åå§å­åå¹åå¬åå¢åååååå¤å±å«å»å¼ååå¯åååå¡åµå«å¹å¿ååååå¸å¸å¸å¸å¸±å¸»å¸¼"],["e140","éééééééééééééé é¦é§é¨é«é­é³éºé»é¼é",4,"éééééé",6,"é",5,"é¤",5,"é«é¬é°é±é²é³é¶é·é¸é¹é»"],["e180","é¼",10,"éééé",9,"é",8,"å¸·å¹å¹å¹å¹å¹¡å²å±ºå²å²å²å²å²å²å²å²å²å²µå²¢å²½å²¬å²«å²±å²£å³å²·å³å³å³¤å³å³¥å´å´å´§å´¦å´®å´¤å´å´å´åµå´¾å´´å´½åµ¬åµåµ¯åµåµ«åµåµåµ©åµ´å¶å¶å¶è±³å¶·å·å½³å½·å¾å¾å¾å¾å¾å¾å¾å¾¨å¾­å¾µå¾¼è¡¢å½¡ç­ç°ç´ç·ç¸çççççç¨ç¯ç©ç²ç´ç·çç³ççº"],["e240","é¦",62],["e280","é¥",32,"ç»ççç¡ççççç¢ç¹ç¥ç¬ç¸ç±çççç ç¬ç¯ç¾èå¤¥é£§å¤¤å¤é¥£é¥§",5,"é¥´é¥·é¥½é¦é¦é¦é¦é¦é¦é¦é¦é¦é¦åºåºåºåºåº¥åº åº¹åºµåº¾åº³èµå»å»å»å»¨å»ªèºå¿å¿å¿å¿æå¿®æå¿¡å¿¤å¿¾ææå¿ªå¿­å¿¸ææµæ¦ææææ©æ«ææ¿æ¡æ¸æ¹æ»æºæ"],["e340","é",45,"éµ",16],["e380","é",7,"é",24,"æªæ½æææ­ææææææ¬æ»æ±æææææ´æ æ¦ææ£æ´æææ«ææµæ¬ææ§æ·ææµå¿é³é©é«é±é³éµé¶é¼é¾éééééééééééééééä¸¬ç¿ææ°µæ±æ±æ±æ²£æ²æ²æ²æ²æ±¨æ±©æ±´æ±¶æ²æ²©æ³æ³æ²­æ³·æ³¸æ³±æ³æ²²æ³ æ³æ³ºæ³«æ³®æ²±æ³æ³¯æ³¾"],["e440","é¨",5,"é¯",24,"é",31],["e480","é©",32,"æ´¹æ´§æ´æµæµæ´æ´æ´æ´æ´«æµæ´®æ´µæ´æµæµæµæ´³æ¶æµ¯æ¶æ¶ æµæ¶æ¶æµæµ æµ¼æµ£æ¸æ·æ·æ·æ¸æ¶¿æ· æ¸æ·¦æ·æ·æ¸æ¶«æ¸æ¶®æ¸«æ¹®æ¹æ¹«æº²æ¹æºæ¹æ¹æ¸²æ¸¥æ¹æ»æº±æºæ» æ¼­æ»¢æº¥æº§æº½æº»æº·æ»æº´æ»æºæ»æºæ½¢æ½æ½æ¼¤æ¼æ»¹æ¼¯æ¼¶æ½æ½´æ¼ªæ¼æ¼©æ¾æ¾æ¾æ½¸æ½²æ½¼æ½ºæ¿"],["e540","é",51,"é¿",10],["e580","é",31,"é«æ¿æ¾§æ¾¹æ¾¶æ¿æ¿¡æ¿®æ¿æ¿ æ¿¯çç£çç¹çµççå®å®å®å®å®¥å®¸ç¯éªæ´å¯¤å¯®è¤°å¯°è¹è¬è¾¶è¿è¿è¿¥è¿®è¿¤è¿©è¿¦è¿³è¿¨éééé¦éééé¡éµé¶é­é¯ééééé¨éé¢éæ¹é´é½ééééå½å½å½å½å°»å«å±å±å­±å±£å±¦ç¾¼å¼ªå¼©å¼­è´å¼¼é¬»å±®å¦å¦å¦å¦©å¦ªå¦£"],["e640","é¬",34,"é",27],["e680","é¬",29,"éééå¦å§å¦«å¦å¦¤å§å¦²å¦¯å§å¦¾å¨å¨å§å¨å§£å§å§¹å¨å¨å¨²å¨´å¨å¨£å¨å©å©§å©å©å¨¼å©¢å©µè¬åªªåªå©·å©ºåª¾å««åª²å«å«åª¸å« å«£å«±å«å«¦å«å«å¬å¬å¬å¬²å¬·å­å°å°å­å­¥å­³å­å­å­¢é©µé©·é©¸é©ºé©¿é©½éªéªéªéªéªéªéªéªéªéªéªéªéªéªéª éª¢éª£éª¥éª§çºçº¡çº£çº¥çº¨çº©"],["e740","é",7,"é",54],["e780","é",32,"çº­çº°çº¾ç»ç»ç»ç»ç»ç»ç»ç»ç»ç»ç» ç»¡ç»¨ç»«ç»®ç»¯ç»±ç»²ç¼ç»¶ç»ºç»»ç»¾ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼ç¼¡",6,"ç¼ªç¼«ç¼¬ç¼­ç¼¯",4,"ç¼µå¹ºç¿å·ç¾éççç®ç¢ççççç·ç³çççç¥çé¡¼çç©ç§ççºç²ççªçç¦ç¥ç¨ç°ç®ç¬"],["e840","é¯",14,"é¿",43,"é¬é­é®é¯"],["e880","é°",20,"ééééééééé¦é»éé çççççççç·ç­ç¾çççççççç¨ç©çç§ççºéªé«é¬æææææ©æ¥ææªæ³ææ§æµæ¨ææ­ææ·æ¼æ°æ ææ æ©æ°æ ææµææ³ææ ææ¸æ¢æ ææ½æ ²æ ³æ¡ æ¡¡æ¡æ¡¢æ¡æ¡¤æ¢æ æ¡æ¡¦æ¡æ¡§æ¡æ ¾æ¡æ¡æ ©æ¢µæ¢æ¡´æ¡·æ¢æ¡«æ£æ¥®æ£¼æ¤æ¤ æ£¹"],["e940","é§é³é½éééééé é®é´éµé·",7,"é",42],["e980","é«",32,"æ¤¤æ£°æ¤æ¤æ¥æ££æ¤æ¥±æ¤¹æ¥ æ¥æ¥æ¦æ¥«æ¦æ¦æ¥¸æ¤´æ§æ¦æ¦æ§æ¦æ¥¦æ¥£æ¥¹æ¦æ¦§æ¦»æ¦«æ¦­æ§æ¦±æ§æ§æ§æ¦æ§ æ¦æ§¿æ¨¯æ§­æ¨æ¨æ©¥æ§²æ©æ¨¾æª æ©æ©æ¨µæªæ©¹æ¨½æ¨¨æ©æ©¼æªæªæª©æªæª«ç·çæ®æ®æ®æ®æ®æ®æ®æ®æ®æ®¡æ®ªè½«è½­è½±è½²è½³è½µè½¶è½¸è½·è½¹è½ºè½¼è½¾è¾è¾è¾è¾è¾"],["ea40","é",27,"é¬é¿éééééé é£",6,"é«é¬é­é¯é°é·é¸é¹éºé¾éééééééééé"],["ea80","ééééééé é£é¥é¦é«é­",4,"é³é¸",12,"éééè¾è¾è¾è¾è¾è»æææææ¢æ¡æ¥æ¤æ¬è§ç¯ç´ç¿çççæ´æ®æ¯æ°æææ²æææçæ·ææ´æ±æ¶æµèææææææ¡ææ·æææ§ææ¾æææ¦æ©è´²è´³è´¶è´»è´½èµèµèµèµèµèµèµèµèµè§è§è§è§è§è§è§è§ç®ççç¦ç¯ç¾ç¿çççççææ²æ°"],["eb40","éééééééééé",9,"é¨",7,"é±é²é´éµé·é¸éºé»é¿éééééééééé",9,"é¡",6,"é«"],["eb80","é¬é­é®é°é±é²é´éµé¸éºé»é¼é½é¿éééééééééééé",4,"ééé æ¿æèæ¯ªæ¯³æ¯½æ¯µæ¯¹æ°æ°æ°æ°æ°æ°æ°æ°æ°¡æ°©æ°¤æ°ªæ°²æµææ«çççç°è¢åèèèè¼æè½è±è«è­è´è·è§è¨è©èªèèèèèèæèè«è±è´è­èèè²è¼æèè±è¶èè¬èè²èèèè´èèè±è è©è¼è½è­è§å¡åªµèèèæ»è£èªèæ¦èè»"],["ec40","é¡",8,"é«é¬é®é¯é±é³",4,"éºé»é¼é½é¿",18,"ééééééééé£é¤é¦é§é¨éª",7],["ec80","é²éµé·",4,"é½",7,"é",4,"ééééééééé",4,"èè¦æ¬¤æ¬·æ¬¹æ­æ­æ­é£é£é£é£é£é£æ®³å½æ¯è§³æé½ææ¼æææææææççççç»çç·ç«ç±ç¨ççççç¯ç±ç³çç¨çç²çç¸çºçç³çµç¨ç ç çç§ç¹çç¨ç¬çç¦ç¹æ¾æ½æææç¤»ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥¢ç¥ç¥ ç¥¯ç¥§ç¥ºç¦ç¦ç¦ç¦§ç¦³å¿å¿"],["ed40","ééé¡é¢é¤",6,"é¬é®é°é±é³éµ",46],["ed80","é¤é¥é¨é®",4,"é´é·",23,"æ¼æææ§æææ£æ«ææææ©ææææèè¿æ²æ³¶æ·¼ç¶ç¸ç ç ç ç ç æ«ç ­ç ç ç ¹ç ºç »ç ç ¼ç ¥ç ¬ç £ç ©ç¡ç¡­ç¡ç¡ç ¦ç¡ç¡ç¡ç¡ªç¢ç¢ç¢ç¢ç¢ç¢¡ç¢£ç¢²ç¢¹ç¢¥ç£ç£ç£ç£¬ç£²ç¤ç£´ç¤ç¤¤ç¤ç¤´é¾é»¹é»»é»¼ç±ççç¹çççç¢çç­ç¦çµç¸çççççç¨"],["ee40","é ",62],["ee80","é¡",32,"ç¢ç¥ç¿çç½ççççç ç°çµç½çºçççççç²ç¹çç½ç½¡ç½è©ç½¨ç½´ç½±ç½¹ç¾ç½¾çç¥è ²éééééééééééééééé£é¤é«éªé­é¬é¯é°é²é´é¶",4,"é¼é½é¿éé",6,"éééééééééééé é¢é¤é¥é§é¨éª"],["ef40","é¡¯",5,"é¢é¢é¢é¢é¢é¢£é¢¨",37,"é£é£é£é£é£é£é£é£é£ ",4],["ef80","é£¥é£¦é£©",30,"é©é«é®é¯é³é´éµé·é¹é¼é½é¿éééééééééé",4,"éééééé¢éªé«é©é¬é±é²é´é¶é·é¸é¼é¾é¿ééµééééééééééééééééééé¡é¢é¤",8,"é¯é±é²é³éºç§ç¬éç§ç§­ç§£ç§«ç¨åµç¨ç¨ç¨ç¨"],["f040","é¤",4,"é¤é¤é¤",28,"é¤¯",26],["f080","é¥",9,"é¥",12,"é¥¤é¥¦é¥³é¥¸é¥¹é¥»é¥¾é¦é¦é¦ç¨¹ç¨·ç©é»é¦¥ç©°ççççç¤çç ç¬é¸ é¸¢é¸¨",4,"é¸²é¸±é¸¶é¸¸é¸·é¸¹é¸ºé¸¾é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹£é¹¦",6,"é¹±é¹­é¹³çççç çç¬ç£ç³ç´ç¸çç±ç°ççççç£ç¨ç¦ç¤ç«ç§çç±ç¼ç¿ççççççç¥ççç"],["f140","é¦é¦é¦",10,"é¦¦é¦§é¦©",47],["f180","é§",32,"çç¼ç¢ç çç­ç°ç¿çµçç¾ç³çççççç«ç¯ç¿ç«¦ç©¸ç©¹çªçªçªçªçª¦çª çª¬çª¨çª­çª³è¡¤è¡©è¡²è¡½è¡¿è¢è¢¢è£è¢·è¢¼è£è£¢è£è££è£¥è£±è¤è£¼è£¨è£¾è£°è¤¡è¤è¤è¤è¤è¤´è¤«è¤¶è¥è¥¦è¥»çè¥ç²ç´çèèèèè è¢è¥è¦è§è©è¨è±èèµèèèèè©è±è¦é¡¸é¢é¢"],["f240","é§º",62],["f280","é¨¹",32,"é¢é¢é¢é¢é¢é¢é¢é¢é¢é¢¡é¢¢é¢¥é¢¦èèè¬è®è¿èºè¼è»è¨èèè¬èè§è£èªèè©è¶èèµèè°èºè±è¯èèè´è©è±è²è­è³èèèè´èèèèèè¸èèèèè£è»èè¥è®èè¾èè´è±è©è·è¿èè¢è½è¾è»è è°èè®èèè£è¼è¤èè¥èè¯è¨è"],["f340","é©",17,"é©²éªéªéªéªéªéªéªéª¦éª©",6,"éª²éª³éª´éªµéª¹éª»éª½éª¾éª¿é«é«é«",4,"é«é«é«é«é«é«é«é«é«é«é«é«é«"],["f380","é«é«é« é«¢é«£é«¤é«¥é«§é«¨é«©é«ªé«¬é«®é«°",8,"é«ºé«¼",6,"é¬é¬é¬èèèè­èèè«è¥è¬èµè³èèè½èèèèèªè è®è è è¾è è è ¡è ¹è ¼ç¼¶ç½ç½ç½èç«ºç«½ç¬ç¬ç¬ç¬ç¬ç¬«ç¬ç­ç¬¸ç¬ªç¬ç¬®ç¬±ç¬ ç¬¥ç¬¤ç¬³ç¬¾ç¬ç­ç­ç­ç­µç­ç­ç­ ç­®ç­»ç­¢ç­²ç­±ç®ç®¦ç®§ç®¸ç®¬ç®ç®¨ç®ç®ªç®ç®¢ç®«ç®´ç¯ç¯ç¯ç¯ç¯ç¯¥ç¯¦ç¯ªç°ç¯¾ç¯¼ç°ç°ç°"],["f440","é¬é¬",5,"é¬é¬é¬é¬",10,"é¬ é¬¡é¬¢é¬¤",10,"é¬°é¬±é¬³",7,"é¬½é¬¾é¬¿é­é­é­é­é­é­é­é­é­é­",5],["f480","é­",32,"ç°ç°ªç°¦ç°¸ç±ç±è¾èèèè¬è¡è¡è¢è£è­è¯è¨è«è¸è»è³è´è¾èèèèèèè¨è¡¾è¢è¢è£è£è¥ç¾ç¾ç¾§ç¾¯ç¾°ç¾²ç±¼æç²ç²ç²ç²ç²¢ç²²ç²¼ç²½ç³ç³ç³ç³ç³ç³ç³ç³¨è®æ¨ç¾¿ç¿ç¿ç¿¥ç¿¡ç¿¦ç¿©ç¿®ç¿³ç³¸çµ·ç¶¦ç¶®ç¹çºéº¸éº´èµ³è¶è¶è¶è¶±èµ§èµ­è±è±ééééé¤"],["f540","é­¼",62],["f580","é®»",32,"é¢é¡é°é©é¯é½é¾é²é´é¹éééééé¢é£éªé­é®é¯éµé´éºè±é¹¾è¶¸è·«è¸è¹è¹©è¶µè¶¿è¶¼è¶ºè·è·è·è·è·è·è·è·è·è·¬è··è·¸è·£è·¹è·»è·¤è¸è·½è¸è¸è¸è¸¬è¸®è¸£è¸¯è¸ºè¹è¸¹è¸µè¸½è¸±è¹è¹è¹è¹è¹è¹è¹°è¹¶è¹¼è¹¯è¹´èºèºèºèºèºèºè±¸è²è²è²è²è²æè§è§è§è§"],["f640","é¯",62],["f680","é°",32,"è§¥è§«è§¯è¨¾è¬¦éé©é³é¯ééééééªé­é°é¾é¾é¾é¾",5,"é¾é»¾é¼é¼é¹é¼é½ééç¿é éé®éé¾éªééé¾é«é±¿é²é²é²é²é²ç¨£é²é²é²é²é²é²é²é²é²é²",5,"é²¥",4,"é²«é²­é²®é²°",7,"é²ºé²»é²¼é²½é³é³é³é³é³é³"],["f740","é°¼",62],["f780","é±»é±½é±¾é²é²é²é²é²é²é²é²é²é²é²é²é²é²ªé²¬é²¯é²¹é²¾",4,"é³é³é³é³é³é³é³ é³¡é³",4,"é³é³é³é³é³é³é³é³é³é³¢é¼ééééé¯é«é£é²é´éª±éª°éª·é¹éª¶éªºéª¼é«é«é«é«é«é«é«é­é­é­é­é­é­é­é£¨é¤é¤®é¥é¥é«é«¡é«¦é«¯é««é«»é«­é«¹é¬é¬é¬é¬é¬£éº½éº¾ç¸»éºéºéºéºéºééºéºé»é»é»é» é»é»¢é»©é»§é»¥é»ªé»¯é¼¢é¼¬é¼¯é¼¹é¼·é¼½é¼¾é½"],["f840","é³£",62],["f880","é´¢",32],["f940","éµ",62],["f980","é¶",32],["fa40","é¶£",62],["fa80","é·¢",32],["fb40","é¸",27,"é¸¤é¸§é¸®é¸°é¸´é¸»é¸¼é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹é¹ é¹¡é¹¢é¹¥é¹®é¹¯é¹²é¹´",9,"éº"],["fb80","éºéºéºéºéºéºéºéº",5,"éº",8,"éºéº ",5,"éº§éº¨éº©éºª"],["fc40","éº«",8,"éºµéº¶éº·éº¹éººéº¼éº¿",4,"é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»é»¡é»£é»¤é»¦é»¨é»«é»¬é»­é»®é»°",8,"é»ºé»½é»¿",6],["fc80","é¼",4,"é¼é¼é¼é¼é¼é¼é¼é¼é¼",5,"é¼¡é¼£",8,"é¼­é¼®é¼°é¼±"],["fd40","é¼²",4,"é¼¸é¼ºé¼¼é¼¿",4,"é½",10,"é½",38],["fd80","é½¹",5,"é¾é¾é¾",11,"é¾é¾é¾é¾¡",4,"ï¤¬ï¥¹ï¦ï§§ï§±"],["fe40","ï¨ï¨ï¨ï¨ï¨ï¨ï¨ï¨ï¨ï¨ ï¨¡ï¨£ï¨¤ï¨§ï¨¨ï¨©"]]},function(e,t){e.exports=require("stream")},function(e,t,i){e.exports={addDays:i(8),addHours:i(33),addISOYears:i(34),addMilliseconds:i(9),addMinutes:i(36),addMonths:i(16),addQuarters:i(37),addSeconds:i(38),addWeeks:i(22),addYears:i(39),areRangesOverlapping:i(71),closestIndexTo:i(72),closestTo:i(73),compareAsc:i(11),compareDesc:i(23),differenceInCalendarDays:i(15),differenceInCalendarISOWeeks:i(74),differenceInCalendarISOYears:i(40),differenceInCalendarMonths:i(41),differenceInCalendarQuarters:i(75),differenceInCalendarWeeks:i(76),differenceInCalendarYears:i(43),differenceInDays:i(44),differenceInHours:i(77),differenceInISOYears:i(78),differenceInMilliseconds:i(17),differenceInMinutes:i(79),differenceInMonths:i(24),differenceInQuarters:i(80),differenceInSeconds:i(25),differenceInWeeks:i(81),differenceInYears:i(82),distanceInWords:i(46),distanceInWordsStrict:i(86),distanceInWordsToNow:i(87),eachDay:i(88),endOfDay:i(26),endOfHour:i(89),endOfISOWeek:i(90),endOfISOYear:i(91),endOfMinute:i(92),endOfMonth:i(48),endOfQuarter:i(93),endOfSecond:i(94),endOfToday:i(95),endOfTomorrow:i(96),endOfWeek:i(47),endOfYear:i(97),endOfYesterday:i(98),format:i(99),getDate:i(100),getDay:i(101),getDayOfYear:i(49),getDaysInMonth:i(21),getDaysInYear:i(102),getHours:i(103),getISODay:i(53),getISOWeek:i(27),getISOWeeksInYear:i(104),getISOYear:i(4),getMilliseconds:i(105),getMinutes:i(106),getMonth:i(107),getOverlappingDaysInRanges:i(108),getQuarter:i(42),getSeconds:i(109),getTime:i(110),getYear:i(111),isAfter:i(112),isBefore:i(113),isDate:i(20),isEqual:i(114),isFirstDayOfMonth:i(115),isFriday:i(116),isFuture:i(117),isLastDayOfMonth:i(118),isLeapYear:i(52),isMonday:i(119),isPast:i(120),isSameDay:i(121),isSameHour:i(54),isSameISOWeek:i(56),isSameISOYear:i(57),isSameMinute:i(58),isSameMonth:i(60),isSameQuarter:i(61),isSameSecond:i(63),isSameWeek:i(28),isSameYear:i(65),isSaturday:i(122),isSunday:i(123),isThisHour:i(124),isThisISOWeek:i(125),isThisISOYear:i(126),isThisMinute:i(127),isThisMonth:i(128),isThisQuarter:i(129),isThisSecond:i(130),isThisWeek:i(131),isThisYear:i(132),isThursday:i(133),isToday:i(134),isTomorrow:i(135),isTuesday:i(136),isValid:i(51),isWednesday:i(137),isWeekend:i(138),isWithinRange:i(139),isYesterday:i(140),lastDayOfISOWeek:i(141),lastDayOfISOYear:i(142),lastDayOfMonth:i(143),lastDayOfQuarter:i(144),lastDayOfWeek:i(66),lastDayOfYear:i(145),max:i(146),min:i(147),parse:i(2),setDate:i(148),setDay:i(149),setDayOfYear:i(150),setHours:i(151),setISODay:i(152),setISOWeek:i(153),setISOYear:i(35),setMilliseconds:i(154),setMinutes:i(155),setMonth:i(67),setQuarter:i(156),setSeconds:i(157),setYear:i(158),startOfDay:i(6),startOfHour:i(55),startOfISOWeek:i(5),startOfISOYear:i(10),startOfMinute:i(59),startOfMonth:i(159),startOfQuarter:i(62),startOfSecond:i(64),startOfToday:i(160),startOfTomorrow:i(161),startOfWeek:i(14),startOfYear:i(50),startOfYesterday:i(162),subDays:i(163),subHours:i(164),subISOYears:i(45),subMilliseconds:i(165),subMinutes:i(166),subMonths:i(167),subQuarters:i(168),subSeconds:i(169),subWeeks:i(170),subYears:i(171)}},function(e,t){e.exports=require("crypto")},function(e,t,i){var o=i(9),s=36e5;e.exports=function(e,t){var i=Number(t);return o(e,i*s)}},function(e,t,i){var o=i(4),s=i(35);e.exports=function(e,t){var i=Number(t);return s(e,o(e)+i)}},function(e,t,i){var o=i(2),s=i(10),r=i(15);e.exports=function(e,t){var i=o(e),n=Number(t),a=r(i,s(i)),c=new Date(0);return c.setFullYear(n,0,4),c.setHours(0,0,0,0),(i=s(c)).setDate(i.getDate()+a),i}},function(e,t,i){var o=i(9),s=6e4;e.exports=function(e,t){var i=Number(t);return o(e,i*s)}},function(e,t,i){var o=i(16);e.exports=function(e,t){var i=Number(t);return o(e,3*i)}},function(e,t,i){var o=i(9);e.exports=function(e,t){var i=Number(t);return o(e,1e3*i)}},function(e,t,i){var o=i(16);e.exports=function(e,t){var i=Number(t);return o(e,12*i)}},function(e,t,i){var o=i(4);e.exports=function(e,t){return o(e)-o(t)}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return 12*(i.getFullYear()-s.getFullYear())+(i.getMonth()-s.getMonth())}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return Math.floor(t.getMonth()/3)+1}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return i.getFullYear()-s.getFullYear()}},function(e,t,i){var o=i(2),s=i(15),r=i(11);e.exports=function(e,t){var i=o(e),n=o(t),a=r(i,n),c=Math.abs(s(i,n));return i.setDate(i.getDate()-a*c),a*(c-(r(i,n)===-a))}},function(e,t,i){var o=i(34);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(23),s=i(2),r=i(25),n=i(24),a=i(13),c=1440,l=2520,h=43200,d=86400;e.exports=function(e,t,i){var m=i||{},u=o(e,t),g=m.locale,p=a.distanceInWords.localize;g&&g.distanceInWords&&g.distanceInWords.localize&&(p=g.distanceInWords.localize);var f,v,_={addSuffix:Boolean(m.addSuffix),comparison:u};u>0?(f=s(e),v=s(t)):(f=s(t),v=s(e));var w,b=r(v,f),C=v.getTimezoneOffset()-f.getTimezoneOffset(),y=Math.round(b/60)-C;if(y<2)return m.includeSeconds?b<5?p("lessThanXSeconds",5,_):b<10?p("lessThanXSeconds",10,_):b<20?p("lessThanXSeconds",20,_):b<40?p("halfAMinute",null,_):p(b<60?"lessThanXMinutes":"xMinutes",1,_):0===y?p("lessThanXMinutes",1,_):p("xMinutes",y,_);if(y<45)return p("xMinutes",y,_);if(y<90)return p("aboutXHours",1,_);if(y<c)return p("aboutXHours",Math.round(y/60),_);if(y<l)return p("xDays",1,_);if(y<h)return p("xDays",Math.round(y/c),_);if(y<d)return p("aboutXMonths",w=Math.round(y/h),_);if((w=n(v,f))<12)return p("xMonths",Math.round(y/h),_);var k=w%12,S=Math.floor(w/12);return k<3?p("aboutXYears",S,_):k<9?p("overXYears",S,_):p("almostXYears",S+1,_)}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=t&&Number(t.weekStartsOn)||0,s=o(e),r=s.getDay(),n=6+(r<i?-7:0)-(r-i);return s.setDate(s.getDate()+n),s.setHours(23,59,59,999),s}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getMonth();return t.setFullYear(t.getFullYear(),i+1,0),t.setHours(23,59,59,999),t}},function(e,t,i){var o=i(2),s=i(50),r=i(15);e.exports=function(e){var t=o(e);return r(t,s(t))+1}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=new Date(0);return i.setFullYear(t.getFullYear(),0,1),i.setHours(0,0,0,0),i}},function(e,t,i){var o=i(20);e.exports=function(e){if(o(e))return!isNaN(e);throw new TypeError(toString.call(e)+" is not an instance of Date")}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e).getFullYear();return t%400==0||t%4==0&&t%100!=0}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e).getDay();return 0===t&&(t=7),t}},function(e,t,i){var o=i(55);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()===s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setMinutes(0,0,0),t}},function(e,t,i){var o=i(28);e.exports=function(e,t){return o(e,t,{weekStartsOn:1})}},function(e,t,i){var o=i(10);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()===s.getTime()}},function(e,t,i){var o=i(59);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()===s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setSeconds(0,0),t}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return i.getFullYear()===s.getFullYear()&&i.getMonth()===s.getMonth()}},function(e,t,i){var o=i(62);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()===s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getMonth(),s=i-i%3;return t.setMonth(s,1),t.setHours(0,0,0,0),t}},function(e,t,i){var o=i(64);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()===s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setMilliseconds(0),t}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return i.getFullYear()===s.getFullYear()}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=t&&Number(t.weekStartsOn)||0,s=o(e),r=s.getDay(),n=6+(r<i?-7:0)-(r-i);return s.setHours(0,0,0,0),s.setDate(s.getDate()+n),s}},function(e,t,i){var o=i(2),s=i(21);e.exports=function(e,t){var i=o(e),r=Number(t),n=i.getFullYear(),a=i.getDate(),c=new Date(0);c.setFullYear(n,r,15),c.setHours(0,0,0,0);var l=s(c);return i.setMonth(r,Math.min(a,l)),i}},function(e){e.exports=[["a140","î",62],["a180","î",32],["a240","î¦",62],["a280","î¥",32],["a2ab","î¦",5],["a2e3","â¬î­"],["a2ef","î®î¯"],["a2fd","î°î±"],["a340","î",62],["a380","î",31,"ã"],["a440","î¦",62],["a480","î¥",32],["a4f4","î²",10],["a540","î",62],["a580","î",32],["a5f7","î½",7],["a640","î¦",62],["a680","î¥",32],["a6b9","î",7],["a6d9","î",6],["a6ec","îî"],["a6f3","î"],["a6f6","î",8],["a740","î",62],["a780","î",32],["a7c2","î ",14],["a7f2","î¯",12],["a896","î¼",10],["a8bc","î"],["a8bf","Ç¹"],["a8c1","îîîî"],["a8ea","î",20],["a958","î¢"],["a95b","î£"],["a95d","î¤î¥î¦"],["a989","ã¾â¿°",11],["a997","î´",12],["a9f0","î ",14],["aaa1","î",93],["aba1","î",93],["aca1","î¼",93],["ada1","î",93],["aea1","î¸",93],["afa1","î",93],["d7fa","î ",4],["f8a1","î´",93],["f9a1","î",93],["faa1","î°",93],["fba1","î",93],["fca1","î¬",93],["fda1","î",93],["fe50","âºî î î âºã³ãâºâºî ãããâºâºã¥®ã¤î ¦ã§ã§ã©³ã§î «î ¬ã­ã±®ã³ âº§î ±î ²âºªääâº®ä·âº³âº¶âº·î »ä±ä¬âº»äää¡äî¡"],["fe80","ä£ä©ä¼äâ»ä¥ä¥ºä¥½ä¦ä¦ä¦ä¦ä¦ä¦ä¦·ä¦¶î¡î¡ä²£ä²ä² ä²¡ä±·ä²¢ä´",6,"ä¶®î¡¤î¨",93]]},function(e){e.exports=[["0","\0",127],["a140","ãï¼ããï¼â§ï¼ï¼ï¼ï¼ï¸°â¦â¥ï¹ï¹ï¹Â·ï¹ï¹ï¹ï¹ï½âï¸±âï¸³â´ï¸´ï¹ï¼ï¼ï¸µï¸¶ï½ï½ï¸·ï¸¸ããï¸¹ï¸ºããï¸»ï¸¼ããï¸½ï¸¾ããï¸¿ï¹ããï¹ï¹ããï¹ï¹ï¹ï¹"],["a1a1","ï¹ï¹ï¹ï¹ââââããâµâ²ï¼ï¼ï¼â»Â§ãâââ³â²ââââââ¡â â½â¼ã£âÂ¯ï¿£ï¼¿Ëï¹ï¹ï¹ï¹ï¹ï¹ï¹ï¹ ï¹¡ï¼ï¼ÃÃ·Â±âï¼ï¼ï¼â¦â§â âââ¡ï¹¢",4,"ï½â©âªâ¥â ââ¿ããâ«â®âµâ´âââââââââââââ¥â£ï¼"],["a240","ï¼¼âï¹¨ï¼ï¿¥ãï¿ ï¿¡ï¼ï¼ ââï¹©ï¹ªï¹«ãããããã¡ãããÂ°ååååå¡å£å§ç©ç³â",7,"ââââââââ¼â´â¬â¤ââââââââââ­"],["a2a1","â®â°â¯âââªâ¡â¢â£â¥â¤â±â²â³ï¼",9,"â ",9,"ã¡",8,"åååï¼¡",25,"ï½",21],["a340","ï½ï½ï½ï½Î",16,"Î£",6,"Î±",16,"Ï",6,"ã",10],["a3a1","ã",25,"ËËËËË"],["a3e1","â¬"],["a440","ä¸ä¹ä¸ä¸ä¹ä¹äºäºäººå¿å¥å«å åååååååä¸ä¸ä¸ä¸ä¸«ä¸¸å¡ä¹ä¹ä¹ä¹äºäº¡åååºååå£åå£«å¤å¤§å¥³å­å­å­å¯¸å°å°¢å°¸å±±å·å·¥å·±å·²å·³å·¾å¹²å»¾å¼å¼æ"],["a4a1","ä¸ä¸ä¸ä¸­ä¸°ä¸¹ä¹å°¹äºäºäºäºäºäº¢ä»ä»ä»ä»ä»ä»ä»ä»ä»ååå§å­å®å¬åå¶åååå»å¾å¿åå¹ååååååååå£¬å¤©å¤«å¤ªå¤­å­å°å°¤å°ºå±¯å·´å¹»å»¿å¼å¼å¿ææ¶æææ¯æææ¤æ¹æ¥æ°ææ¨æ¬ æ­¢æ­¹æ¯æ¯æ¯æ°æ°´ç«çªç¶ç»çççç¬çä¸"],["a540","ä¸ä¸ä¸ä¸ä¸»ä¹ä¹ä¹ä»¥ä»ä»ä»ä»ä»ä»£ä»¤ä»ä»ååååå¬å¹åºå¸åå åååååä»ååå¡å å¯å®å»å¯å¤å³å¬å®å©å¨å¼å¸åµå«å¦åªå²å±å°å¥å­å»ååå¤"],["a5a1","å¤®å¤±å¥´å¥¶å­å®å°¼å·¨å·§å·¦å¸å¸å¹³å¹¼å¼å¼å¼å¿ææææææ¥æ¦æ®æ¬æªæ«æ­æ­£æ¯æ°æ°æ°¸æ±æ±æ°¾ç¯çççç¦ççç¨ç©ç°ç±ç²ç³çç½ç®ç¿ç®çç¢ç³ç¤ºç¦¾ç©´ç«ä¸ä¸ä¹ä¹ä¹©äºäº¤äº¦äº¥ä»¿ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä»²ä»¶ä»»ä»°ä»³ä»½ä¼ä¼ååååå¨"],["a640","å±åå°åååååå£åå¡å å°å±åååååååååååååååå ååå³å°å¨å­å¬å¯å©å¤å¤å¤·å¤¸å¦å¥¸å¦å¥½å¥¹å¦å¦å­å­å®å®å®å®å¯ºå°å±¹å·å¸å¹¶å¹´"],["a6a1","å¼å¼å¿å¿æææææ£æææ¶æ©æ¨æ¬æ­æ²æ³ææ½æ´æ±æµæ¬¡æ­¤æ­»æ°æ±æ±æ±æ±æ± æ±æ±æ±¡æ±æ±æ±ç°ççç¾ç«¹ç±³ç³¸ç¼¶ç¾ç¾½èèèèè³è¿èèèè£èªè³è¼èèèè®è²è¾è«è¡è¡è¡£è¥¿é¡ä¸²äº¨ä½ä½ä½ä½ä½ä¼´ä½ä½ä¼°ä½ä½ä¼½ä¼ºä¼¸ä½ä½ä¼¼ä½ä½£"],["a740","ä½ä½ ä¼¯ä½ä¼¶ä½ä½ä½ä½ååååµå¶å·å¥å¤å©åªå¨å«å©åªå¬å£å³åµåå­åå¾å¦åå§ååå³åååå©åå¹å»å¸å®åµå¶å å¼åå±å«åå¬åªå°å¤å«åååå"],["a7a1","ååå¾ååå»å£¯å¤¾å¦å¦å¦¨å¦å¦£å¦å¦å¦å¦¤å¦å¦å¦¥å­å­å­å­å®å®å®å°¬å±å±å°¿å°¾å²å²å²å²å·«å¸åºåºåºå»·å¼å¼å½¤å½¢å½·å½¹å¿å¿å¿å¿å¿±å¿«å¿¸å¿ªæææææææ¶ææ­ææ¼æ¾æ¹æ³ææ¯ææ®æææææ¹æ»æ¸æ±æ´æææææææææææ "],["a840","æææ­¥æ¯æ±æ±æ²æ²æ²æ²æ²æ²æ±ªæ±ºæ²æ±°æ²æ±¨æ²æ²æ±½æ²æ±²æ±¾æ±´æ²æ±¶æ²æ²æ²æ²ç¶ç¼ç½ç¸ç¢ç¡ç çççç¬ç«ç·ç¸çç¯ç£ç§ç§ç¦¿ç©¶ç³»ç½èèèèèèè²è¯è"],["a8a1","èèè¦è§è¨è°·è±è±è²èµ¤èµ°è¶³èº«è»è¾è¾°è¿è¿è¿è¿å·¡éé¢éªé¦é£éééé²é®é±éªé¬ä¸¦ä¹ä¹³äºäºäºäº«äº¬ä½¯ä¾ä¾ä½³ä½¿ä½¬ä¾ä¾ä¾ä¾ä½°ä½µä¾ä½©ä½»ä¾ä½¾ä¾ä¾ä½ºåååå©å·å¶å¸å½å½å»å¸å·åºå°å®å¶åå¾å»ååååå¦å·å¸å¹åååå³åµ"],["a940","åå¸ååå»å·åååå¼åå±å¶ååå¢å¨åå½ååºåå·åªå©å¡å¦å¤å¼å¤å¥å¥å¥å¥å¥å¦¾å¦»å§å¦¹å¦®å§å§å§å§å§å§å§å¦¯å¦³å§å§å­å­¤å­£å®å®å®å®å®å®å°å±å±"],["a9a1","å±å²·å²¡å²¸å²©å²«å²±å²³å¸å¸å¸å¸å¸å¸å¹¸åºåºåºåºåºå»¶å¼¦å¼§å¼©å¾å¾å½¿å½¼å¿å¿ å¿½å¿µå¿¿æææ¯æµææªææ¡æ§æ©æ«ææææ¿æ¾ææ¿ææææ¿ææ¹æææ«æææææ¨æ½æ¼æææææµææ±æææææ¬ææ¾æ§æ¼æºææææææææææ"],["aa40","ææææ­æææ±ææ³æ·ææææ¯æ°æ¿ææ¾ææµæææ¼æªæ²æ¬£æ­¦æ­§æ­¿æ°æ°æ³£æ³¨æ³³æ²±æ³æ³¥æ²³æ²½æ²¾æ²¼æ³¢æ²«æ³æ³æ²¸æ³æ²¹æ³æ²®æ³æ³æ³±æ²¿æ²»æ³¡æ³æ³æ²¬æ³¯æ³æ³æ³ "],["aaa1","çççççç¬ç­ç¸çç§ç©çççççç©ç¨çç«ç¥ç½çççççç²ç´ç¥ç½ç¤¾ç¥ç¥ç§ç§ç©ºç©¹ç«ºç³¾ç½ç¾ç¾èèºè¥è¢è±è¡è«è©è´èªè¯è¥è¾èè³èèè­è½èè¹è±è¬è¥è¯è¸è£è°è¾è·èè±åè¡¨è»è¿è¿è¿éµé¸é±é¶ééé·éééé¿é»é"],["ab40","éé¹é¨ééäºäº­äº®ä¿¡ä¾µä¾¯ä¾¿ä¿ ä¿ä¿ä¿ä¿ä¾¶ä¿ä¿ä¿ä¿ä¾®ä¿ä¿ä¿ä¿ä¿ä¿ä¾·åååå åååååååååååååå»ååå¬åå¨ååå¸å¦å³ååå½åªå"],["aba1","ååå¯å«å±å»å©å§å¿å¿ååå å£å¢åå®åå¥å¥å¥å¥å¥å§å§å§¿å§£å§¨å¨å§¥å§ªå§å§¦å¨å§»å­©å®£å®¦å®¤å®¢å®¥å°å±å±å±å±å³å³å··å¸å¸¥å¸å¹½åº åº¦å»ºå¼å¼­å½¥å¾å¾å¾å¾å¾å¾å¾æææ æ¥ææ¨ææ°æ¨æ¢æææ¬æ«æªæ¤æææææ¼æ­ææ®æ½ææ±æ·"],["ac40","æ¯æ¬æ¾æ´æææ¿ææ«æ½æ¢æ¥æ­æ æ§æ¯ææ¨æ±æ¤æ·æ¿ææ±æææ¬æ¶æ¯æµæ©æ¯æææ´ææ¥æ¸æææ³æ°ææ¢æææ­ªæ®æ®æ®µæ¯æ¯æ°æ³æ´æ´²æ´ªæµæ´¥æ´æ´±æ´æ´"],["aca1","æ´»æ´½æ´¾æ´¶æ´æ³µæ´¹æ´§æ´¸æ´©æ´®æ´µæ´æ´«ç«çºç³ç¬ç¯ç­ç¸ç®ç¤ç°ç²ç¯ç´ç©ç ç¡ç·çç»ç²ççç³çç­ççççç«ç¤ç¥ç¢ç£ç¸ççççççççç¹ç¸ççç¾ç¼ççç ç ç ç ç¥ç¥ç¥ç¥ç¦¹ç¦ºç§ç§ç§ç©¿çªç«¿ç«½ç±½ç´ç´ç´ç´ç´ç´ç´ç¼¸ç¾ç¾¿è"],["ad40","èèèè¶èè¥èèèèè¡èèèè¤èè´è¢è§èèè£èè¦èè¥èèèèè±èèèèèèèè¯èèè¹è»èºè¡è¡«è¦è§è¨è¨è¨è²è² èµ´èµ³è¶´è»è»è¿°è¿¦è¿¢è¿ªè¿¥"],["ada1","è¿­è¿«è¿¤è¿¨ééééééééééééé¢é©éé­é³é é¢¨é£é£é¦é¦ä¹äº³ååå£ä¿¯å¦å¥ä¿¸å©ååå¼ååååä¿ºååå¨ä¿±å¡åååä¿³ä¿®å­åªä¿¾å«åå¼å¤å¥å¢ååååååååååªå¿åååå¨ååå·å¼å¥å²ååºåå©å­å¡åå®åª"],["ae40","å¦å§åå½åååååååå å¤å¥å¥å¥å¨å¨å¨å¨å¨å¨å§¬å¨ å¨£å¨©å¨¥å¨å¨å­«å±å®°å®³å®¶å®´å®®å®µå®¹å®¸å°å±å±å±å³­å³½å³»å³ªå³¨å³°å³¶å´å³´å·®å¸­å¸«åº«åº­åº§å¼±å¾å¾å¾æ"],["aea1","æ£æ¥æææ­æ©æ¯ææææææææææ³ææ¿ææ¾æ¯ææææææºææ½æªæ«æ¨ææææææææææææææææ¸ææææ ¡æ ¸æ¡æ¡æ¡æ ¹æ¡æ¡æ ©æ¢³æ æ¡æ¡æ ½æ´æ¡æ¡æ ¼æ¡æ ªæ¡æ æ æ¡æ®æ®æ®·æ°£æ°§æ°¨æ°¦æ°¤æ³°æµªæ¶æ¶æ¶æµ¦æµ¸æµ·æµæ¶"],["af40","æµ¬æ¶æµ®æµæµ´æµ©æ¶æ¶æµ¹æ¶æµ¥æ¶ççç¤çççç¹ç¹ç¼ç¹ç½ç¸ç·çç­çç®ç çªççççççç¾ççç²ç³ç½ç¼ç¹çç¸çç°çççç©çç ç¨ç©ç °ç §ç ¸ç ç ´ç ·"],["afa1","ç ¥ç ­ç  ç ç ²ç¥ç¥ç¥ ç¥ç¥ç¥ç¥ç¥ç¥ç§¤ç§£ç§§ç§ç§¦ç§©ç§çªçªç«ç¬ç¬ç²ç´¡ç´ç´ç´ç´ ç´¢ç´ç´ç´ç´ç´ç´ç´ç´ç¼ºç½ç¾ç¿ç¿èèèèèè½è¿è±èè°èè­è´èè¸è³èè½èè¼è¯è­è¬èèèªè«è¨è¬è»è«èèèè¸èèèµè´èè²è¹è¶èèè±è¨è"],["b040","èèèªèè¤è©èè£èè¡°è¡·è¢è¢è¡½è¡¹è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨è±è±ºè±¹è²¡è²¢èµ·èº¬è»è»è»è¾±ééè¿·éè¿ºè¿´éè¿½éè¿¸éé¡éé¢éééééééééé¢é£é¡"],["b0a1","ééé¤ééé»é£¢é¦¬éª¨é«é¬¥é¬²é¬¼ä¹¾åºå½ååååååå¥å¶åååµå´å·ååå¯å­ååå°åªå¯åååååååå¿åå¾åæ¼ååªå¦ååå¡ååå±åååå¯å¤å¸å®åå¬å£å³ååååååå å å å å¤åºå å µå·å¹å¤ å¥¢å¨¶å©å©å©¦å©ªå©"],["b140","å¨¼å©¢å©å©å©å­°å¯å¯å¯å¯å®¿å¯å°å°å°å± å±å±å´å´å´å´å´å´¢å´å´©å´å´å´¤å´§å´å·¢å¸¸å¸¶å¸³å¸·åº·åº¸åº¶åºµåº¾å¼µå¼·å½å½¬å½©å½«å¾å¾å¾å¾å¾¡å¾ å¾æ¿æ£ææ æ¨ææ´æ¦æ½"],["b1a1","ææ»æµææ¼æææææ¸ææææææ æ§æ²ææ¢æ¥æ·æ§ææªæ±æ©ææææ«æ¨ææææ¡æ¬ææææ»æ©æ¨æºæææææåæææææææ¬æææææææ¤æ¨æ¦ææ¹åææ¢æ¢¯æ¢¢æ¢æ¢µæ¡¿æ¡¶æ¢±æ¢§æ¢æ¢°æ¢æ£æ¢­æ¢æ¢æ¢æ¢æ¢¨æ¢æ¢¡æ¢æ¬²æ®º"],["b240","æ¯«æ¯¬æ°«æ¶æ¶¼æ·³æ·æ¶²æ·¡æ·æ·¤æ·»æ·ºæ¸æ·æ·æ¶¯æ·æ¶®æ·æ·¹æ¶¸æ··æ·µæ·æ·æ¸æ¶µæ·æ·«æ·æ·ªæ·±æ·®æ·¨æ·æ·æ¶ªæ·¬æ¶¿æ·¦ç¹ççç½ç¯ç½ç½çççççççççççç¾çç ç¶"],["b2a1","ç·çç¢ç¥ç¦ç¢ç°ççççµççççççç·ç¾ç¼ç¶ç¸çºç¡«ç¡ç¡ç¥¥ç¥¨ç¥­ç§»çªçªç¬ ç¬¨ç¬ç¬¬ç¬¦ç¬ç¬ç¬®ç²ç²ç²çµçµçµ±ç´®ç´¹ç´¼çµç´°ç´³çµç´¯çµç´²ç´±ç¼½ç¾ç¾ç¿ç¿ç¿èèèè¯èè£è«è©è°è¤èèµè·è¶è¹èèèè¸è¢èè½è«èèèèè è·è»è¼"],["b340","èè§èå½ªèèè¶èèµèèè±è¯èè¡è¢è¢è¢«è¢è¢è¢è¢è¦è¦è¨ªè¨è¨£è¨¥è¨±è¨­è¨è¨è¨¢è±è±è²©è²¬è²«è²¨è²ªè²§èµ§èµ¦è¶¾è¶ºè»è»ééééé£éééééé éé¢ééé"],["b3a1","é¨é­é½éééµé¦é£é§é­é©ééªéµé³é¸é°é´é¶é·é¬ééªé©ç« ç«é é é­é³¥é¹µé¹¿éº¥éº»å¢ååååååååæå±å²å´åµå©ååååå¥å»åå§å¼ååååååªååååå³å®åå¾å²åå»å¬å±å¾åå«ååå ¯å ªå ´å ¤å °å ±å ¡å å  å£¹å£ºå¥ "],["b440","å©·åªå©¿åªåªåª§å­³å­±å¯å¯å¯å¯å°å°å°±åµåµå´´åµå·½å¹å¸½å¹å¹å¹¾å»å»å»å»å¼¼å½­å¾©å¾ªå¾¨ææ¡æ²æ¶æ ææ£æºææ°æ»æ´æ¨æ±ææ¶ææææææ£ææææ©æææ"],["b4a1","ææ£ææ¡ææ­æ®æ¶æ´æªææææ¹ææ¦æ¢æ£æææ¯æ®æ°æ´æ¶æ¯ææºæ¾æ·æ¾æ¿æææ£ºæ£æ£ æ£æ£æ¤æ£æ£µæ£®æ£§æ£¹æ£æ£²æ££æ£æ£æ¤æ¤æ¤æ£æ£æ¥®æ£»æ¬¾æ¬ºæ¬½æ®æ®æ®¼æ¯¯æ°®æ°¯æ°¬æ¸¯æ¸¸æ¹æ¸¡æ¸²æ¹§æ¹æ¸ æ¸¥æ¸£æ¸æ¹æ¹æ¸¤æ¹æ¹®æ¸­æ¸¦æ¹¯æ¸´æ¹æ¸ºæ¸¬æ¹æ¸æ¸¾æ»"],["b540","æºæ¸æ¹æ¹£æ¹æ¹²æ¹©æ¹ççç¦ç°ç¡ç¶ç®ççççç¶ç¥ç´ç©çºçªç³ç¢ç¥çµç¶ç´ç¯çç¦ç¨ç¥ç¦ç«çªç¢çç£çççç ç»ç¼ççç´ççç­ç¡ç¡¬ç¡¯ç¨ç¨ç¨ç¨ç¨çª"],["b5a1","çªçªç«¥ç«£ç­ç­ç­ç­ç­ç­ç­ç­ç­ç­ç²ç²¥çµçµçµ¨çµç´«çµ®çµ²çµ¡çµ¦çµ¢çµ°çµ³åç¿ç¿èèèèèèèèè¹èè¾èèè´èèè©èè¸èè èèèè¯è±è´èèè°èèè½è²èè¸èèèèèèèèèè­èèè¤èèè¡è£è£è¢±è¦è¦è¨»è© è©è©è¨¼è©"],["b640","è©è©è©è©è¨´è¨ºè¨¶è©è±¡è²è²¯è²¼è²³è²½è³è²»è³è²´è²·è²¶è²¿è²¸è¶è¶è¶è·è·è·è·è·è·è·è·è»»è»¸è»¼è¾é®éµé±é¸é²é¶ééµéé¾é£é¥éééé£éééééééééé"],["b6a1","ééééééé½éééé²ééééééé¯é²éé é é é£§é£ªé£¯é£©é£²é£­é¦®é¦­é»é»é»äºå­åµå²å³åå¾å¬å·å»å¯åå¿å·å½åå¦å¤å¢å£å¯åå¨åå¦ååååå£å¤å¯åå¡ååå¥åååå¡å¡å¡å¡å¡å¡å¡«å¡å¡­å¡å¡¢å¡å¡å¥§å«å«å«åª¾åª½åª¼"],["b740","åª³å«åª²åµ©åµ¯å¹å¹¹å»å»å¼å½å¾¬å¾®æææææ³ææ¹æææææææ¾æ´æ§æææ·æ¡æ¢ææ¾ææªæ­æ½æ¬æææææ¶ææææ¬ææ°ææææææææææ¦æ¥­"],["b7a1","æ¥æ¥·æ¥ æ¥æ¥µæ¤°æ¦æ¥æ¥¨æ¥«æ¥æ¥æ¥¹æ¦æ¥æ¥£æ¥æ­æ­²æ¯æ®¿æ¯æ¯½æº¢æº¯æ»æº¶æ»æºæºæ»æ»æº¥æºæº¼æººæº«æ»æºæºæ»æ»æºªæº§æº´ççç©ç¤çç§çç¬ç¦çç¥ççç¨ççºçç·çç¿ç¾ç¯çççççç¿çççç¶ç¸çç°çç²ç±çºç¿ç´ç³çççç«ç¦çç£"],["b840","ç¹çªç¬çç¥ç¨ç¢ç®ç¢ç¢°ç¢ç¢ç¢ç¢ç¡¼ç¢ç¢ç¡¿ç¥ºç¥¿ç¦è¬ç¦½ç¨ç¨ç¨ ç¨ç¨ç¨çªçª ç­·ç¯ç­ ç­®ç­§ç²±ç²³ç²µç¶çµ¹ç¶ç¶ç¶çµç½®ç½©ç½ªç½²ç¾©ç¾¨ç¾¤èèèèè±è°è¸è¥è®è³è«"],["b8a1","è¹èºè¦èèèè·è½è±èµè¦è«èè¬èè¼èµè¡è£è©è­èèèèè¹èèèèè¾è»èèèèè¡è£è£è£è£è£è£è£¡è£è£è£è¦è§£è©«è©²è©³è©¦è©©è©°èªè©¼è©£èª è©±èªè©­è©¢è©®è©¬è©¹è©»è¨¾è©¨è±¢è²è²è³è³è³è³è²²è³è³è³è·¡è·è·¨è·¯è·³è·ºè·ªè·¤è·¦èº²è¼è¼è»¾è¼"],["b940","è¾è¾²éééééé¼éééééééé¾éééé¬éªé©éé·éé¸é½éé¾ééé¤éé´éééé¹é¿éééééééééé·é»é¹é¶éé´é¶é é é é é é é£¼é£´"],["b9a1","é£½é£¾é¦³é¦±é¦´é«¡é³©éºé¼é¼é¼ å§å®å¥åå­ååååå±åå©å¢å³ååå±å­å¾åååå½åååååå·ååååå¶ååå¡µå¡¾å¢å¢å¢å¡¹å¢å¡½å£½å¤¥å¤¢å¤¤å¥ªå¥©å«¡å«¦å«©å«å«å«å«£å­µå¯å¯§å¯¡å¯¥å¯¦å¯¨å¯¢å¯¤å¯å°å±¢å¶å¶å¹å¹£å¹å¹å¹å»å»å¼å½å½°å¾¹æ"],["ba40","æ¿ææ·æ¢æ£ææææµæªææææ¤æ¸ææºææ§æ´æ­æ»æ²æ¡æææ¢æ¨ææ¦æ¦¨æ¦æ§æ¦®æ§æ§æ¦æ¦·æ¦»æ¦«æ¦´æ§æ§æ¦­æ§æ¦¦æ§æ¦£æ­æ­æ°³æ¼³æ¼æ»¾æ¼æ»´æ¼©æ¼¾æ¼ æ¼¬æ¼æ¼æ¼¢"],["baa1","æ»¿æ»¯æ¼æ¼±æ¼¸æ¼²æ¼£æ¼æ¼«æ¼¯æ¾æ¼ªæ»¬æ¼æ»²æ»æ»·ççç½çççç¾ççççç¤ç£çªç°ç­ççç§ççççç¡ç£çç½ç¿ç¡ç£ç¢ç¢§ç¢³ç¢©ç¢£ç¦ç¦ç¦ç¨®ç¨±çªªçª©ç«­ç«¯ç®¡ç®ç®ç­µç®ç®ç®ç®ç®¸ç®ç®ç²¹ç²½ç²¾ç¶»ç¶°ç¶ç¶½ç¶¾ç¶ ç·ç¶´ç¶²ç¶±ç¶ºç¶¢ç¶¿ç¶µç¶¸ç¶­ç·ç·ç¶¬"],["bb40","ç½°ç¿ ç¿¡ç¿èèèèèèèèè¿èè§èºèèèèèè¿èèèèè²èèè¸èèèè¼èèè¿èè»è¢è¥è´èèè·è©è£³è¤è£´è£¹è£¸è£½è£¨è¤è£¯èª¦èªèªèª£èªèª¡èªèª¤"],["bba1","èªªèª¥èª¨èªèªèªèª§è±ªè²è²è³è³è³èµ«è¶è¶è·¼è¼è¼è¼è¼è¾£é ééé£ééé¢ééééééµé¸é·é´é¸ééééé»ééé¨é¼éé¡é¨é©é£é¥é¤ééééééé¼éé¶é é é¢¯é¢±é¤é¤é¤é¤é§éª¯éª°é«¦é­é­é³´é³¶é³³éº¼é¼»é½ååå»åµå¹ååååå"],["bc40","åååååå°å²å®å»å¹å²å¿å´å©åååå´å¶å¯å°å¢å¢å¢å¢³å¢å¢®å¢©å¢¦å¥­å¬å«»å¬å«µå¬å¬å¯®å¯¬å¯©å¯«å±¤å±¥å¶å¶å¹¢å¹å¹¡å»¢å»å»å»å»£å» å½å½±å¾·å¾µæ¶æ§æ®æææ"],["bca1","æ¼æ°æ«æ¾æ§ææ«ææ¬ææ¤ææ®æ®æ©æ¯æ¹ææ²æææ°æ¥æææ©ææ®æ­æ«ææ¬ææ¢æ³æµæ·æ¸æ®æ«æ´æ±æ¨£æ¨æ§¨æ¨æ¨æ¨æ§½æ¨¡æ¨æ¨æ§³æ¨æ¨æ§­æ¨æ­æ­æ®¤æ¯æ¯æ¼¿æ½¼æ¾æ½æ½¦æ½æ¾æ½­æ½æ½¸æ½®æ¾æ½ºæ½°æ½¤æ¾æ½æ»æ½¯æ½ æ½çç¬ç±ç¨ççççç©çç"],["bd40","ç¾çç¿ç ç©çç¤ç¦ç¡ç¢ççºç¤çççççç£ç£ç¢ºç£ç¢¾ç£ç¢¼ç£ç¨¿ç¨¼ç©ç¨½ç¨·ç¨»çª¯çª®ç®­ç®±ç¯ç®´ç¯ç¯ç¯ç® ç¯ç³ç· ç·´ç·¯ç·»ç·ç·¬ç·ç·¨ç·£ç·ç·ç·©ç¶ç·ç·²ç·¹ç½µç½·ç¾¯"],["bda1","ç¿©è¦èèèè èèèè½èè®è¬è­èèè£è¡èè¬è¥è¿èèè´è¶è è¦è¸è¨èèèèè¡è¡è¤è¤è¤è¤è¤è¤èª¼è«è«è«èªè«è«¸èª²è«è«èª¿èª°è«è«èª¶èª¹è«è±è±è±¬è³ è³è³¦è³¤è³¬è³­è³¢è³£è³è³ªè³¡èµ­è¶è¶£è¸«è¸è¸è¸¢è¸è¸©è¸è¸¡è¸èººè¼è¼è¼è¼©è¼¦è¼ªè¼è¼"],["be40","è¼¥é©é®é¨é­é·é°é­é§é±éééééé»é·éªé¬é¤éé³é¼ééé°é²é­é±ééééé éééé ¡é «é é¢³é¤é¤é¤é¤é§é§é§é§é§é§é§é§éª·é«®é«¯é¬§é­é­é­·é­¯é´é´"],["bea1","é´éº©éº¾é»å¢¨é½åååååååªåååå³åå«å¹å©å¤å¸åªå¨å¥å±å¯å¬å¢å¶å£å¢¾å£å£å¥®å¬å¬´å­¸å¯°å°å½æ²ææ©æææ¶æ¾æææ°ææææ»æ¼ææææææ¿æææ¾æ´æææ¹æææ¸æ¨½æ¨¸æ¨ºæ©æ©«æ©æ¨¹æ©æ©¢æ©¡æ©æ©æ¨µæ©æ©æ­æ­·æ°æ¿æ¾±æ¾¡"],["bf40","æ¿æ¾¤æ¿æ¾§æ¾³æ¿æ¾¹æ¾¶æ¾¦æ¾ æ¾´ç¾çççççç¹çççççç¨çç£çççç¢ççç´ç¸çºç§ç¥ç ççç¥ç£¨ç£ç£¬ç£§ç¦¦ç©ç©ç©ç©ç©çªºç¯ç°ç¯ç¯¤ç¯ç¯¡ç¯©ç¯¦ç³ç³ç¸"],["bfa1","ç¸ç¸ç¸ç¸£ç¸ç¸ç¸ç¸ç½¹ç¾²ç¿°ç¿±ç¿®è¨è³è©è¨è»èèèèèèè¨è©èèè­èªèèèèè¢èè¡¡è¤ªè¤²è¤¥è¤«è¤¡è¦ªè¦¦è«¦è«ºè««è«±è¬è«è«§è«®è«¾è¬è¬è«·è«­è«³è«¶è«¼è±«è±­è²è³´è¹è¸±è¸´è¹è¸¹è¸µè¼»è¼¯è¼¸è¼³è¾¨è¾¦éµé´é¸é²é¼éºé´éé é¶é¸é³é¯é¢é¼é«éé"],["c040","éé¦é¡éé®éé»é§é¨éªéééééééééé¦éé °é ¸é »é ·é ­é ¹é ¤é¤é¤¨é¤é¤é¤¡é¤é§­é§¢é§±éª¸éª¼é«»é«­é¬¨é®é´é´£é´¦é´¨é´é´é»é»é¾é¾åªåå¡å²åµååååå"],["c0a1","åå£å£å£å£å¬°å¬ªå¬¤å­ºå°·å±¨å¶¼å¶ºå¶½å¶¸å¹«å½å¾½ææææ¦ææ²æ´ææææ æ°æ¦æ¬æ±æ¢æ­æææææªæªæªæª¢æªæ«æª£æ©¾æªæªæª æ­æ®®æ¯æ°æ¿æ¿±æ¿æ¿ æ¿æ¿¤æ¿«æ¿¯æ¾æ¿¬æ¿¡æ¿©æ¿æ¿®æ¿°ç§çç®ç¦ç¥ç­ç¬ç´ç çµçç°ç²ç©ç°ç¦ç¨ççççªç³çªç°ç¬"],["c140","ç§ç­ç¯ç£·ç£ºç£´ç£¯ç¤ç¦§ç¦ªç©çª¿ç°ç°ç¯¾ç¯·ç°ç¯ ç³ ç³ç³ç³¢ç³ç³ç³ç¸®ç¸¾ç¹ç¸·ç¸²ç¹ç¸«ç¸½ç¸±ç¹ç¹ç¸´ç¸¹ç¹ç¸µç¸¿ç¸¯ç½ç¿³ç¿¼è±è²è°è¯è³èèèºèèè¿è½èè¾è¨èè±èª"],["c1a1","èè¾èèèè¯èèè¨èè§èèè³èèè«è»èºèèè¤»è¤¶è¥è¤¸è¤½è¦¬è¬è¬è¬è¬è¬è¬ è¬è¬è¬è±è°¿è±³è³ºè³½è³¼è³¸è³»è¶¨è¹è¹è¹è¹è½è¼¾è½è½è¼¿é¿é½ééééé¹é£ééééé¨éµéé¥ééé¾é¬éé°éééééééé±é¸éééé éé¡é¢¶é¤µé¨"],["c240","é§¿é®®é®«é®ªé®­é´»é´¿éºé»é»é»é»é»é¼¾é½å¢åå®å£å£å¬¸å½æ£æ³æ´æ²æ¾ææºæ»æ·æ·ææ¦æª³æª¬æ«æª»æª¸æ«æª®æª¯æ­æ­¸æ®¯ççæ¿¾çæ¿ºççç»ç¼ç¾ç¸ç·çµç§ç¿ççç"],["c2a1","çç½ç¿ç»ç¼ç¤ç¦®ç©¡ç©¢ç© ç«ç«ç°«ç°§ç°ªç°ç°£ç°¡ç³§ç¹ç¹ç¹ç¹ç¹¡ç¹ç¹ç½ç¿¹ç¿»è·è¶èèèèè©èèèè°èºè¹è¦è¯è¬è²è è¦è¦²è§´è¬¨è¬¹è¬¬è¬«è±è´è¹è¹£è¹¦è¹¤è¹è¹è»è½è½éééé«é¬ééééé¢é³é®é¬é°éééééééé¢ééééé¤é£é¦"],["c340","é­é¹é¡é¡é¡é¡é¡é¢ºé¤¾é¤¿é¤½é¤®é¦¥é¨é«é¬é¬é­é­é­é¯é¯é¯½é¯é¯éµéµéµ é» é¼é¼¬å³å¥å£å£å£¢å¯µé¾å»¬æ²æ·æ¶æµæææ ææ«¥æ«æ«æ«ççç¨çççççççç¢ç¸"],["c3a1","çºç½çç£çççç¡çç¤ç¦±ç©«ç©©ç°¾ç°¿ç°¸ç°½ç°·ç±ç¹«ç¹­ç¹¹ç¹©ç¹ªç¾ç¹³ç¾¶ç¾¹ç¾¸èè©èèªèè¤è¥è·è»è è è¹è¾è¥ è¥è¥è¥è­è­è­è­è­è­è­è­è­è´è´è¹¼è¹²èºè¹¶è¹¬è¹ºè¹´è½è½è¾­ééé±é®é¡éééééééé¢ééé¤éé¨éé´é£éªé§é¡éé»é¡"],["c440","é¡é¡é¢¼é¥é¥é¨é¨é¬é¯¨é¯§é¯é¯é¶éµ¡éµ²éµªéµ¬éºéºéºéº´å¸å¨å·å¶å´å¼å£¤å­å­å­½å¯¶å·æ¸æºææææ¦æ§æ«¬ç¾ç°ç²çç»çç¢ç¥ç¤¦ç¤ªç¤¬ç¤«ç«ç«¶ç±ç±ç±ç³¯ç³°è¾®ç¹½ç¹¼"],["c4a1","çºç½èèè¦è»è¹èèºèèèèè è è¥¤è¦ºè§¸è­°è­¬è­¦è­¯è­è­«è´è´èºèºèºèºé´éééé½é¡é°é£é¥é¥é¦¨é¨«é¨°é¨·é¨µé°é°é¹¹éºµé»¨é¼¯é½é½£é½¡å·å¸åååå¤å±¬å·æ¼æ¾ææææ©æ«»æ¬æ«ºæ®²ççç§ççç©çç±çºçºç¾¼èè­èè £è ¢è ¡è è¥ªè¥¬è¦½è­´"],["c540","è­·è­½è´èºèºèºè½è¾¯éºé®é³éµéºé¸é²é«é¢é¸é¹é²é¿é¡§é¡¥é¥é©é©é©é¨¾é«é­é­é°­é°¥é¶¯é¶´é·é¶¸éºé»¯é¼é½é½¦é½§å¼å»åååå­¿å·å·å½æ¿æ¤æ¬æ­¡çççç¤çç®ç¬"],["c5a1","ç¦³ç± ç±è¾è½èè¥²è¥¯è§¼è®è´è´èºèºè½¡ééééé½é¾ééé¡«é¥é©é©é«é¬é±é°±é°¾é°»é·é·é¼´é½¬é½ªé¾åå·ææ£æ«æªæ¬æ¬çç«ç±¤ç±£ç±¥çºçºçºè¢è¸è¿è ±è®ééé£é é¤é¨é¡¯é¥é©é©é©é«é«é«é±é±é±é·¥éºé»´åå£©æ¬çç±ç²çç½ç¾è ¶è ¹è¡¢è®è®"],["c640","è®è·è´ééªééééé¡°é©é¬¢é­é±é·¹é·ºé¹¼é¹½é¼é½·é½²å»³æ¬ç£ç±¬ç±®è »è§èº¡éé²é°é¡±é¥é«é¬£é»ç¤çè®é·éé©¢é©¥çºè®èºªéé½é¾é¼é±·é±¸é»·è±é¿é¸ç¨é©ªé¬±é¸é¸ç±²"],["c940","ä¹ä¹åµååä¸ä¸ä¹äºåï¨å±®å½³ä¸åä¸ä¸®äºä»ä»ä»åå¼å¬å¹å å¤å¤¬å°å·¿æ¡æ®³æ¯æ°ç¿ä¸±ä¸¼ä»¨ä»ä»©ä»¡ä»ä»åååå¢å£å¤å¤¯å®å®å°å°»å±´å±³å¸åºåºå¿æææ°"],["c9a1","æ°¶æ±æ°¿æ°»ç®ç°çç¦¸èéä¼ä¼ä¼¬ä»µä¼ä»±ä¼ä»·ä¼ä¼ä¼ä¼ä¼¢ä¼ä¼ä»´ä¼å±åååå¦å¢ååååå¡åå®åªå´å¤¼å¦å¥¼å¦å¥»å¥¾å¥·å¥¿å­å°å°¥å±¼å±ºå±»å±¾å·å¹µåºå¼å¼å½´å¿å¿å¿æææ¤æ¡æ¦æ¢ææ ææ¥æ¯æ®æ¾æ¹æ¸æ»æºæ¿æ¼æ³æ°æ±æ±æ±æ±æ±æ±æ±"],["ca40","æ±ç±çç´çµççªç¿ç©µç½è¸è¼èè½è¿èè¥¾éééééé¢é¤é é£ä½ä¼»ä½¢ä½ä½ä½¤ä¼¾ä½§ä½ä½ä½ä½ä¼­ä¼³ä¼¿ä½¡åå¹ååå¡å­å®åå£å²ååå°å·åªååååå¥å"],["caa1","å½ååå¨å¤åå®å§å¥ååååååå¤å¥å¦¦å¦å¦ å¦å¦å¦¢å¦å¦å¦§å¦¡å®å®å°¨å°ªå²å²å²å²å²å²å²å²å²å²å· å¸å¸åºåºåºåºåºå¼å¼å½¸å½¶å¿å¿å¿å¿­å¿¨å¿®å¿³å¿¡å¿¤å¿£å¿ºå¿¯å¿·å¿»æå¿´æºæææææææ±æ»æºæ°æææ·æ½æ²æ´æ·æ°æ´æ³æ²æµææ"],["cb40","æææææææææ¯æ°æ°æ±¸æ±§æ±«æ²æ²æ²æ±±æ±¯æ±©æ²æ±­æ²æ²æ²æ±¦æ±³æ±¥æ±»æ²ç´çºç£ç¿ç½ççççºçççççççºç¹çççç¤½è´èèèèèèèèèèè"],["cba1","èèèè±¸è¿è¾¿éé¡é¥éé§é é°é¨é¯é­ä¸³ä¾ä½¼ä¾ä½½ä¾ä¾ä½¶ä½´ä¾ä¾ä½·ä½ä¾ä½ªä¾ä½¹ä¾ä½¸ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä½«ä½®åå¼å¾åµå²å³åå±å¼ååå¼åååå¿ååååå«åºå¾å¥å¬å´å¦åå¯å¡å åå£å§å¤å·å¹å¯å²å­å«å±å°å¶ååµå»å³å´å¢"],["cc40","å¨å½å¤å¥å¦µå¦ºå§å§å¦²å§å§å¦¶å¦¼å§å§å¦±å¦½å§å§å¦´å§å­¢å­¥å®å®å±å±å²®å²¤å² å²µå²¯å²¨å²¬å²å²£å²­å²¢å²ªå²§å²å²¥å²¶å²°å²¦å¸å¸å¸å¼¨å¼¢å¼£å¼¤å½å¾å½¾å½½å¿å¿¥æ­æ¦ææ²æ"],["cca1","æ´æææ³æææ¬æ¢æææ®æææææææ½æ­æ´ææ¾æªæ¶ææ®æ³æ¯æ»æ©æ°æ¸æ½æ¨æ»ææ¼ææææ»æææææ½æææ¶æææ¬æææ¶æ»ææææ´æææºæææææ½ææ¸æ¹ææ¬¥æ®æ­¾æ¯æ°æ²æ³¬æ³«æ³®æ³æ²¶æ³æ²­æ³§æ²·æ³æ³æ²ºæ³æ³æ³­æ³²"],["cd40","æ³æ³æ²´æ²æ²æ²æ³æ³æ´°æ³æ³æ²°æ³¹æ³æ³©æ³ççççççççççççªççççççççççç¤ç¡ç­ç¦ç¢ç ç¬ççç¨ç¿çç¾ççç¯ç³ç±ç°çµç¸ç¼ç¹ç»çº"],["cda1","ç·ç¥ç¤¿ç§ç©¸ç©»ç«»ç±µç³½èµèè®è£è¸èµè­è è èè«èèèèµè§è®è¼èèºè´è¨è¡è©èè¤èè¶è¢è°è¯è­è®è±è¿è¿è¿è¿è¿è¿è¿é²é´é¯é³é°é¹é½é¼éºéä¿ä¿ä¿ä¾²ä¿ä¿ä¿ä¿ä¿ä¿ä¾»ä¾³ä¿ä¿ä¿ä¾ºä¿ä¾¹ä¿¬ååååå½å¼åååååºå¡å­å¥å"],["ce40","åèå·å®åå¶ååå å°å¼å¢å¾å²åå°åµååå¤ååååååååå¥ååå£´å¤å¥å§¡å§å§®å¨å§±å§å§ºå§½å§¼å§¶å§¤å§²å§·å§å§©å§³å§µå§ å§¾å§´å§­å®¨å±å³å³å³å³å³å³"],["cea1","å³å³å³å³å³å³å³å³å³å³å³å³å³å³¸å·¹å¸¡å¸¢å¸£å¸ å¸¤åº°åº¤åº¢åºåº£åº¥å¼å¼®å½å¾æ·æ¹ææ²æææææææææææ¤æææ¦æ®ææææææµæææ«æ¹æææ¸æ¶ææææºææ»æ°æææªæ¿æ¶æ¡æ²æµææ¦æ¢æ³æ«æºææ´æ¹æ®ææææ²ææº"],["cf40","ææ»æ¸æææ·ææ«æ¤ææµææ³æ·æ¶æ®æ£ææ¹ææ§æ°æ²æ¼ææ­ææ®æ¦ææºææææªææ¬¨æ®æ®æ®¶æ¯æ¯æ¯ æ° æ°¡æ´¨æ´´æ´­æ´æ´¼æ´¿æ´æ´æ³æ´³æ´æ´æ´ºæ´æ´æ´æ´æµ"],["cfa1","æ´æ´æ´·æ´æ´æµæ´æ´ æ´¬æ´æ´¢æ´æ´ç·çç¾ç±ç°ç¡ç´çµç©çççç¬ç°ç³ç®çç¤ç¨ç«ççªç¦ç£çççççç¹ç¶çµç´ç«ç¿çç¾ççç¸çç¬ç®ç®ççç§çªç¹ççççççç·ç»çºç§ç¨ç ç ç ç ç ç ç ç ç ç ç¥ç¥ç¥ç¥ç¥ç§ç§ç§ç§ç§çª"],["d040","ç©¾ç«ç¬ç¬ç±ºç±¸ç±¹ç±¿ç²ç²ç´ç´ç´ç½ç¾ç¾ç¾¾èèèèè·èèè èèèèèè£èèèèèèèè¦èè¿è¡èèè¾è¹èè¨èèèºè«èè´è¬è¡è²èµèè»è¶è°èª"],["d0a1","è¤è èºè³è­è·è´è¼è³è¡è¡è¡§è¡ªè¡©è§è¨è¨èµ²è¿£è¿¡è¿®è¿ é±é½é¿ééé¾éééééééééééååååå¢å°åä¿µä¿´å³å·å¬ä¿¶ä¿·ååå å§åµå¯å±åååååååååå¡åååååå¢åååå¦å¢ååå§å³å¤åå¿ååå«ååå±"],["d140","åå»å·å¸å ååååååå ²åååºåå½å¼å¸å¶å¿ååå¹åå¤å¥å¨å¨å¨­å¨®å¨å¨å¨å¨å¨å¨³å­¬å®§å®­å®¬å°å±å±å³¬å³¿å³®å³±å³·å´å³¹å¸©å¸¨åº¨åº®åºªåº¬å¼³å¼°å½§æææ§"],["d1a1","ææ¢æææææææææææææææ²æææ¬æææ¶ææ¤æ¹æææ¼æ©ææ´ææææ­ææ³æææ¸ææææææææææææææææ æ æ¡æ ²æ ³æ »æ¡æ¡æ æ ±æ æ µæ «æ ­æ ¯æ¡æ¡æ ´æ æ æ æ ¦æ ¨æ ®æ¡æ ºæ ¥æ  æ¬¬æ¬¯æ¬­æ¬±æ¬´æ­­èæ®æ¯¦æ¯¤"],["d240","æ¯¨æ¯£æ¯¢æ¯§æ°¥æµºæµ£æµ¤æµ¶æ´æµ¡æ¶æµæµ¢æµ­æµ¯æ¶æ¶æ·¯æµ¿æ¶æµæµ§æµ æ¶æµ°æµ¼æµæ¶æ¶æ´¯æµ¨æ¶æµ¾æ¶æ¶æ´æ¶æµ»æµ½æµµæ¶çççççç¼¹ç¢çççç çççççççç¡çç¸"],["d2a1","ç·ç¶ççºç´ç¾ç¶ç³ç»çççç¥çç¼ç§ç£ç©ççççççççç¨ççç´çµç¡ççç°çç»ççç¿ç¶çºçççççççç£ççççç¢ç§ç £ç ¬ç ¢ç µç ¯ç ¨ç ®ç «ç ¡ç ©ç ³ç ªç ±ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç§«ç§¬ç§ ç§®ç§­ç§ªç§ç§ç§çªçªçªçªçªçªçªç«ç¬"],["d340","ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç¬ç²ç²ç²ç²ç²ç²ç²ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç½ç½¡ç½ç½ ç½ç½ç¾ç¾ç¿ç¿ç¿èè¾è¹èºè²è¹èµèè»èèè¯è¥è³è­èèèè¥èè¿èè¦èè¢"],["d3a1","èèèèªèè¼èèè¤è è·è¯è©èèèèèè¬èè§èèèè¢è¨èèèèèèèèèèè¥èè¡è§èèèèèèè¡è¡è¡­è¡µè¡¶è¡²è¢è¡±è¡¿è¡¯è¢è¡¾è¡´è¡¼è¨è±è±è±»è²¤è²£èµ¶èµ¸è¶µè¶·è¶¶è»è»è¿¾è¿µéè¿¿è¿»éè¿¼è¿¶éé ééé£éé¥ééééé¤é"],["d440","éééé¢éééé¼é££é«é¬¯ä¹¿å°åªå¡åå åååå²åååååå¢åååå©å«å£å¤ååå®å³åååå«å­å¬å®ååå­ååµå¶å¼ååå´åªåå¢å¶åµå°åå"],["d4a1","åå²å¥åå¹åå­å»ååååå»å å¢å¶åå´å å­å½å å¸å å³åå å®å£å²å¥å¬å¡å å¼å å§å å å±å©å°å å å¥å© å©å©å©§å©å¨¸å¨µå©­å©å©å©¥å©¬å©å©¤å©å©å©å©å©å©å©åªå¨¾å©å¨¹å©å©°å©©å©å©å©å©å©å­²å­®å¯å¯å±å´å´å´å´å´ å´å´¨å´å´¦å´¥å´"],["d540","å´°å´å´£å´å´®å¸¾å¸´åº±åº´åº¹åº²åº³å¼¶å¼¸å¾å¾å¾ææææ¾æ°æºææææ¤ææææ±ææ·ææ¿ææææ²æ¥æææ½æ½ææ­æææ«ææ¯æææ®æ¯æµææ­æ®æ¼æ¤æ»æ"],["d5a1","æ¸æææææ°æææ¥æ¡ææææ¢ææ¡¹æ¢æ¢æ¢æ¡­æ¡®æ¢®æ¢«æ¥æ¡¯æ¢£æ¢¬æ¢©æ¡µæ¡´æ¢²æ¢æ¡·æ¢æ¡¼æ¡«æ¡²æ¢ªæ¢æ¡±æ¡¾æ¢æ¢æ¢æ¢ æ¢æ¢¤æ¡¸æ¡»æ¢æ¢æ¢æ¡½æ¬¶æ¬³æ¬·æ¬¸æ®æ®æ®æ®æ®æ°ªæ·æ¶«æ¶´æ¶³æ¹´æ¶¬æ·©æ·¢æ¶·æ·¶æ·æ¸æ·æ· æ·æ·æ¶¾æ·¥æ·æ·æ·æ·´æ·æ¶½æ·­æ·°æ¶ºæ·æ·æ·æ·"],["d640","æ·æ·²æ·æ·½æ·æ·æ·£æ¶»çºçç·çç´çç°çç³çç¼ç¿çççç¸ç¶çççç¾ç»ç¼ç¿çççççççç¿çççç¶ç¸çµççç½çççºç¼ç¿ççç´çç¤ç£ççç"],["d6a1","çççççççç¹ç¯ç­ç±ç²ç´ç³ç½ç¥ç»çµç¡ç¡ç¡ç¡ç¡ç¡ç ¦ç¡ç¡ç¥¤ç¥§ç¥©ç¥ªç¥£ç¥«ç¥¡ç¦»ç§ºç§¸ç§¶ç§·çªçªçªç¬µç­ç¬´ç¬¥ç¬°ç¬¢ç¬¤ç¬³ç¬ç¬ªç¬ç¬±ç¬«ç¬­ç¬¯ç¬²ç¬¸ç¬ç¬£ç²ç²ç²ç²£ç´µç´½ç´¸ç´¶ç´ºçµç´¬ç´©çµçµç´¾ç´¿çµç´»ç´¨ç½£ç¾ç¾ç¾ç¾ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿è"],["d740","èèèèèèè¥èèè­èè¬èè¡èè§èè¢èè¸è³èºè´è²è´èè£è¨èèºè³è¤è´èèèèèµèè©è½èèèèèªèè¾è¥è¯èèè°è¿è¦èè®è¶èèèè¿è·"],["d7a1","èèèèºè°èè¹è³è¸èè´è»è¼èè½è¾è¡è¢è¢è¢¨è¢¢è¢ªè¢è¢è¢¡è¢è¢è¢§è¢è¢è¢è¢¤è¢¬è¢è¢è¢è¦è§è§è§è¨°è¨§è¨¬è¨è°¹è°»è±è±è±½è²¥èµ½èµ»èµ¹è¶¼è·è¶¹è¶¿è·è»è»è»è»è»è» è»¡é¤ééééé¡é¯éªé°é´é²é³éé«é¬é©éééééé¬é´é±é³é¸é¤é¹éª"],["d840","é«é·é¨é®éºééé¼é­é«é±é¯é¿éªé é£¥é¦åååååå£ååååå¨ååååååååå¤å§åå¨å¥å­å·åå¢ååååµåå£åå¤å½åå¦å¿åå¡ååå ©å ·"],["d8a1","å å å §å £å ¨åµå¡å ¥å å å ³å ¿å ¶å ®å ¹å ¸å ­å ¬å »å¥¡åª¯åªåªå©ºåª¢åªå©¸åª¦å©¼åª¥åª¬åªåª®å¨·åªåªåªåªåªåª©å©»å©½åªåªåªåªåªå¯ªå¯å¯å¯å¯å¯å¯å°å°°å´·åµåµ«åµåµå´¿å´µåµåµåµå´³å´ºåµå´½å´±åµåµå´¹åµå´¸å´¼å´²å´¶åµåµå¹å¹å½å¾¦å¾¥å¾«ææ¹ææ¢æææ"],["d940","æ²ææææµææ¸æ¼æ¾ææææææ¿æææææ±æ°ææ¥æ¨æ¯æææ³ææ æ¶ææ²æµæ¡ææ¾æææææææææææ°æææ²æ§æªæ¤ææ¨æ¥ææææ®ææ"],["d9a1","æ¼æ¬æ»ææ±æ¹æªæ²ææ¤æ£æ¤æ£æ¤ªæ£¬æ£ªæ£±æ¤æ£æ£·æ£«æ£¤æ£¶æ¤æ¤æ£³æ£¡æ¤æ£æ¤æ¥°æ¢´æ¤æ£¯æ£æ¤æ£¸æ£æ£½æ£¼æ£¨æ¤æ¤æ¤æ£æ£æ£æ£æ£¦æ£´æ£æ¤æ£æ£©æ¤æ¤¥æ£æ¬¹æ¬»æ¬¿æ¬¼æ®æ®æ®æ®æ®½æ¯°æ¯²æ¯³æ°°æ·¼æ¹æ¹æ¸æ¹æºæ¸¼æ¸½æ¹æ¹¢æ¸«æ¸¿æ¹æ¹æ¹³æ¸æ¸³æ¹æ¹æ¹æ¸»æ¸æ¸®æ¹"],["da40","æ¹¨æ¹æ¹¡æ¸±æ¸¨æ¹ æ¹±æ¹«æ¸¹æ¸¢æ¸°æ¹æ¹¥æ¸§æ¹¸æ¹¤æ¹·æ¹æ¹¹æ¹æ¹¦æ¸µæ¸¶æ¹ç çç¯ç»ç®ç±ç£ç¥ç¢ç²çç¨çºççççççççççç°ç¢ç±ç³ç§ç²ç­ç¦ç£çµçç®ç¬ç°ç«ç"],["daa1","çç¡ç­ç±ç¤ç£çç©ç ç²ç»ç¯ç¯ç¬ç§çç¡ç¦ççç¤ççççççççççççççç¬ç¡ ç¡¤ç¡¥ç¡ç¡­ç¡±ç¡ªç¡®ç¡°ç¡©ç¡¨ç¡ç¡¢ç¥´ç¥³ç¥²ç¥°ç¨ç¨ç¨ç¨ç¨çªç«¦ç«¤ç­ç¬»ç­ç­ç­ç­ç­ç­ç­ç²¢ç²ç²¨ç²¡çµçµ¯çµ£çµçµçµ§çµªçµçµ­çµçµ«çµçµçµ©çµçµçµç¼¾ç¼¿ç½¥"],["db40","ç½¦ç¾¢ç¾ ç¾¡ç¿èèèè¾èèèèèèè½èèºè¦è®è·è¸è¹èè¼è½è¿èµè»èè¹è£èè¨èè§è¤è¼è¶èèèè«è£è¿èèè¥èè¿è¡èèèèµèèèèèèèè³"],["dba1","èèºèèèªèèè¬è®èè»èè¢èèè¾èè¢è¦èè£èèªèè«èè¬è©èè¨èè¡è¡è¡è¢ºè£è¢¹è¢¸è£è¢¾è¢¶è¢¼è¢·è¢½è¢²è¤è£è¦è¦è¦è§è§è§è©è©è¨¹è©è©è©è©è©è©è©è©è©è©è©è©è±è²è²è²ºè²¾è²°è²¹è²µè¶è¶è¶è·è·è·è·è·è·è·è·è·è·è·è·è»¯è»·è»º"],["dc40","è»¹è»¦è»®è»¥è»µè»§è»¨è»¶è»«è»±è»¬è»´è»©é­é´é¯éé¬éé¿é¼éé¹é»éééééé¡é¤éé¢é ééé¥ééé¦ééééé¿é½ééé§ééé¤ééééé»ééééé¾é"],["dca1","ééééééé±é°é¬é°é®é é¢©é£«é³¦é»¹äºäºäº¶å½å¿åå®ååå´ååå°ååºå±ååå¶å¸ååºå¸å»å¼ååååååååååå©å¿ååååå¢ååå²ååååå¡å¡¨å¡¤å¡å¡å¡å¡¯å¡å¡å¡å¡å¡¥å¡å ½å¡£å¡±å£¼å«å«å«åªºåª¸åª±åªµåª°åª¿å«åª»å«"],["dd40","åª·å«å«åª´åª¶å«åª¹åªå¯å¯å¯å°å°³åµ±åµ£åµåµ¥åµ²åµ¬åµåµ¨åµ§åµ¢å·°å¹å¹å¹å¹å¹å»å»å»å»å»å½å¾¯å¾­æ·æææ«ææ¶æ²æ®ææ¯ææ©ææ é¨æ£æ¥æ¤ææ±æ«ææææ æ¤"],["dda1","æ³æææææ¹æ·æ¢æ£ææ¦æ°æ¨ææµæ¯ææææ¥æ§ææ§ææ®æ¡ææ¯æææææææææææ¸æ æ¥¦æ¥æ¤¸æ¥æ¥¢æ¥±æ¤¿æ¥æ¥ªæ¤¹æ¥æ¥æ¥æ¥ºæ¥æ¥æ¤µæ¥¬æ¤³æ¤½æ¥¥æ£°æ¥¸æ¤´æ¥©æ¥æ¥¯æ¥æ¥¶æ¥æ¥æ¥´æ¥æ¤»æ¥æ¤·æ¥æ¥æ¥æ¤²æ¥æ¤¯æ¥»æ¤¼æ­æ­æ­æ­æ­æ­æ®ï¨æ¯»æ¯¼"],["de40","æ¯¹æ¯·æ¯¸æºæ»æ»æºæ»æºæºæºæº æº±æº¹æ»æ»æº½æ»æºæ»æº·æº°æ»æº¦æ»æº²æº¾æ»æ»æ»æºæºæºæºæº¤æº¡æº¿æº³æ»æ»æºæº®æº£çççç£ç ççç¢ç²ç¸çªç¡ççççç°ççç"],["dea1","çççççççççç¼çç»çºçççççççççççççççççç¡ç¿ç¾ç½çç¹ç·æ¦ç¯ççç·ç¾ç¼ç¹ç¸çç»ç¶ç­çµç½ççµçççç çççç©ç§ççç­ç ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢ç¢¡ç¢ç¡¹ç¢ç¢ç¢ç¡»ç¥¼ç¦ç¥½ç¥¹ç¨ç¨ç¨ç¨ç¨ç¨ç¨¢ç¨"],["df40","ç¨ç¨çª£çª¢çªç««ç­¦ç­¤ç­­ç­´ç­©ç­²ç­¥ç­³ç­±ç­°ç­¡ç­¸ç­¶ç­£ç²²ç²´ç²¯ç¶ç¶ç¶ç¶çµ¿ç¶çµºç¶çµ»ç¶çµ¼ç¶ç¶ç¶çµ½ç¶ç½­ç½«ç½§ç½¨ç½¬ç¾¦ç¾¥ç¾§ç¿ç¿è¡è¤è è·èè©èè¢è²æ¡èè¶è§è¯"],["dfa1","èè¡èèèèèèè±è¿èè¶è¹èèè¥èèèè§è°èè½èèè´è³èèèè·èºè´èºèè¸è²èè©èèè¯èè­èè°è¹èèèè¯èèè»èè¶è³è¨è¾èè«è èè®èèèè·èèºèèµèè¸èèèè¶èèè£è£è£è£è£è£è£è£è£è¦è¦è§è§¥è§¤"],["e040","è§¡è§ è§¢è§è§¦è©¶èªè©¿è©¡è¨¿è©·èªèªè©µèªèªè©´è©ºè°¼è±è±è±¥è±¤è±¦è²è²è²è³èµ¨èµ©è¶è¶è¶è¶è¶è¶è¶è¶è¶è·°è· è·¬è·±è·®è·è·©è·£è·¢è·§è·²è·«è·´è¼è»¿è¼è¼è¼è¼è¼è¼è¼éé¿"],["e0a1","ééé½ééééééééé®é¯ééé°éºé¦é³é¥ééé®ééé­é¬éé é§é¯é¶é¡é°é±éé£éé²ééééé²ééééééééééºé½é¸éµé³é·é¸é²é é é é¢¬é£¶é£¹é¦¯é¦²é¦°é¦µéª­éª«é­é³ªé³­é³§éºé»½å¦ååå¨å³ååªåå¤åå¬å°å¯å£å "],["e140","åååå©å«å°å¬å§åååå¼ååååååºååå¿å¹å¢å¡¼å¢å¢å¢å¢å¡¿å¡´å¢å¡ºå¢å¢å¢å¡¶å¢å¢å¡»å¢å¢å£¾å¥«å«å«®å«¥å«å«ªå«å«­å««å«³å«¢å« å«å«¬å«å«å«å«¨å«å­·å¯ "],["e1a1","å¯£å±£å¶å¶åµ½å¶åµºå¶åµ·å¶å¶å¶åµ¾åµ¼å¶åµ¹åµ¿å¹å¹å¹å»å»å»å»å»å»å»å»å»å½å½å½¯å¾¶æ¬æ¨æææ±æ³æææ²æ¬ææ´ææºææ¥æ»æªæ¡ææ©æ§æ«æ«ææææ´æ¶æ²æ³æ½æµæ¦æ¦æææææææ ææ¿æ¿æ¬æ«ææ¥æ·æ³æ æ¡æ ææææ¢æ¦±æ¦¶æ§"],["e240","æ¦ æ§æ¦æ¦°æ¦¬æ¦¼æ¦æ¦æ¦æ¦§æ¦æ¦©æ¦¾æ¦¯æ¦¿æ§æ¦½æ¦¤æ§æ¦¹æ§æ¦æ§æ¦³æ¦æ¦ªæ¦¡æ¦æ§æ¦æ¦æ§æ¦µæ¦¥æ§æ­æ­æ­æ®æ®æ® æ¯æ¯æ¯¾æ»æ»µæ»±æ¼æ¼¥æ»¸æ¼·æ»»æ¼®æ¼æ½æ¼æ¼æ¼§æ¼æ¼»æ¼æ»­æ¼"],["e2a1","æ¼¶æ½³æ»¹æ»®æ¼­æ½æ¼°æ¼¼æ¼µæ»«æ¼æ¼æ½æ¼æ»½æ»¶æ¼¹æ¼æ»¼æ¼ºæ¼æ¼æ¼æ¼æ¼¡çççççççç»ççççççççççççç¢ç³ç±çµç²ç§ç®çççç½ççççççççç¸çç¼ççç®çç¯ç¾çç¢²ç¢ªç¢´ç¢­ç¢¨ç¡¾ç¢«ç¢ç¢¥ç¢ ç¢¬ç¢¢ç¢¤ç¦ç¦ç¦ç¦ç¦ç¦ç¦"],["e340","ç¦ç¦ç¦ç¦ç¨«ç©ç¨°ç¨¯ç¨¨ç¨¦çª¨çª«çª¬ç«®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç®åç®ç®¤ç®ç²»ç²¿ç²¼ç²ºç¶§ç¶·ç·ç¶£ç¶ªç·ç·ç·ç¶ç·ç·ç·ç·ç·ç¶¯ç¶¹ç¶ç¶¼ç¶ç¶¦ç¶®ç¶©ç¶¡ç·ç½³ç¿¢ç¿£ç¿¥ç¿"],["e3a1","è¤èèèèèèèèèèèè¤è¡èèºèèè¬è®è«è¹è´èèèªèè±èèè§è»è¢èèèèè©è¯è¨èèè¶èè èèèèè°èè¡è³è£è¨è«èè®èè¡èèèè¬èè¾èè è²èªè­è¼èèºè±èµèè¦è§è¸è¤èè°èè£·è£§è£±è£²è£ºè£¾è£®è£¼è£¶è£»"],["e440","è£°è£¬è£«è¦è¦¡è¦è¦è§©è§«è§¨èª«èªèªèªèªèªè°½è±¨è±©è³è³è³è¶è¸è¸è·¿è¸è·½è¸è¸è¸è¸è¸è·¾è¸è¸è¼è¼è¼è¼é£éé é¢éééé¤é¡ééºé²é¹é³é¥é¤é¶ééºé ééªé"],["e4a1","é¦éé«é¹éé¿é£é®éééé¢é½éé¡ééééé§é¾éé©ééé­éé¡é¿éé½éºé¾éééé»ééé¿ééé é¢­é¢®é¤é¤é¤é¦é¦é§é¦¹é¦»é¦ºé§é¦½é§éª±é«£é«§é¬¾é¬¿é­ é­¡é­é³±é³²é³µéº§å¿åå°å¸ååå¶å¾ååå½åååå±å¯ååååµååååå"],["e540","ååå³å½å¬å¾å¸åªåºåå¢«å¢å¢±å¢ å¢£å¢¯å¢¬å¢¥å¢¡å£¿å«¿å«´å«½å«·å«¶å¬å«¸å¬å«¹å¬å¬å¬å¬å±§å¶å¶å¶å¶å¶¢å¶å¶å¶ å¶å¶¡å¶å¶å¹©å¹å¹ å¹ç·³å»å»å»¡å½å¾²æææ¹æ±æ°æ¢æ"],["e5a1","æææ¯æ­æææªæ¡ææ¦æ³æ­æ®æ°ææ ææææææææ£ææ¨æ±ææ¶æºæ¹æ»æ²æ³æµæ°æ©æ²æ·æªæ¯æ¨æ¨æ¨æ§¥æ§¸æ¨æ§±æ§¤æ¨ æ§¿æ§¬æ§¢æ¨æ¨æ§¾æ¨§æ§²æ§®æ¨æ§·æ§§æ©æ¨æ§¦æ§»æ¨æ§¼æ§«æ¨æ¨æ¨æ¨¥æ¨æ§¶æ¨¦æ¨æ§´æ¨æ­æ®¥æ®£æ®¢æ®¦æ°æ°æ¯¿æ°æ½æ¼¦æ½¾æ¾æ¿æ¾"],["e640","æ¾æ¾æ¾æ½¢æ½æ¾æ½æ¾æ½¶æ½¬æ¾æ½æ½²æ½æ½æ½æ¾æ¾æ½æ¼æ½¡æ½«æ½½æ½§æ¾æ½æ¾æ½©æ½¿æ¾æ½£æ½·æ½ªæ½»ç²ç¯çç°ç çç©çµçç¥çç¤ç¡çªçç§ç³ççççççç ççç¡çç"],["e6a1","ç¢çççççç½ççç¼ç¹ççç¾ç¥ççççç£çç¨çççççççççç£ç¢»ç£ç£ç£ç£ç£ç£ç£ç£ç£ç¦ç¦¡ç¦ ç¦ç¦¢ç¦æ­¶ç¨¹çª²çª´çª³ç®·ç¯ç®¾ç®¬ç¯ç®¯ç®¹ç¯ç®µç³ç³ç³ç³ç··ç·ç·ªç·§ç·ç·¡ç¸ç·ºç·¦ç·¶ç·±ç·°ç·®ç·ç½¶ç¾¬ç¾°ç¾­ç¿­ç¿«ç¿ªç¿¬ç¿¦ç¿¨è¤è§è£è"],["e740","èèè¢èèèèèèèèèè¤è»èèè©èèèèèè§èè»è«èºèèè´èªè²èè·è«è³è¼èèªè©èè¾è¨èè®èè½èè¶è±è¦è§è¨è°è¯è¹èè è°èèè¯è¢"],["e7a1","èè£è¤è·è¡è³èèèèè¡èèèè­èªèèèèè¯è¬èºè®èè¥èè»èµè¢è§è©è¡è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¦¢è¦¤è¦£è§­è§°è§¬è«è«èª¸è«è«è«è«èª»è«èª¾è«è«è«è«èªºèª½è«è°¾è±è²è³¥è³è³è³¨è³è³è³§è¶ è¶è¶¡è¶è¸ è¸£è¸¥è¸¤è¸®è¸è¸è¸è¸è¸è¸¦è¸§"],["e840","è¸è¸è¸è¸è¸è¸è¸è¼¬è¼¤è¼è¼è¼ è¼£è¼è¼é³é°é¯é§é«é¯é«é©éªé²é¦é®ééééééééééééé¶éé±ééé©éééé¯éé¨éééé¦éééé éé§éé"],["e8a1","éµé¡éé´é¼é¬é«é®é°é¤é¢ééééééééééé é é ¦é ©é ¨é  é é §é¢²é¤é£ºé¤é¤é¤é¤é¤é§é§é§é§é§é§é§é§é§é§é§é§éª³é«¬é««é«³é«²é«±é­é­é­§é­´é­±é­¦é­¶é­µé­°é­¨é­¤é­¬é³¼é³ºé³½é³¿é³·é´é´é³¹é³»é´é´é´éºé»é¼é¼ååååååå´å¡å°å å®"],["e940","å³å¦å£å­å²åå·ååå£å¢½å£å¢¿å¢ºå£å¢¼å£å¬å¬å¬å¬¡å¬å¬å¬å¬å¬¨å¬å¬ å¬å¯¯å¶¬å¶±å¶©å¶§å¶µå¶°å¶®å¶ªå¶¨å¶²å¶­å¶¯å¶´å¹§å¹¨å¹¦å¹¯å»©å»§å»¦å»¨å»¥å½å¾¼ææ¨æææ´ææææº"],["e9a1","æ¿æ¸æææææææ½ææææ³ææ³æ¿æ¼æ¢ææ¾æææææ½æ»æºææ£æ¨´æ©¦æ©æ©§æ¨²æ©¨æ¨¾æ©æ©­æ©¶æ©æ©æ¨¨æ©æ¨»æ¨¿æ©æ©ªæ©¤æ©æ©æ©æ©¯æ©©æ© æ¨¼æ©æ©æ©æ©æ©æ©æ­æ­æ­æ®§æ®ªæ®«æ¯æ¯æ°æ°æ°æ¾­æ¿æ¾£æ¿æ¾¼æ¿æ¿æ½æ¿æ¾½æ¾æ¿æ¾¨çæ¾¥æ¾®æ¾ºæ¾¬æ¾ªæ¿æ¾¿æ¾¸"],["ea40","æ¾¢æ¿æ¾«æ¿æ¾¯æ¾²æ¾°ççç¿ç¸ççççççççç½çç¼çççççç©ç¦ç§ç¬ç¥ç«çªç¿çç çççç¡ççç¯ç­ç±ç½ç³ç¼çµç²ç°ç»ç¦ççç¡ççç¢ç£çç"],["eaa1","çç£ç£©ç£¥ç£ªç£ç££ç£ç£¡ç£¢ç£­ç£ç£ ç¦¤ç©ç©ç©çª¶çª¸çªµçª±çª·ç¯ç¯£ç¯§ç¯ç¯ç¯¥ç¯ç¯¨ç¯¹ç¯ç¯ªç¯¢ç¯ç¯«ç¯ç¯ç³ç³ç³ç³ç³ç¸ç¸¡ç¸ç¸ç¸ç¸ ç¸ç¸ç¸ç¸ç¸ç¸¢ç¸ç¸ç¸ç¸ç¸ç¸¥ç¸¤ç½ç½»ç½¼ç½ºç¾±ç¿¯èªè©è¬è±è¦è®è¹èµè«è°è¬è´è²è·è§è²èèèèèè«èèè¡è"],["eb40","èèè¤èè¢èèèè£è¾èè±èè®èµèè§è èè¦èèè¥è¬è£è¥è¤èèèèèèèèèè¹èè£èèèèèèèèèè¤è¤¦è¤°è¤­è¤®è¤§è¤±è¤¢è¤©è¤£è¤¯è¤¬è¤è§±è« "],["eba1","è«¢è«²è«´è«µè«è¬è«¤è«è«°è«è«è«¡è«¨è«¿è«¯è«»è²è²è²è³µè³®è³±è³°è³³èµ¬èµ®è¶¥è¶§è¸³è¸¾è¸¸è¹è¹è¸¶è¸¼è¸½è¹è¸°è¸¿èº½è¼¶è¼®è¼µè¼²è¼¹è¼·è¼´é¶é¹é»ééºé³éµé¶éééééé§ééééééºé¸é¼éé£éééé­éééééºé¥éé¹é·é´éé¤é¿é©é¹éµéªéé"],["ec40","éé¾ééé»éé¼éé¾é¹éºé¶é¿éµé½é©éééééééé°é¸é µé ¯é ²é¤¤é¤é¤§é¤©é¦é§®é§¬é§¥é§¤é§°é§£é§ªé§©é§§éª¹éª¿éª´éª»é«¶é«ºé«¹é«·é¬³é®é®é®é­¼é­¾é­»é®é®é®é®é­ºé®"],["eca1","é­½é®é´¥é´é´ é´é´é´©é´é´é´¢é´é´é´éºéºéºéº®éº­é»é»é»ºé¼é¼½å¦å¥å¢å¤å å©å´ååååååå¾åå¿åå£å£å£å£å¬­å¬¥å¬²å¬£å¬¬å¬§å¬¦å¬¯å¬®å­»å¯±å¯²å¶·å¹¬å¹ªå¾¾å¾»ææµæ¼æ§æ æ¥æ¤æ¨ææ¯æ©æ£æ«æ¤æ¨æææ¶æææªæªæªæª¥æªæªæªæª¡æªæªæªæª"],["ed40","æªæªæª¨æª¤æªæ©¿æª¦æªæªæªæªæ­æ®­æ°æ¿æ¾©æ¿´æ¿æ¿£æ¿æ¿­æ¿§æ¿¦æ¿æ¿²æ¿æ¿¢æ¿¨ç¡ç±ç¨ç²ç¤ç°ç¢ç³ç®ç¯çç²ç«ççªç­ç±ç¥ç¯çççççççççç¤ç©çµç«ç²ç·ç¶"],["eda1","ç´ç±ç¨ç°ç£³ç£½ç¤ç£»ç£¼ç£²ç¤ç£¹ç£¾ç¤ç¦«ç¦¨ç©ç©ç©ç©ç©ç©çª¾ç«ç«ç°ç°ç¯²ç°ç¯¿ç¯»ç°ç¯´ç°ç¯³ç°ç°ç°ç°ç¯¸ç¯½ç°ç¯°ç¯±ç°ç°ç³¨ç¸­ç¸¼ç¹ç¸³é¡ç¸¸ç¸ªç¹ç¹ç¹ç¸©ç¹ç¸°ç¸»ç¸¶ç¹ç¸ºç½ç½¿ç½¾ç½½ç¿´ç¿²è¬è»èèèèèè¼è©èèèèèèè§èè èè£è»è¤èè"],["ee40","è·è¼èè¡èºè¸èèèèèèèèè¢èèèè¹è¶èèèè¨è¾èªè­èè°è¬è¹èµè¼è®èèèèè·è¯èèè´è¶è¿è¸è½èè²è¤µè¤³è¤¼è¤¾è¥è¥è¤·è¥è¦­è¦¯è¦®è§²è§³è¬"],["eea1","è¬è¬è¬è¬è¬è¬¢è¬è¬è¬è¬è¬è¬è¬è¬è¬è¬è±è±°è±²è±±è±¯è²è²è³¹èµ¯è¹è¹è¹è¹è¹è¹è½è½éé¾é¸éé¢éééé¡éé é¡éé¯é¤ééé¼ééé¶éééé é­éééªé¹ééééé±é·é»é¡éé£é§ééééééééé·é®é°é¬é éééééé¡é"],["ef40","ééééé±é¡é¡é¡é¡é¡é¡é¤¥é¤«é¤¬é¤ªé¤³é¤²é¤¯é¤­é¤±é¤°é¦é¦£é¦¡é¨é§ºé§´é§·é§¹é§¸é§¶é§»é§½é§¾é§¼é¨éª¾é«¾é«½é¬é«¼é­é®é®¨é®é®é®¦é®¡é®¥é®¤é®é®¢é® é®¯é´³éµéµ§é´¶é´®é´¯é´±é´¸é´°"],["efa1","éµéµéµé´¾é´·éµé´½ç¿µé´­éºéºéºéº°é»é»é»»é»¿é¼¤é¼£é¼¢é½é¾ å±å­å®ååååååå¥°å¬¼å±©å±ªå·å¹­å¹®æææ­æ®æ±æªæ°æ«ææ©æ¿ææ½æ¸æææ¼ææææææ«æª¹æª½æ«¡æ«æªºæª¶æª·æ«æª´æª­æ­æ¯æ°çççççççæ¿¿çæ¿»ç¦æ¿¼æ¿·ççç¿ç¹çç½ç¶"],["f040","ç¸ççµçç¾ç¶ç»ççççç¤çççççç¦ç½ç¬ççºç£¿ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¦­ç¦¬ç©ç°ç°©ç°ç° ç°ç°­ç°ç°¦ç°¨ç°¢ç°¥ç°°ç¹ç¹ç¹ç¹£ç¹ç¹¢ç¹ç¹ç¹ ç¹ç¹ç¾µç¾³ç¿·ç¿¸èµèè"],["f0a1","èèèè´èèèèè³èµè½èèè¿èèèèè±è¶èè¤è¸è·è¾è©è§è¦è¢èè«èªè¥èè³è¤èèèè­èè£è¤èèè è´è¨èè¥è¥è¥è¥è¥è¥è¥è¥è¬ªè¬§è¬£è¬³è¬°è¬µè­è¬¯è¬¼è¬¾è¬±è¬¥è¬·è¬¦è¬¶è¬®è¬¤è¬»è¬½è¬ºè±è±µè²è²è²è³¾è´è´è´è¹è¹¢è¹ è¹è¹è¹è¹¥è¹§"],["f140","è¹è¹è¹¡è¹è¹©è¹è½è½è½è½é¨éºé»é¾é¨é¥é§é¯éªéµééé·éééé§ééªéé¦éééééé±éé²é¤é¨é´é£é¥éééé³ééå·éééé£é¢é¥é¬é®é¨é«é¤éª"],["f1a1","é¢é¥éééééºé¡é¡é¡é¢¸é¥é¤¼é¤ºé¨é¨é¨é¨é¨é¨é¨é¨é¨é¨é«é«é¬é¬é¬é¬©é¬µé­é­é­é¯é¯é¯é®¿é¯é®µé®¸é¯é®¶é¯é®¹é®½éµéµéµéµéµéµéµéµéµéµéµéµéµéµéµéºéºé»é¼é¼é¼é¼¥é¼«é¼ªé¼©é¼¨é½é½å´åµåå·å´å«å­å¦å§åªå¬å£å£å£å¤å¬½å¬¾å¬¿å·å¹°"],["f240","å¾¿æ»æææææææææææ«§æ« æ«æ«æ«æ«æ«æ«æ«æ««æ«æ«æ«æ­ æ®°æ°çç§ç çç«ç¡ç¢ç£ç©çç¤ççªçççççç¥ç¦ç¤ç£ç¡ççç·ççç çççç±ç¤ç¤"],["f2a1","ç¤¡ç¤ç¤ç¤ç¦°ç©§ç©¨ç°³ç°¼ç°¹ç°¬ç°»ç³¬ç³ªç¹¶ç¹µç¹¸ç¹°ç¹·ç¹¯ç¹ºç¹²ç¹´ç¹¨ç½ç½ç¾ç¾ç¾·ç¿½ç¿¾è¸èèè¤è¡è£è«è±è­èè¡è¨èèè¬è²è¸èèè£èèè°è¦è¯èè¢è èºè è¶è·è è è è è¼è è¿è è è¥¢è¥è¥è¥è¥¡è¥è¥è¥è¥è¦è¦·è¦¶è§¶è­è­è­è­è­è­è­è­è­"],["f340","è­è­è­è­è±è±·è±¶è²è´è´è´è¶¬è¶ªè¶­è¶«è¹­è¹¸è¹³è¹ªè¹¯è¹»è»è½è½è½è½è½è¾´éé¿é°é­ééééééé¹é¬ééé©é¦ééé®é£éééééé§é½ééé¡é©é«é¬é¨é¦"],["f3a1","é³é·é¶éééé¡é¡é¡é¡é¢¿é¢½é¢»é¢¾é¥é¥é¥é¦¦é¦§é¨é¨é¨¥é¨é¨¤é¨é¨¢é¨ é¨§é¨£é¨é¨é¨é«é¬é¬é¬é¬é¬·é¯ªé¯«é¯ é¯é¯¤é¯¦é¯¢é¯°é¯é¯é¯¬é¯é¯é¯¥é¯é¯¡é¯éµ·é¶é¶é¶é¶éµ±é¶éµ¸é¶é¶é¶éµ½éµ«éµ´éµµéµ°éµ©é¶éµ³éµ»é¶éµ¯éµ¹éµ¿é¶éµ¨éºéºé»é»¼é¼­é½é½é½é½é½é½å·å²"],["f440","åµå³å££å­å·å·å»®å»¯å¿å¿æ¹ææææææ¨æ£æ¤æ«³æ«°æ«ªæ«¨æ«¹æ«±æ«®æ«¯ç¼çµç¯ç·ç´ç±çç¸ç¿çºç¹çç»ç³çççç¨ç½ç¼çºç«çªç¾ç­ççççç²ç¤¥ç¤£ç¤§ç¤¨ç¤¤ç¤©"],["f4a1","ç¦²ç©®ç©¬ç©­ç«·ç±ç±ç±ç±ç±ç³®ç¹»ç¹¾çºçºç¾ºç¿¿è¹èèèè¨è©è¢è¿èè¾èèè¶èèèèè½è è è è è è è¥£è¥¦è¦¹è§·è­ è­ªè­è­¨è­£è­¥è­§è­­è¶®èºèºèºè½è½è½è½è½è½éééé·éµé²é³ééé»é ééé¾ééé¨éééµéé·éééééºéé¸éé¿"],["f540","é¼éé¶éééé éé®é¯é¹é»é½é¾é¡ é¡¢é¡£é¡é£é£é¥é¥é¥é¥é¥é¥é¨²é¨´é¨±é¨¬é¨ªé¨¶é¨©é¨®é¨¸é¨­é«é«é«é¬é¬é¬é°é°é¯·é°é°é¯¸é±é°é°é°é°é°é°é¶é¶é¶¤é¶é¶é¶é¶é¶"],["f5a1","é¶ é¶é¶é¶ªé¶é¶¡é¶é¶¢é¶¨é¶é¶£é¶¿é¶©é¶é¶¦é¶§éºéºéºé»¥é»¤é»§é»¦é¼°é¼®é½é½ é½é½é½é¾åºå¹åååå½å¾å­å­å·å·å»±æ½ææ¬æ«¼æ¬æ«¸æ¬ççççççççççç¾ççªçç¤­ç¤±ç¤¯ç±ç±ç³²çºçºçºçºçºçºç½ç¾»è°èèèªè¦èè£èèè§è®è¡è è©èè¥"],["f640","è ©è è è  è ¤è è «è¡è¥­è¥©è¥®è¥«è§ºè­¹è­¸è­è­ºè­»è´è´è¶¯èºèºè½è½è½éééé¹é¿é»é¶é©é½é¼é°é¹éªé·é¬éé±é¥é¤é£éµéºé¿é¡é¡¤é£é£é£é¥é¥é¨¹é¨½é©é©é©é©é¨º"],["f6a1","é¨¿é«é¬é¬é¬é¬é¬ºé­é°«é°é°é°¬é°£é°¨é°©é°¤é°¡é¶·é¶¶é¶¼é·é·é·é·é¶¾é·é·é¶»é¶µé·é¶¹é¶ºé¶¬é·é¶±é¶­é·é¶³é·é¶²é¹ºéºé»«é»®é»­é¼é¼é¼é¼±é½é½¥é½¤é¾äº¹åååå¥±å­å­å·å·å»²æ¡æ æ¦æ¢æ¬æ¬æ¬æ°ççççççç©ç¿ççççç­ç­ç¤µç¦´ç©°ç©±ç±ç±ç±ç±ç±"],["f740","ç³´ç³±çºç½ç¾èè«è´èµè³è¬è²è¶è ¬è ¨è ¦è ªè ¥è¥±è¦¿è¦¾è§»è­¾è®è®è®è®è­¿è´èºèºèºèºèºèºèºè½ è½¢éééééééééééé¿é£é¡ªé¡©é£é¥é¥é©é©é©é©é©é©é©"],["f7a1","é©é©é©é«é¬é¬«é¬»é­é­é±é±é°¿é±é°¹é°³é±é°¼é°·é°´é°²é°½é°¶é·é·é·é·é·é·é·é·é·é·©é·é·é·é·µé·é·éº¶é»°é¼µé¼³é¼²é½é½«é¾é¾¢å½åå£¨å£§å¥²å­å·è ¯å½ææææ©æ¥ææ«æ¬æ¬æ¬æ¯ççç¢çççç°çç±§ç±¦çºè¬èºèè¹è¼è±è»è¾è °è ²è ®è ³è¥¶è¥´è¥³è§¾"],["f840","è®è®è®è®è±è´èºè½¤è½£é¼é¢ééééééé é©é©é¬é¬é¬ é±é±é±é±é±é±é±é±é±é±é·»é··é·¯é·£é·«é·¸é·¤é·¶é·¡é·®é·¦é·²é·°é·¢é·¬é·´é·³é·¨é·­é»é»é»²é»³é¼é¼é¼¸é¼·é¼¶é½é½"],["f8a1","é½±é½°é½®é½¯ååå­å±­æ­æ­æ®æ¬çç¡çç ç£çç¥çç¤¸ç¦·ç¦¶ç±ªçºç¾è­èè ¸è ·è µè¡è®è®èºèºèº èºé¾é½éé«é¨é©é¥ééééé¥é©é«é­é±£é±§é±¦é±¢é±é± é¸é·¾é¸é¸é¸é¸é¸é¸é¸é·¿é·½é¸éº é¼é½é½´é½µé½¶åæ®æ¸æ¬æ¬æ¬æ¬ç¢ç¦çªççç¤¹ç±©ç±«ç³¶çº"],["f940","çºçºçºè è¡èèèè¥¹è¥ºè¥¼è¥»è§¿è®è®èº¥èº¤èº£é®é­é¯é±é³éé¡²é¥é±¨é±®é±­é¸é¸é¸é¸é¸é¸éº¡é»µé¼é½é½¸é½»é½ºé½¹åç¦ç±¯è ¼è¶²èº¦éé´é¸é¶éµé© é±´é±³é±±é±µé¸é¸é»¶é¼"],["f9a1","é¾¤ç¨ç¥ç³·èªè ¾è ½è ¿è®è²èº©è»éé¡³é¡´é£é¥¡é¦«é©¤é©¦é©§é¬¤é¸é¸é½ææ¬ç§èèº¨éééé©©é©¨é¬®é¸ç©èè®éé±¹éº·çµé©«é±ºé¸ç©çªéº¤é½¾é½é¾ç¢é¹è£å¢»æç²§å«ºââ¦ââ â¬â£ââ©âââ¤âââªâ¡ââ§âââ¥âââ«â¢ââ¨ââââ­â®â°â¯â"]]},function(e,t){e.exports=require("child_process")},function(e,t,i){var o=i(2);e.exports=function(e,t,i,s){var r=o(e).getTime(),n=o(t).getTime(),a=o(i).getTime(),c=o(s).getTime();if(r>n||a>c)throw new Error("The start of the range cannot be after the end of the range");return r<c&&a<n}},function(e,t,i){var o=i(2);e.exports=function(e,t){if(!(t instanceof Array))throw new TypeError(toString.call(t)+" is not an instance of Array");var i,s,r=o(e).getTime();return t.forEach(function(e,t){var n=o(e),a=Math.abs(r-n.getTime());(void 0===i||a<s)&&(i=t,s=a)}),i}},function(e,t,i){var o=i(2);e.exports=function(e,t){if(!(t instanceof Array))throw new TypeError(toString.call(t)+" is not an instance of Array");var i,s,r=o(e).getTime();return t.forEach(function(e){var t=o(e),n=Math.abs(r-t.getTime());(void 0===i||n<s)&&(i=t,s=n)}),i}},function(e,t,i){var o=i(5),s=6e4,r=6048e5;e.exports=function(e,t){var i=o(e),n=o(t),a=i.getTime()-i.getTimezoneOffset()*s,c=n.getTime()-n.getTimezoneOffset()*s;return Math.round((a-c)/r)}},function(e,t,i){var o=i(42),s=i(2);e.exports=function(e,t){var i=s(e),r=s(t);return 4*(i.getFullYear()-r.getFullYear())+(o(i)-o(r))}},function(e,t,i){var o=i(14),s=6e4,r=6048e5;e.exports=function(e,t,i){var n=o(e,i),a=o(t,i),c=n.getTime()-n.getTimezoneOffset()*s,l=a.getTime()-a.getTimezoneOffset()*s;return Math.round((c-l)/r)}},function(e,t,i){var o=i(17),s=36e5;e.exports=function(e,t){var i=o(e,t)/s;return i>0?Math.floor(i):Math.ceil(i)}},function(e,t,i){var o=i(2),s=i(40),r=i(11),n=i(45);e.exports=function(e,t){var i=o(e),a=o(t),c=r(i,a),l=Math.abs(s(i,a));return i=n(i,c*l),c*(l-(r(i,a)===-c))}},function(e,t,i){var o=i(17),s=6e4;e.exports=function(e,t){var i=o(e,t)/s;return i>0?Math.floor(i):Math.ceil(i)}},function(e,t,i){var o=i(24);e.exports=function(e,t){var i=o(e,t)/3;return i>0?Math.floor(i):Math.ceil(i)}},function(e,t,i){var o=i(44);e.exports=function(e,t){var i=o(e,t)/7;return i>0?Math.floor(i):Math.ceil(i)}},function(e,t,i){var o=i(2),s=i(43),r=i(11);e.exports=function(e,t){var i=o(e),n=o(t),a=r(i,n),c=Math.abs(s(i,n));return i.setFullYear(i.getFullYear()-a*c),a*(c-(r(i,n)===-a))}},function(e,t){e.exports=function(){var e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};return{localize:function(t,i,o){var s;return o=o||{},s="string"==typeof e[t]?e[t]:1===i?e[t].one:e[t].other.replace("{{count}}",i),o.addSuffix?o.comparison>0?"in "+s:s+" ago":s}}}},function(e,t,i){var o=i(85);e.exports=function(){var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],t=["January","February","March","April","May","June","July","August","September","October","November","December"],i=["Su","Mo","Tu","We","Th","Fr","Sa"],s=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],r=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],n=["AM","PM"],a=["am","pm"],c=["a.m.","p.m."],l={MMM:function(t){return e[t.getMonth()]},MMMM:function(e){return t[e.getMonth()]},dd:function(e){return i[e.getDay()]},ddd:function(e){return s[e.getDay()]},dddd:function(e){return r[e.getDay()]},A:function(e){return e.getHours()/12>=1?n[1]:n[0]},a:function(e){return e.getHours()/12>=1?a[1]:a[0]},aa:function(e){return e.getHours()/12>=1?c[1]:c[0]}};return["M","D","DDD","d","Q","W"].forEach(function(e){l[e+"o"]=function(t,i){return function(e){var t=e%100;if(t>20||t<10)switch(t%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"}(i[e](t))}}),{formatters:l,formattingTokensRegExp:o(l)}}},function(e,t){var i=["M","MM","Q","D","DD","DDD","DDDD","d","E","W","WW","YY","YYYY","GG","GGGG","H","HH","h","hh","m","mm","s","ss","S","SS","SSS","Z","ZZ","X","x"];e.exports=function(e){var t=[];for(var o in e)e.hasOwnProperty(o)&&t.push(o);var s=i.concat(t).sort().reverse();return new RegExp("(\\[[^\\[]*\\])|(\\\\)?("+s.join("|")+"|.)","g")}},function(e,t,i){var o=i(23),s=i(2),r=i(25),n=i(13),a=1440,c=43200,l=525600;e.exports=function(e,t,i){var h=i||{},d=o(e,t),m=h.locale,u=n.distanceInWords.localize;m&&m.distanceInWords&&m.distanceInWords.localize&&(u=m.distanceInWords.localize);var g,p,f,v={addSuffix:Boolean(h.addSuffix),comparison:d};d>0?(g=s(e),p=s(t)):(g=s(t),p=s(e));var _=Math[h.partialMethod?String(h.partialMethod):"floor"],w=r(p,g),b=p.getTimezoneOffset()-g.getTimezoneOffset(),C=_(w/60)-b;if("s"===(f=h.unit?String(h.unit):C<1?"s":C<60?"m":C<a?"h":C<c?"d":C<l?"M":"Y"))return u("xSeconds",w,v);if("m"===f)return u("xMinutes",C,v);if("h"===f)return u("xHours",_(C/60),v);if("d"===f)return u("xDays",_(C/a),v);if("M"===f)return u("xMonths",_(C/c),v);if("Y"===f)return u("xYears",_(C/l),v);throw new Error("Unknown unit: "+f)}},function(e,t,i){var o=i(46);e.exports=function(e,t){return o(Date.now(),e,t)}},function(e,t,i){var o=i(2);e.exports=function(e,t,i){var s=o(e),r=void 0!==i?i:1,n=o(t).getTime();if(s.getTime()>n)throw new Error("The first date cannot be after the second date");var a=[],c=s;for(c.setHours(0,0,0,0);c.getTime()<=n;)a.push(o(c)),c.setDate(c.getDate()+r);return a}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setMinutes(59,59,999),t}},function(e,t,i){var o=i(47);e.exports=function(e){return o(e,{weekStartsOn:1})}},function(e,t,i){var o=i(4),s=i(5);e.exports=function(e){var t=o(e),i=new Date(0);i.setFullYear(t+1,0,4),i.setHours(0,0,0,0);var r=s(i);return r.setMilliseconds(r.getMilliseconds()-1),r}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setSeconds(59,999),t}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getMonth(),s=i-i%3+3;return t.setMonth(s,0),t.setHours(23,59,59,999),t}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setMilliseconds(999),t}},function(e,t,i){var o=i(26);e.exports=function(){return o(new Date)}},function(e,t){e.exports=function(){var e=new Date,t=e.getFullYear(),i=e.getMonth(),o=e.getDate(),s=new Date(0);return s.setFullYear(t,i,o+1),s.setHours(23,59,59,999),s}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getFullYear();return t.setFullYear(i+1,0,0),t.setHours(23,59,59,999),t}},function(e,t){e.exports=function(){var e=new Date,t=e.getFullYear(),i=e.getMonth(),o=e.getDate(),s=new Date(0);return s.setFullYear(t,i,o-1),s.setHours(23,59,59,999),s}},function(e,t,i){var o=i(49),s=i(27),r=i(4),n=i(2),a=i(51),c=i(13);var l={M:function(e){return e.getMonth()+1},MM:function(e){return d(e.getMonth()+1,2)},Q:function(e){return Math.ceil((e.getMonth()+1)/3)},D:function(e){return e.getDate()},DD:function(e){return d(e.getDate(),2)},DDD:function(e){return o(e)},DDDD:function(e){return d(o(e),3)},d:function(e){return e.getDay()},E:function(e){return e.getDay()||7},W:function(e){return s(e)},WW:function(e){return d(s(e),2)},YY:function(e){return d(e.getFullYear(),4).substr(2)},YYYY:function(e){return d(e.getFullYear(),4)},GG:function(e){return String(r(e)).substr(2)},GGGG:function(e){return r(e)},H:function(e){return e.getHours()},HH:function(e){return d(e.getHours(),2)},h:function(e){var t=e.getHours();return 0===t?12:t>12?t%12:t},hh:function(e){return d(l.h(e),2)},m:function(e){return e.getMinutes()},mm:function(e){return d(e.getMinutes(),2)},s:function(e){return e.getSeconds()},ss:function(e){return d(e.getSeconds(),2)},S:function(e){return Math.floor(e.getMilliseconds()/100)},SS:function(e){return d(Math.floor(e.getMilliseconds()/10),2)},SSS:function(e){return d(e.getMilliseconds(),3)},Z:function(e){return h(e.getTimezoneOffset(),":")},ZZ:function(e){return h(e.getTimezoneOffset())},X:function(e){return Math.floor(e.getTime()/1e3)},x:function(e){return e.getTime()}};function h(e,t){t=t||"";var i=e>0?"-":"+",o=Math.abs(e),s=o%60;return i+d(Math.floor(o/60),2)+t+d(s,2)}function d(e,t){for(var i=Math.abs(e).toString();i.length<t;)i="0"+i;return i}e.exports=function(e,t,i){var o=t?String(t):"YYYY-MM-DDTHH:mm:ss.SSSZ",s=(i||{}).locale,r=c.format.formatters,h=c.format.formattingTokensRegExp;s&&s.format&&s.format.formatters&&(r=s.format.formatters,s.format.formattingTokensRegExp&&(h=s.format.formattingTokensRegExp));var d=n(e);return a(d)?function(e,t,i){var o,s,r,n=e.match(i),a=n.length;for(o=0;o<a;o++)s=t[n[o]]||l[n[o]],n[o]=s||((r=n[o]).match(/\[[\s\S]/)?r.replace(/^\[|]$/g,""):r.replace(/\\/g,""));return function(e){for(var t="",i=0;i<a;i++)n[i]instanceof Function?t+=n[i](e,l):t+=n[i];return t}}(o,r,h)(d):"Invalid Date"}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getDate()}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getDay()}},function(e,t,i){var o=i(52);e.exports=function(e){return o(e)?366:365}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getHours()}},function(e,t,i){var o=i(10),s=i(22),r=6048e5;e.exports=function(e){var t=o(e),i=o(s(t,60)).valueOf()-t.valueOf();return Math.round(i/r)}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getMilliseconds()}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getMinutes()}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getMonth()}},function(e,t,i){var o=i(2),s=864e5;e.exports=function(e,t,i,r){var n=o(e).getTime(),a=o(t).getTime(),c=o(i).getTime(),l=o(r).getTime();if(n>a||c>l)throw new Error("The start of the range cannot be after the end of the range");if(!(n<l&&c<a))return 0;var h=(l>a?a:l)-(c<n?n:c);return Math.ceil(h/s)}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getSeconds()}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getFullYear()}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()>s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()<s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()===s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){return 1===o(e).getDate()}},function(e,t,i){var o=i(2);e.exports=function(e){return 5===o(e).getDay()}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getTime()>(new Date).getTime()}},function(e,t,i){var o=i(2),s=i(26),r=i(48);e.exports=function(e){var t=o(e);return s(t).getTime()===r(t).getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){return 1===o(e).getDay()}},function(e,t,i){var o=i(2);e.exports=function(e){return o(e).getTime()<(new Date).getTime()}},function(e,t,i){var o=i(6);e.exports=function(e,t){var i=o(e),s=o(t);return i.getTime()===s.getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){return 6===o(e).getDay()}},function(e,t,i){var o=i(2);e.exports=function(e){return 0===o(e).getDay()}},function(e,t,i){var o=i(54);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(56);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(57);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(58);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(60);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(61);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(63);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(28);e.exports=function(e,t){return o(new Date,e,t)}},function(e,t,i){var o=i(65);e.exports=function(e){return o(new Date,e)}},function(e,t,i){var o=i(2);e.exports=function(e){return 4===o(e).getDay()}},function(e,t,i){var o=i(6);e.exports=function(e){return o(e).getTime()===o(new Date).getTime()}},function(e,t,i){var o=i(6);e.exports=function(e){var t=new Date;return t.setDate(t.getDate()+1),o(e).getTime()===o(t).getTime()}},function(e,t,i){var o=i(2);e.exports=function(e){return 2===o(e).getDay()}},function(e,t,i){var o=i(2);e.exports=function(e){return 3===o(e).getDay()}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e).getDay();return 0===t||6===t}},function(e,t,i){var o=i(2);e.exports=function(e,t,i){var s=o(e).getTime(),r=o(t).getTime(),n=o(i).getTime();if(r>n)throw new Error("The start of the range cannot be after the end of the range");return s>=r&&s<=n}},function(e,t,i){var o=i(6);e.exports=function(e){var t=new Date;return t.setDate(t.getDate()-1),o(e).getTime()===o(t).getTime()}},function(e,t,i){var o=i(66);e.exports=function(e){return o(e,{weekStartsOn:1})}},function(e,t,i){var o=i(4),s=i(5);e.exports=function(e){var t=o(e),i=new Date(0);i.setFullYear(t+1,0,4),i.setHours(0,0,0,0);var r=s(i);return r.setDate(r.getDate()-1),r}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getMonth();return t.setFullYear(t.getFullYear(),i+1,0),t.setHours(0,0,0,0),t}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getMonth(),s=i-i%3+3;return t.setMonth(s,0),t.setHours(0,0,0,0),t}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e),i=t.getFullYear();return t.setFullYear(i+1,0,0),t.setHours(0,0,0,0),t}},function(e,t,i){var o=i(2);e.exports=function(){var e=Array.prototype.slice.call(arguments).map(function(e){return o(e)}),t=Math.max.apply(null,e);return new Date(t)}},function(e,t,i){var o=i(2);e.exports=function(){var e=Array.prototype.slice.call(arguments).map(function(e){return o(e)}),t=Math.min.apply(null,e);return new Date(t)}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setDate(s),i}},function(e,t,i){var o=i(2),s=i(8);e.exports=function(e,t,i){var r=i&&Number(i.weekStartsOn)||0,n=o(e),a=Number(t),c=n.getDay();return s(n,((a%7+7)%7<r?7:0)+a-c)}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setMonth(0),i.setDate(s),i}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setHours(s),i}},function(e,t,i){var o=i(2),s=i(8),r=i(53);e.exports=function(e,t){var i=o(e),n=Number(t),a=r(i);return s(i,n-a)}},function(e,t,i){var o=i(2),s=i(27);e.exports=function(e,t){var i=o(e),r=Number(t),n=s(i)-r;return i.setDate(i.getDate()-7*n),i}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setMilliseconds(s),i}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setMinutes(s),i}},function(e,t,i){var o=i(2),s=i(67);e.exports=function(e,t){var i=o(e),r=Number(t)-(Math.floor(i.getMonth()/3)+1);return s(i,i.getMonth()+3*r)}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setSeconds(s),i}},function(e,t,i){var o=i(2);e.exports=function(e,t){var i=o(e),s=Number(t);return i.setFullYear(s),i}},function(e,t,i){var o=i(2);e.exports=function(e){var t=o(e);return t.setDate(1),t.setHours(0,0,0,0),t}},function(e,t,i){var o=i(6);e.exports=function(){return o(new Date)}},function(e,t){e.exports=function(){var e=new Date,t=e.getFullYear(),i=e.getMonth(),o=e.getDate(),s=new Date(0);return s.setFullYear(t,i,o+1),s.setHours(0,0,0,0),s}},function(e,t){e.exports=function(){var e=new Date,t=e.getFullYear(),i=e.getMonth(),o=e.getDate(),s=new Date(0);return s.setFullYear(t,i,o-1),s.setHours(0,0,0,0),s}},function(e,t,i){var o=i(8);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(33);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(9);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(36);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(16);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(37);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(38);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(22);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){var o=i(39);e.exports=function(e,t){var i=Number(t);return o(e,-i)}},function(e,t,i){function o(e,t){this.encoder=e,this.addBOM=!0}function s(e,t){this.decoder=e,this.pass=!1,this.options=t||{}}t.PrependBOM=o,o.prototype.write=function(e){return this.addBOM&&(e="\ufeff"+e,this.addBOM=!1),this.encoder.write(e)},o.prototype.end=function(){return this.encoder.end()},t.StripBOM=s,s.prototype.write=function(e){var t=this.decoder.write(e);return this.pass||!t?t:("\ufeff"===t[0]&&(t=t.slice(1),"function"==typeof this.options.stripBOM&&this.options.stripBOM()),this.pass=!0,t)},s.prototype.end=function(){return this.decoder.end()}},function(e,t,i){for(var o=[i(174),i(176),i(177),i(178),i(179),i(180),i(181),i(182)],s=0;s<o.length;s++){e=o[s];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}},function(e,t,i){var o=i(7).Buffer;function s(e,t){this.enc=e.encodingName,this.bomAware=e.bomAware,"base64"===this.enc?this.encoder=c:"cesu8"===this.enc&&(this.enc="utf8",this.encoder=l,"ð©"!==o.from("eda0bdedb2a9","hex").toString()&&(this.decoder=h,this.defaultCharUnicode=t.defaultCharUnicode))}e.exports={utf8:{type:"_internal",bomAware:!0},cesu8:{type:"_internal",bomAware:!0},unicode11utf8:"utf8",ucs2:{type:"_internal",bomAware:!0},utf16le:"ucs2",binary:{type:"_internal"},base64:{type:"_internal"},hex:{type:"_internal"},_internal:s},s.prototype.encoder=a,s.prototype.decoder=n;var r=i(175).StringDecoder;function n(e,t){r.call(this,t.enc)}function a(e,t){this.enc=t.enc}function c(e,t){this.prevStr=""}function l(e,t){}function h(e,t){this.acc=0,this.contBytes=0,this.accBytes=0,this.defaultCharUnicode=t.defaultCharUnicode}r.prototype.end||(r.prototype.end=function(){}),n.prototype=r.prototype,a.prototype.write=function(e){return o.from(e,this.enc)},a.prototype.end=function(){},c.prototype.write=function(e){var t=(e=this.prevStr+e).length-e.length%4;return this.prevStr=e.slice(t),e=e.slice(0,t),o.from(e,"base64")},c.prototype.end=function(){return o.from(this.prevStr,"base64")},l.prototype.write=function(e){for(var t=o.alloc(3*e.length),i=0,s=0;s<e.length;s++){var r=e.charCodeAt(s);r<128?t[i++]=r:r<2048?(t[i++]=192+(r>>>6),t[i++]=128+(63&r)):(t[i++]=224+(r>>>12),t[i++]=128+(r>>>6&63),t[i++]=128+(63&r))}return t.slice(0,i)},l.prototype.end=function(){},h.prototype.write=function(e){for(var t=this.acc,i=this.contBytes,o=this.accBytes,s="",r=0;r<e.length;r++){var n=e[r];128!=(192&n)?(i>0&&(s+=this.defaultCharUnicode,i=0),n<128?s+=String.fromCharCode(n):n<224?(t=31&n,i=1,o=1):n<240?(t=15&n,i=2,o=1):s+=this.defaultCharUnicode):i>0?(t=t<<6|63&n,o++,0===--i&&(s+=2===o&&t<128&&t>0?this.defaultCharUnicode:3===o&&t<2048?this.defaultCharUnicode:String.fromCharCode(t))):s+=this.defaultCharUnicode}return this.acc=t,this.contBytes=i,this.accBytes=o,s},h.prototype.end=function(){var e=0;return this.contBytes>0&&(e+=this.defaultCharUnicode),e}},function(e,t){e.exports=require("string_decoder")},function(e,t,i){var o=i(7).Buffer;function s(){}function r(){}function n(){this.overflowByte=-1}function a(e,t){this.iconv=t}function c(e,t){void 0===(e=e||{}).addBOM&&(e.addBOM=!0),this.encoder=t.iconv.getEncoder("utf-16le",e)}function l(e,t){this.decoder=null,this.initialBytes=[],this.initialBytesLen=0,this.options=e||{},this.iconv=t.iconv}function h(e,t){var i=t||"utf-16le";if(e.length>=2)if(254==e[0]&&255==e[1])i="utf-16be";else if(255==e[0]&&254==e[1])i="utf-16le";else{for(var o=0,s=0,r=Math.min(e.length-e.length%2,64),n=0;n<r;n+=2)0===e[n]&&0!==e[n+1]&&s++,0!==e[n]&&0===e[n+1]&&o++;s>o?i="utf-16be":s<o&&(i="utf-16le")}return i}t.utf16be=s,s.prototype.encoder=r,s.prototype.decoder=n,s.prototype.bomAware=!0,r.prototype.write=function(e){for(var t=o.from(e,"ucs2"),i=0;i<t.length;i+=2){var s=t[i];t[i]=t[i+1],t[i+1]=s}return t},r.prototype.end=function(){},n.prototype.write=function(e){if(0==e.length)return"";var t=o.alloc(e.length+1),i=0,s=0;for(-1!==this.overflowByte&&(t[0]=e[0],t[1]=this.overflowByte,i=1,s=2);i<e.length-1;i+=2,s+=2)t[s]=e[i+1],t[s+1]=e[i];return this.overflowByte=i==e.length-1?e[e.length-1]:-1,t.slice(0,s).toString("ucs2")},n.prototype.end=function(){},t.utf16=a,a.prototype.encoder=c,a.prototype.decoder=l,c.prototype.write=function(e){return this.encoder.write(e)},c.prototype.end=function(){return this.encoder.end()},l.prototype.write=function(e){if(!this.decoder){if(this.initialBytes.push(e),this.initialBytesLen+=e.length,this.initialBytesLen<16)return"";var t=h(e=o.concat(this.initialBytes),this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(t,this.options),this.initialBytes.length=this.initialBytesLen=0}return this.decoder.write(e)},l.prototype.end=function(){if(!this.decoder){var e=o.concat(this.initialBytes),t=h(e,this.options.defaultEncoding);this.decoder=this.iconv.getDecoder(t,this.options);var i=this.decoder.write(e),s=this.decoder.end();return s?i+s:i}return this.decoder.end()}},function(e,t,i){var o=i(7).Buffer;function s(e,t){this.iconv=t}t.utf7=s,t.unicode11utf7="utf7",s.prototype.encoder=n,s.prototype.decoder=a,s.prototype.bomAware=!0;var r=/[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;function n(e,t){this.iconv=t.iconv}function a(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=""}n.prototype.write=function(e){return o.from(e.replace(r,function(e){return"+"+("+"===e?"":this.iconv.encode(e,"utf16-be").toString("base64").replace(/=+$/,""))+"-"}.bind(this)))},n.prototype.end=function(){};for(var c=/[A-Za-z0-9\/+]/,l=[],h=0;h<256;h++)l[h]=c.test(String.fromCharCode(h));var d="+".charCodeAt(0),m="-".charCodeAt(0),u="&".charCodeAt(0);function g(e,t){this.iconv=t}function p(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=o.alloc(6),this.base64AccumIdx=0}function f(e,t){this.iconv=t.iconv,this.inBase64=!1,this.base64Accum=""}a.prototype.write=function(e){for(var t="",i=0,s=this.inBase64,r=this.base64Accum,n=0;n<e.length;n++)if(s){if(!l[e[n]]){if(n==i&&e[n]==m)t+="+";else{var a=r+e.slice(i,n).toString();t+=this.iconv.decode(o.from(a,"base64"),"utf16-be")}e[n]!=m&&n--,i=n+1,s=!1,r=""}}else e[n]==d&&(t+=this.iconv.decode(e.slice(i,n),"ascii"),i=n+1,s=!0);if(s){var c=(a=r+e.slice(i).toString()).length-a.length%8;r=a.slice(c),a=a.slice(0,c),t+=this.iconv.decode(o.from(a,"base64"),"utf16-be")}else t+=this.iconv.decode(e.slice(i),"ascii");return this.inBase64=s,this.base64Accum=r,t},a.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(o.from(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e},t.utf7imap=g,g.prototype.encoder=p,g.prototype.decoder=f,g.prototype.bomAware=!0,p.prototype.write=function(e){for(var t=this.inBase64,i=this.base64Accum,s=this.base64AccumIdx,r=o.alloc(5*e.length+10),n=0,a=0;a<e.length;a++){var c=e.charCodeAt(a);32<=c&&c<=126?(t&&(s>0&&(n+=r.write(i.slice(0,s).toString("base64").replace(/\//g,",").replace(/=+$/,""),n),s=0),r[n++]=m,t=!1),t||(r[n++]=c,c===u&&(r[n++]=m))):(t||(r[n++]=u,t=!0),t&&(i[s++]=c>>8,i[s++]=255&c,s==i.length&&(n+=r.write(i.toString("base64").replace(/\//g,","),n),s=0)))}return this.inBase64=t,this.base64AccumIdx=s,r.slice(0,n)},p.prototype.end=function(){var e=o.alloc(10),t=0;return this.inBase64&&(this.base64AccumIdx>0&&(t+=e.write(this.base64Accum.slice(0,this.base64AccumIdx).toString("base64").replace(/\//g,",").replace(/=+$/,""),t),this.base64AccumIdx=0),e[t++]=m,this.inBase64=!1),e.slice(0,t)};var v=l.slice();v[",".charCodeAt(0)]=!0,f.prototype.write=function(e){for(var t="",i=0,s=this.inBase64,r=this.base64Accum,n=0;n<e.length;n++)if(s){if(!v[e[n]]){if(n==i&&e[n]==m)t+="&";else{var a=r+e.slice(i,n).toString().replace(/,/g,"/");t+=this.iconv.decode(o.from(a,"base64"),"utf16-be")}e[n]!=m&&n--,i=n+1,s=!1,r=""}}else e[n]==u&&(t+=this.iconv.decode(e.slice(i,n),"ascii"),i=n+1,s=!0);if(s){var c=(a=r+e.slice(i).toString().replace(/,/g,"/")).length-a.length%8;r=a.slice(c),a=a.slice(0,c),t+=this.iconv.decode(o.from(a,"base64"),"utf16-be")}else t+=this.iconv.decode(e.slice(i),"ascii");return this.inBase64=s,this.base64Accum=r,t},f.prototype.end=function(){var e="";return this.inBase64&&this.base64Accum.length>0&&(e=this.iconv.decode(o.from(this.base64Accum,"base64"),"utf16-be")),this.inBase64=!1,this.base64Accum="",e}},function(e,t,i){var o=i(7).Buffer;function s(e,t){if(!e)throw new Error("SBCS codec is called without the data.");if(!e.chars||128!==e.chars.length&&256!==e.chars.length)throw new Error("Encoding '"+e.type+"' has incorrect 'chars' (must be of len 128 or 256)");if(128===e.chars.length){for(var i="",s=0;s<128;s++)i+=String.fromCharCode(s);e.chars=i+e.chars}this.decodeBuf=o.from(e.chars,"ucs2");var r=o.alloc(65536,t.defaultCharSingleByte.charCodeAt(0));for(s=0;s<e.chars.length;s++)r[e.chars.charCodeAt(s)]=s;this.encodeBuf=r}function r(e,t){this.encodeBuf=t.encodeBuf}function n(e,t){this.decodeBuf=t.decodeBuf}t._sbcs=s,s.prototype.encoder=r,s.prototype.decoder=n,r.prototype.write=function(e){for(var t=o.alloc(e.length),i=0;i<e.length;i++)t[i]=this.encodeBuf[e.charCodeAt(i)];return t},r.prototype.end=function(){},n.prototype.write=function(e){for(var t=this.decodeBuf,i=o.alloc(2*e.length),s=0,r=0,n=0;n<e.length;n++)s=2*e[n],i[r=2*n]=t[s],i[r+1]=t[s+1];return i.toString("ucs2")},n.prototype.end=function(){}},function(e,t,i){e.exports={10029:"maccenteuro",maccenteuro:{type:"_sbcs",chars:"ÃÄÄÃÄÃÃÃ¡ÄÄÃ¤ÄÄÄÃ©Å¹ÅºÄÃ­ÄÄÄÄÃ³ÄÃ´Ã¶ÃµÃºÄÄÃ¼â Â°ÄÂ£Â§â¢Â¶ÃÂ®Â©â¢ÄÂ¨â Ä£Ä®Ä¯Äªâ¤â¥Ä«Ä¶ââÅÄ»Ä¼Ä½Ä¾Ä¹ÄºÅÅÅÂ¬âÅÅâÂ«Â»â¦Â ÅÅÃÅÅââââââÃ·âÅÅÅÅâ¹âºÅÅÅÅ ââÅ¡ÅÅÃÅ¤Å¥ÃÅ½Å¾ÅªÃÃÅ«Å®ÃÅ¯Å°Å±Å²Å³ÃÃ½Ä·Å»ÅÅ¼Ä¢Ë"},808:"cp808",ibm808:"cp808",cp808:{type:"_sbcs",chars:"ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐÑÐÑÐÑÐÑÂ°âÂ·âââ¬â Â "},mik:{type:"_sbcs",chars:"ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑââ´â¬âââ¼â£ââââ©â¦â ââ¬ââââââ¤âÂ§âââââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â "},ascii8bit:"ascii",usascii:"ascii",ansix34:"ascii",ansix341968:"ascii",ansix341986:"ascii",csascii:"ascii",cp367:"ascii",ibm367:"ascii",isoir6:"ascii",iso646us:"ascii",iso646irv:"ascii",us:"ascii",latin1:"iso88591",latin2:"iso88592",latin3:"iso88593",latin4:"iso88594",latin5:"iso88599",latin6:"iso885910",latin7:"iso885913",latin8:"iso885914",latin9:"iso885915",latin10:"iso885916",csisolatin1:"iso88591",csisolatin2:"iso88592",csisolatin3:"iso88593",csisolatin4:"iso88594",csisolatincyrillic:"iso88595",csisolatinarabic:"iso88596",csisolatingreek:"iso88597",csisolatinhebrew:"iso88598",csisolatin5:"iso88599",csisolatin6:"iso885910",l1:"iso88591",l2:"iso88592",l3:"iso88593",l4:"iso88594",l5:"iso88599",l6:"iso885910",l7:"iso885913",l8:"iso885914",l9:"iso885915",l10:"iso885916",isoir14:"iso646jp",isoir57:"iso646cn",isoir100:"iso88591",isoir101:"iso88592",isoir109:"iso88593",isoir110:"iso88594",isoir144:"iso88595",isoir127:"iso88596",isoir126:"iso88597",isoir138:"iso88598",isoir148:"iso88599",isoir157:"iso885910",isoir166:"tis620",isoir179:"iso885913",isoir199:"iso885914",isoir203:"iso885915",isoir226:"iso885916",cp819:"iso88591",ibm819:"iso88591",cyrillic:"iso88595",arabic:"iso88596",arabic8:"iso88596",ecma114:"iso88596",asmo708:"iso88596",greek:"iso88597",greek8:"iso88597",ecma118:"iso88597",elot928:"iso88597",hebrew:"iso88598",hebrew8:"iso88598",turkish:"iso88599",turkish8:"iso88599",thai:"iso885911",thai8:"iso885911",celtic:"iso885914",celtic8:"iso885914",isoceltic:"iso885914",tis6200:"tis620",tis62025291:"tis620",tis62025330:"tis620",10000:"macroman",10006:"macgreek",10007:"maccyrillic",10079:"maciceland",10081:"macturkish",cspc8codepage437:"cp437",cspc775baltic:"cp775",cspc850multilingual:"cp850",cspcp852:"cp852",cspc862latinhebrew:"cp862",cpgr:"cp869",msee:"cp1250",mscyrl:"cp1251",msansi:"cp1252",msgreek:"cp1253",msturk:"cp1254",mshebr:"cp1255",msarab:"cp1256",winbaltrim:"cp1257",cp20866:"koi8r",20866:"koi8r",ibm878:"koi8r",cskoi8r:"koi8r",cp21866:"koi8u",21866:"koi8u",ibm1168:"koi8u",strk10482002:"rk1048",tcvn5712:"tcvn",tcvn57121:"tcvn",gb198880:"iso646cn",cn:"iso646cn",csiso14jisc6220ro:"iso646jp",jisc62201969ro:"iso646jp",jp:"iso646jp",cshproman8:"hproman8",r8:"hproman8",roman8:"hproman8",xroman8:"hproman8",ibm1051:"hproman8",mac:"macintosh",csmacintosh:"macintosh"}},function(e,t,i){e.exports={437:"cp437",737:"cp737",775:"cp775",850:"cp850",852:"cp852",855:"cp855",856:"cp856",857:"cp857",858:"cp858",860:"cp860",861:"cp861",862:"cp862",863:"cp863",864:"cp864",865:"cp865",866:"cp866",869:"cp869",874:"windows874",922:"cp922",1046:"cp1046",1124:"cp1124",1125:"cp1125",1129:"cp1129",1133:"cp1133",1161:"cp1161",1162:"cp1162",1163:"cp1163",1250:"windows1250",1251:"windows1251",1252:"windows1252",1253:"windows1253",1254:"windows1254",1255:"windows1255",1256:"windows1256",1257:"windows1257",1258:"windows1258",28591:"iso88591",28592:"iso88592",28593:"iso88593",28594:"iso88594",28595:"iso88595",28596:"iso88596",28597:"iso88597",28598:"iso88598",28599:"iso88599",28600:"iso885910",28601:"iso885911",28603:"iso885913",28604:"iso885914",28605:"iso885915",28606:"iso885916",windows874:{type:"_sbcs",chars:"â¬ï¿½ï¿½ï¿½ï¿½â¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½âââââ¢ââï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿½ï¿½ï¿½ï¿½à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿½ï¿½ï¿½ï¿½"},win874:"windows874",cp874:"windows874",windows1250:{type:"_sbcs",chars:"â¬ï¿½âï¿½ââ¦â â¡ï¿½â°Å â¹ÅÅ¤Å½Å¹ï¿½âââââ¢ââï¿½â¢Å¡âºÅÅ¥Å¾ÅºÂ ËËÅÂ¤ÄÂ¦Â§Â¨Â©ÅÂ«Â¬Â­Â®Å»Â°Â±ËÅÂ´ÂµÂ¶Â·Â¸ÄÅÂ»Ä½ËÄ¾Å¼ÅÃÃÄÃÄ¹ÄÃÄÃÄÃÄÃÃÄÄÅÅÃÃÅÃÃÅÅ®ÃÅ°ÃÃÅ¢ÃÅÃ¡Ã¢ÄÃ¤ÄºÄÃ§ÄÃ©ÄÃ«ÄÃ­Ã®ÄÄÅÅÃ³Ã´ÅÃ¶Ã·ÅÅ¯ÃºÅ±Ã¼Ã½Å£Ë"},win1250:"windows1250",cp1250:"windows1250",windows1251:{type:"_sbcs",chars:"ÐÐâÑââ¦â â¡â¬â°Ðâ¹ÐÐÐÐÑâââââ¢ââï¿½â¢ÑâºÑÑÑÑÂ ÐÑÐÂ¤ÒÂ¦Â§ÐÂ©ÐÂ«Â¬Â­Â®ÐÂ°Â±ÐÑÒÂµÂ¶Â·ÑâÑÂ»ÑÐÑÑÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ"},win1251:"windows1251",cp1251:"windows1251",windows1252:{type:"_sbcs",chars:"â¬ï¿½âÆââ¦â â¡Ëâ°Å â¹Åï¿½Å½ï¿½ï¿½âââââ¢ââËâ¢Å¡âºÅï¿½Å¾Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿"},win1252:"windows1252",cp1252:"windows1252",windows1253:{type:"_sbcs",chars:"â¬ï¿½âÆââ¦â â¡ï¿½â°ï¿½â¹ï¿½ï¿½ï¿½ï¿½ï¿½âââââ¢ââï¿½â¢ï¿½âºï¿½ï¿½ï¿½ï¿½Â ÎÎÂ£Â¤Â¥Â¦Â§Â¨Â©ï¿½Â«Â¬Â­Â®âÂ°Â±Â²Â³ÎÂµÂ¶Â·ÎÎÎÂ»ÎÂ½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡ï¿½Î£Î¤Î¥Î¦Î§Î¨Î©ÎªÎ«Î¬Î­Î®Î¯Î°Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏï¿½"},win1253:"windows1253",cp1253:"windows1253",windows1254:{type:"_sbcs",chars:"â¬ï¿½âÆââ¦â â¡Ëâ°Å â¹Åï¿½ï¿½ï¿½ï¿½âââââ¢ââËâ¢Å¡âºÅï¿½ï¿½Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄÃÃÃÃÃÃÃÃÃÃÃÃÄ°ÅÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄÃ±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ä±ÅÃ¿"},win1254:"windows1254",cp1254:"windows1254",windows1255:{type:"_sbcs",chars:"â¬ï¿½âÆââ¦â â¡Ëâ°ï¿½â¹ï¿½ï¿½ï¿½ï¿½ï¿½âââââ¢ââËâ¢ï¿½âºï¿½ï¿½ï¿½ï¿½Â Â¡Â¢Â£âªÂ¥Â¦Â§Â¨Â©ÃÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹Ã·Â»Â¼Â½Â¾Â¿Ö°Ö±Ö²Ö³Ö´ÖµÖ¶Ö·Ö¸Ö¹ÖºÖ»Ö¼Ö½Ö¾Ö¿×××××°×±×²×³×´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿½ï¿½ââï¿½"},win1255:"windows1255",cp1255:"windows1255",windows1256:{type:"_sbcs",chars:"â¬Ù¾âÆââ¦â â¡Ëâ°Ù¹â¹ÅÚÚÚÚ¯âââââ¢ââÚ©â¢ÚâºÅââÚºÂ ØÂ¢Â£Â¤Â¥Â¦Â§Â¨Â©Ú¾Â«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ØÂ»Â¼Â½Â¾ØÛØ¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶ÃØ·Ø¸Ø¹ØºÙÙÙÙÃ ÙÃ¢ÙÙÙÙÃ§Ã¨Ã©ÃªÃ«ÙÙÃ®Ã¯ÙÙÙÙÃ´ÙÙÃ·ÙÃ¹ÙÃ»Ã¼ââÛ"},win1256:"windows1256",cp1256:"windows1256",windows1257:{type:"_sbcs",chars:"â¬ï¿½âï¿½ââ¦â â¡ï¿½â°ï¿½â¹ï¿½Â¨ËÂ¸ï¿½âââââ¢ââï¿½â¢ï¿½âºï¿½Â¯Ëï¿½Â ï¿½Â¢Â£Â¤ï¿½Â¦Â§ÃÂ©ÅÂ«Â¬Â­Â®ÃÂ°Â±Â²Â³Â´ÂµÂ¶Â·Ã¸Â¹ÅÂ»Â¼Â½Â¾Ã¦ÄÄ®ÄÄÃÃÄÄÄÃÅ¹ÄÄ¢Ä¶ÄªÄ»Å ÅÅÃÅÃÃÃÅ²ÅÅÅªÃÅ»Å½ÃÄÄ¯ÄÄÃ¤Ã¥ÄÄÄÃ©ÅºÄÄ£Ä·Ä«Ä¼Å¡ÅÅÃ³ÅÃµÃ¶Ã·Å³ÅÅÅ«Ã¼Å¼Å¾Ë"},win1257:"windows1257",cp1257:"windows1257",windows1258:{type:"_sbcs",chars:"â¬ï¿½âÆââ¦â â¡Ëâ°ï¿½â¹Åï¿½ï¿½ï¿½ï¿½âââââ¢ââËâ¢ï¿½âºÅï¿½ï¿½Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÄÃÃÃÃÃÃÃÃÌÃÃÃÄÃÌÃÃÆ ÃÃÃÃÃÃÃÆ¯ÌÃÃ Ã¡Ã¢ÄÃ¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«ÌÃ­Ã®Ã¯ÄÃ±Ì£Ã³Ã´Æ¡Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Æ°â«Ã¿"},win1258:"windows1258",cp1258:"windows1258",iso88591:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿"},cp28591:"iso88591",iso88592:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄËÅÂ¤Ä½ÅÂ§Â¨Å ÅÅ¤Å¹Â­Å½Å»Â°ÄËÅÂ´Ä¾ÅËÂ¸Å¡ÅÅ¥ÅºËÅ¾Å¼ÅÃÃÄÃÄ¹ÄÃÄÃÄÃÄÃÃÄÄÅÅÃÃÅÃÃÅÅ®ÃÅ°ÃÃÅ¢ÃÅÃ¡Ã¢ÄÃ¤ÄºÄÃ§ÄÃ©ÄÃ«ÄÃ­Ã®ÄÄÅÅÃ³Ã´ÅÃ¶Ã·ÅÅ¯ÃºÅ±Ã¼Ã½Å£Ë"},cp28592:"iso88592",iso88593:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Ä¦ËÂ£Â¤ï¿½Ä¤Â§Â¨Ä°ÅÄÄ´Â­ï¿½Å»Â°Ä§Â²Â³Â´ÂµÄ¥Â·Â¸Ä±ÅÄÄµÂ½ï¿½Å¼ÃÃÃï¿½ÃÄÄÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃÄ ÃÃÄÃÃÃÃÅ¬ÅÃÃ Ã¡Ã¢ï¿½Ã¤ÄÄÃ§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ï¿½Ã±Ã²Ã³Ã´Ä¡Ã¶Ã·ÄÃ¹ÃºÃ»Ã¼Å­ÅË"},cp28593:"iso88593",iso88594:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄÄ¸ÅÂ¤Ä¨Ä»Â§Â¨Å ÄÄ¢Å¦Â­Å½Â¯Â°ÄËÅÂ´Ä©Ä¼ËÂ¸Å¡ÄÄ£Å§ÅÅ¾ÅÄÃÃÃÃÃÃÄ®ÄÃÄÃÄÃÃÄªÄÅÅÄ¶ÃÃÃÃÃÅ²ÃÃÃÅ¨ÅªÃÄÃ¡Ã¢Ã£Ã¤Ã¥Ã¦Ä¯ÄÃ©ÄÃ«ÄÃ­Ã®Ä«ÄÅÅÄ·Ã´ÃµÃ¶Ã·Ã¸Å³ÃºÃ»Ã¼Å©Å«Ë"},cp28594:"iso88594",iso88595:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÐÐÐÐÐÐÐÐÐÐÐÐÂ­ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑâÑÑÑÑÑÑÑÑÑÑÑÑÂ§ÑÑ"},cp28595:"iso88595",iso88596:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ï¿½ï¿½ï¿½Â¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ØÂ­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Øï¿½ï¿½ï¿½Øï¿½Ø¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹Øºï¿½ï¿½ï¿½ï¿½ï¿½ÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"},cp28596:"iso88596",iso88597:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ââÂ£â¬â¯Â¦Â§Â¨Â©ÍºÂ«Â¬Â­ï¿½âÂ°Â±Â²Â³ÎÎÎÂ·ÎÎÎÂ»ÎÂ½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡ï¿½Î£Î¤Î¥Î¦Î§Î¨Î©ÎªÎ«Î¬Î­Î®Î¯Î°Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏï¿½"},cp28597:"iso88597",iso88598:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ï¿½Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÃÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹Ã·Â»Â¼Â½Â¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿½ï¿½ââï¿½"},cp28598:"iso88598",iso88599:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄÃÃÃÃÃÃÃÃÃÃÃÃÄ°ÅÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄÃ±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ä±ÅÃ¿"},cp28599:"iso88599",iso885910:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄÄÄ¢ÄªÄ¨Ä¶Â§Ä»ÄÅ Å¦Å½Â­ÅªÅÂ°ÄÄÄ£Ä«Ä©Ä·Â·Ä¼ÄÅ¡Å§Å¾âÅ«ÅÄÃÃÃÃÃÃÄ®ÄÃÄÃÄÃÃÃÃÅÅÃÃÃÃÅ¨ÃÅ²ÃÃÃÃÃÃÄÃ¡Ã¢Ã£Ã¤Ã¥Ã¦Ä¯ÄÃ©ÄÃ«ÄÃ­Ã®Ã¯Ã°ÅÅÃ³Ã´ÃµÃ¶Å©Ã¸Å³ÃºÃ»Ã¼Ã½Ã¾Ä¸"},cp28600:"iso885910",iso885911:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿½ï¿½ï¿½ï¿½à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿½ï¿½ï¿½ï¿½"},cp28601:"iso885911",iso885913:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ âÂ¢Â£Â¤âÂ¦Â§ÃÂ©ÅÂ«Â¬Â­Â®ÃÂ°Â±Â²Â³âÂµÂ¶Â·Ã¸Â¹ÅÂ»Â¼Â½Â¾Ã¦ÄÄ®ÄÄÃÃÄÄÄÃÅ¹ÄÄ¢Ä¶ÄªÄ»Å ÅÅÃÅÃÃÃÅ²ÅÅÅªÃÅ»Å½ÃÄÄ¯ÄÄÃ¤Ã¥ÄÄÄÃ©ÅºÄÄ£Ä·Ä«Ä¼Å¡ÅÅÃ³ÅÃµÃ¶Ã·Å³ÅÅÅ«Ã¼Å¼Å¾â"},cp28603:"iso885913",iso885914:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ á¸á¸Â£ÄÄá¸Â§áºÂ©áºá¸á»²Â­Â®Å¸á¸á¸Ä Ä¡á¹á¹Â¶á¹áºá¹áºá¹ á»³áºáºá¹¡ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÅ´ÃÃÃÃÃÃá¹ªÃÃÃÃÃÃÅ¶ÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÅµÃ±Ã²Ã³Ã´ÃµÃ¶á¹«Ã¸Ã¹ÃºÃ»Ã¼Ã½Å·Ã¿"},cp28604:"iso885914",iso885915:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£â¬Â¥Å Â§Å¡Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Å½ÂµÂ¶Â·Å¾Â¹ÂºÂ»ÅÅÅ¸Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿"},cp28605:"iso885915",iso885916:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄÄÅâ¬âÅ Â§Å¡Â©ÈÂ«Å¹Â­ÅºÅ»Â°Â±ÄÅÅ½âÂ¶Â·Å¾ÄÈÂ»ÅÅÅ¸Å¼ÃÃÃÄÃÄÃÃÃÃÃÃÃÃÃÃÄÅÃÃÃÅÃÅÅ°ÃÃÃÃÄÈÃÃ Ã¡Ã¢ÄÃ¤ÄÃ¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄÅÃ²Ã³Ã´ÅÃ¶ÅÅ±Ã¹ÃºÃ»Ã¼ÄÈÃ¿"},cp28606:"iso885916",cp437:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÂ¢Â£Â¥â§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â "},ibm437:"cp437",csibm437:"cp437",cp737:{type:"_sbcs",chars:"ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏâââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÏÎ¬Î­Î®ÏÎ¯ÏÏÏÏÎÎÎÎÎÎÎÂ±â¥â¤ÎªÎ«Ã·âÂ°âÂ·ââ¿Â²â Â "},ibm737:"cp737",csibm737:"cp737",cp775:{type:"_sbcs",chars:"ÄÃ¼Ã©ÄÃ¤Ä£Ã¥ÄÅÄÅÅÄ«Å¹ÃÃÃÃ¦ÃÅÃ¶Ä¢Â¢ÅÅÃÃÃ¸Â£ÃÃÂ¤ÄÄªÃ³Å»Å¼ÅºâÂ¦Â©Â®Â¬Â½Â¼ÅÂ«Â»âââââ¤ÄÄÄÄâ£âââÄ®Å âââ´â¬âââ¼Å²Åªâââ©â¦â ââ¬Å½ÄÄÄÄÄ¯Å¡Å³Å«Å¾âââââââÃÃÅÅÃµÃÂµÅÄ¶Ä·Ä»Ä¼ÅÄÅâÂ­Â±âÂ¾Â¶Â§Ã·âÂ°âÂ·Â¹Â³Â²â Â "},ibm775:"cp775",csibm775:"cp775",cp850:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£ÃÃÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤Ã°ÃÃÃÃÄ±ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµÃ¾ÃÃÃÃÃ½ÃÂ¯Â´Â­Â±âÂ¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â "},ibm850:"cp850",csibm850:"cp850",cp852:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã¤Å¯ÄÃ§ÅÃ«ÅÅÃ®Å¹ÃÄÃÄ¹ÄºÃ´Ã¶Ä½Ä¾ÅÅÃÃÅ¤Å¥ÅÃÄÃ¡Ã­Ã³ÃºÄÄÅ½Å¾ÄÄÂ¬ÅºÄÅÂ«Â»âââââ¤ÃÃÄÅâ£âââÅ»Å¼âââ´â¬âââ¼ÄÄâââ©â¦â ââ¬Â¤ÄÄÄÃÄÅÃÃÄââââÅ¢Å®âÃÃÃÅÅÅÅ Å¡ÅÃÅÅ°Ã½ÃÅ£Â´Â­ËËËËÂ§Ã·Â¸Â°Â¨ËÅ±ÅÅâ Â "},ibm852:"cp852",csibm852:"cp852",cp855:{type:"_sbcs",chars:"ÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐ®ÑÐªÐ°ÐÐ±ÐÑÐ¦Ð´ÐÐµÐÑÐ¤Ð³ÐÂ«Â»âââââ¤ÑÐ¥Ð¸Ðâ£âââÐ¹Ðâââ´â¬âââ¼ÐºÐâââ©â¦â ââ¬Â¤Ð»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿ââââÐÑâÐ¯ÑÐ ÑÐ¡ÑÐ¢ÑÐ£Ð¶ÐÐ²ÐÑÐ¬âÂ­ÑÐ«Ð·ÐÑÐ¨ÑÐ­ÑÐ©ÑÐ§Â§â Â "},ibm855:"cp855",csibm855:"cp855",cp856:{type:"_sbcs",chars:"××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿½Â£ï¿½Ãï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â®Â¬Â½Â¼ï¿½Â«Â»âââââ¤ï¿½ï¿½ï¿½Â©â£âââÂ¢Â¥âââ´â¬âââ¼ï¿½ï¿½âââ©â¦â ââ¬Â¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ââââÂ¦ï¿½âï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Âµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â¯Â´Â­Â±âÂ¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â "},ibm856:"cp856",csibm856:"cp856",cp857:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ä±ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ä°ÃÃÃ¸Â£ÃÅÅÃ¡Ã­Ã³ÃºÃ±ÃÄÄÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤ÂºÂªÃÃÃï¿½ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµï¿½ÃÃÃÃÃ¬Ã¿Â¯Â´Â­Â±ï¿½Â¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â "},ibm857:"cp857",csibm857:"cp857",cp858:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£ÃÃÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤Ã°ÃÃÃÃâ¬ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµÃ¾ÃÃÃÃÃ½ÃÂ¯Â´Â­Â±âÂ¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â "},ibm858:"cp858",csibm858:"cp858",cp860:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã£Ã ÃÃ§ÃªÃÃ¨ÃÃÃ¬ÃÃÃÃÃÃ´ÃµÃ²ÃÃ¹ÃÃÃÂ¢Â£Ãâ§ÃÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿ÃÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â "},ibm860:"cp860",csibm860:"cp860",cp861:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨ÃÃ°ÃÃÃÃÃ¦ÃÃ´Ã¶Ã¾Ã»ÃÃ½ÃÃÃ¸Â£Ãâ§ÆÃ¡Ã­Ã³ÃºÃÃÃÃÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â "},ibm861:"cp861",csibm861:"cp861",cp862:{type:"_sbcs",chars:"××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªÂ¢Â£Â¥â§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â "},ibm862:"cp862",csibm862:"cp862",cp863:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢ÃÃ Â¶Ã§ÃªÃ«Ã¨Ã¯Ã®âÃÂ§ÃÃÃÃ´ÃÃÃ»Ã¹Â¤ÃÃÂ¢Â£ÃÃÆÂ¦Â´Ã³ÃºÂ¨Â¸Â³Â¯ÃâÂ¬Â½Â¼Â¾Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â "},ibm863:"cp863",csibm863:"cp863",cp864:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$Ùª&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Â°Â·ââââââ¼â¤â¬ââ´ââââÎ²âÏÂ±Â½Â¼âÂ«Â»ï»·ï»¸ï¿½ï¿½ï»»ï»¼ï¿½Â Â­ïºÂ£Â¤ïºï¿½ï¿½ïºïºïºïºØïºïº¡ïº¥Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©ï»Øïº±ïºµïº¹ØÂ¢ïºïºïºïºï»ïºïºïºïºïºïºïºïº£ïº§ïº©ïº«ïº­ïº¯ïº³ïº·ïº»ïº¿ï»ï»ï»ï»Â¦Â¬Ã·Ãï»Ùï»ï»ï»ï»ï»£ï»§ï»«ï»­ï»¯ï»³ïº½ï»ï»ï»ï»¡ï¹½Ùï»¥ï»©ï»¬ï»°ï»²ï»ï»ï»µï»¶ï»ï»ï»±â ï¿½"},ibm864:"cp864",csibm864:"cp864",cp865:{type:"_sbcs",chars:"ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£Ãâ§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â¤âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â "},ibm865:"cp865",csibm865:"cp865",cp866:{type:"_sbcs",chars:"ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐÑÐÑÐÑÐÑÂ°âÂ·ââÂ¤â Â "},ibm866:"cp866",csibm866:"cp866",cp869:{type:"_sbcs",chars:"ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îï¿½Â·Â¬Â¦ââÎâÎÎÎªÎï¿½ï¿½ÎÎ«Â©ÎÂ²Â³Î¬Â£Î­Î®Î¯ÏÎÏÏÎÎÎÎÎÎÎÂ½ÎÎÂ«Â»âââââ¤ÎÎÎÎâ£âââÎÎâââ´â¬âââ¼Î Î¡âââ©â¦â ââ¬Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³ââââÎ´ÎµâÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÎÂ­Â±ÏÏÏÂ§ÏÎÂ°Â¨ÏÏÎ°Ïâ Â "},ibm869:"cp869",csibm869:"cp869",cp922:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®â¾Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÅ ÃÃÃÃÃÃÃÃÃÃÃÃÃÅ½ÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Å¡Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Å¾Ã¿"},ibm922:"cp922",csibm922:"cp922",cp1046:{type:"_sbcs",chars:"ïºÃÃ·ï£¶ï£µï£´ï£·ï¹±Ââ ââââââï¹¹ï¹»ï¹½ï¹¿ï¹·ïºï»°ï»³ï»²ï»ï»ï»ï»¶ï»¸ï»ºï»¼Â ï£ºï£¹ï£¸Â¤ï£»ïºïºïºïºïºïº£ØÂ­ïº§ïº³Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©ïº·Øïº»ïº¿ï»Øï»Ø¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·ï»Ø¹Øºï»ïºïºïºï»ÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙï»ï»ï»ï£¼ï»µï»·ï»¹ï»»ï»£ï»§ï»¬ï»©ï¿½"},ibm1046:"cp1046",csibm1046:"cp1046",cp1124:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÐÐÒÐÐÐÐÐÐÐÐÐÂ­ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑâÑÑÒÑÑÑÑÑÑÑÑÑÂ§ÑÑ"},ibm1124:"cp1124",csibm1124:"cp1124",cp1125:{type:"_sbcs",chars:"ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐÑÒÒÐÑÐÑÐÑÂ·ââÂ¤â Â "},ibm1125:"cp1125",csibm1125:"cp1125",cp1129:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£Â¤Â¥Â¦Â§ÅÂ©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Å¸ÂµÂ¶Â·ÅÂ¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÄÃÃÃÃÃÃÃÃÌÃÃÃÄÃÌÃÃÆ ÃÃÃÃÃÃÃÆ¯ÌÃÃ Ã¡Ã¢ÄÃ¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«ÌÃ­Ã®Ã¯ÄÃ±Ì£Ã³Ã´Æ¡Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Æ°â«Ã¿"},ibm1129:"cp1129",csibm1129:"cp1129",cp1133:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ àºàºàºàºàºàºªàºàºàºàºàºàºàºàºàºàºàºàºàºàº¡àº¢àº£àº¥àº§àº«àº­àº®ï¿½ï¿½ï¿½àº¯àº°àº²àº³àº´àºµàº¶àº·àº¸àº¹àº¼àº±àº»àº½ï¿½ï¿½ï¿½à»à»à»à»à»à»à»à»à»à»à»à»ï¿½à»à»â­ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à»à»à»à»à»à»à»à»à»à»ï¿½ï¿½Â¢Â¬Â¦ï¿½"},ibm1133:"cp1133",csibm1133:"cp1133",cp1161:{type:"_sbcs",chars:"ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à¹à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºà¹à¹à¹â¬à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹Â¢Â¬Â¦Â "},ibm1161:"cp1161",csibm1161:"cp1161",cp1162:{type:"_sbcs",chars:"â¬ÂÂÂÂâ¦ÂÂÂÂÂÂÂÂÂÂÂâââââ¢ââÂÂÂÂÂÂÂÂÂ à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿½ï¿½ï¿½ï¿½à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿½ï¿½ï¿½ï¿½"},ibm1162:"cp1162",csibm1162:"cp1162",cp1163:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£â¬Â¥Â¦Â§ÅÂ©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Å¸ÂµÂ¶Â·ÅÂ¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÄÃÃÃÃÃÃÃÃÌÃÃÃÄÃÌÃÃÆ ÃÃÃÃÃÃÃÆ¯ÌÃÃ Ã¡Ã¢ÄÃ¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«ÌÃ­Ã®Ã¯ÄÃ±Ì£Ã³Ã´Æ¡Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Æ°â«Ã¿"},ibm1163:"cp1163",csibm1163:"cp1163",maccroatian:{type:"_sbcs",chars:"ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Å â¢Â´Â¨â Å½ÃâÂ±â¤â¥âÂµâââÅ¡â«ÂªÂºâ¦Å¾Ã¸Â¿Â¡Â¬âÆâÄÂ«Äâ¦Â ÃÃÃÅÅÄâââââÃ·âï¿½Â©âÂ¤â¹âºÃÂ»âÂ·âââ°ÃÄÃÄÃÃÃÃÃÃÃÄÃÃÃÃÄ±ËËÂ¯ÏÃËÂ¸ÃÃ¦Ë"},maccyrillic:{type:"_sbcs",chars:"ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯â Â°Â¢Â£Â§â¢Â¶ÐÂ®Â©â¢ÐÑâ ÐÑâÂ±â¤â¥ÑÂµâÐÐÑÐÑÐÑÐÑÑÐÂ¬âÆââÂ«Â»â¦Â ÐÑÐÑÑââââââÃ·âÐÑÐÑâÐÑÑÐ°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÂ¤"},macgreek:{type:"_sbcs",chars:"ÃÂ¹Â²ÃÂ³ÃÃÎÃ Ã¢Ã¤ÎÂ¨Ã§Ã©Ã¨ÃªÃ«Â£â¢Ã®Ã¯â¢Â½â°Ã´Ã¶Â¦Â­Ã¹Ã»Ã¼â ÎÎÎÎÎÎ ÃÂ®Â©Î£ÎªÂ§â Â°ÎÎÂ±â¤â¥Â¥ÎÎÎÎÎÎÎÎ¦Î«Î¨Î©Î¬ÎÂ¬ÎÎ¡âÎ¤Â«Â»â¦Â Î¥Î§ÎÎÅââââââÃ·ÎÎÎÎÎ­Î®Î¯ÏÎÏÎ±Î²ÏÎ´ÎµÏÎ³Î·Î¹Î¾ÎºÎ»Î¼Î½Î¿ÏÏÏÏÏÎ¸ÏÏÏÏÎ¶ÏÏÎÎ°ï¿½"},maciceland:{type:"_sbcs",chars:"ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼ÃÂ°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸âÂ¤ÃÃ°ÃÃ¾Ã½Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË"},macroman:{type:"_sbcs",chars:"ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸âÂ¤â¹âºï¬ï¬â¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË"},macromania:{type:"_sbcs",chars:"ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÄÅâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦ÄÅÂ¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸âÂ¤â¹âºÅ¢Å£â¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË"},macthai:{type:"_sbcs",chars:"Â«Â»â¦ï¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ââï¢ï¿½â¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ï¢ââï¿½Â à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸º\ufeffâââà¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹â¢à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹Â®Â©ï¿½ï¿½ï¿½ï¿½"},macturkish:{type:"_sbcs",chars:"ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸ÄÄÄ°Ä±ÅÅâ¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃï¿½ËËÂ¯ËËËÂ¸ËËË"},macukraine:{type:"_sbcs",chars:"ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯â Â°ÒÂ£Â§â¢Â¶ÐÂ®Â©â¢ÐÑâ ÐÑâÂ±â¤â¥ÑÂµÒÐÐÑÐÑÐÑÐÑÑÐÂ¬âÆââÂ«Â»â¦Â ÐÑÐÑÑââââââÃ·âÐÑÐÑâÐÑÑÐ°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÂ¤"},koi8r:{type:"_sbcs",chars:"ââââââââ¤â¬â´â¼âââââââââ â ââââ¤â¥Â â¡Â°Â²Â·Ã·âââÑââââââââââââââ â¡Ðâ¢â£â¤â¥â¦â§â¨â©âªâ«â¬Â©ÑÐ°Ð±ÑÐ´ÐµÑÐ³ÑÐ¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÐ¶Ð²ÑÑÐ·ÑÑÑÑÑÐ®ÐÐÐ¦ÐÐÐ¤ÐÐ¥ÐÐÐÐÐÐÐÐÐ¯Ð Ð¡Ð¢Ð£ÐÐÐ¬Ð«ÐÐ¨Ð­Ð©Ð§Ðª"},koi8u:{type:"_sbcs",chars:"ââââââââ¤â¬â´â¼âââââââââ â ââââ¤â¥Â â¡Â°Â²Â·Ã·âââÑÑâÑÑâââââÒââââ â¡ÐÐâ£ÐÐâ¦â§â¨â©âªÒâ¬Â©ÑÐ°Ð±ÑÐ´ÐµÑÐ³ÑÐ¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÐ¶Ð²ÑÑÐ·ÑÑÑÑÑÐ®ÐÐÐ¦ÐÐÐ¤ÐÐ¥ÐÐÐÐÐÐÐÐÐ¯Ð Ð¡Ð¢Ð£ÐÐÐ¬Ð«ÐÐ¨Ð­Ð©Ð§Ðª"},koi8ru:{type:"_sbcs",chars:"ââââââââ¤â¬â´â¼âââââââââ â ââââ¤â¥Â â¡Â°Â²Â·Ã·âââÑÑâÑÑâââââÒÑâââ â¡ÐÐâ£ÐÐâ¦â§â¨â©âªÒÐÂ©ÑÐ°Ð±ÑÐ´ÐµÑÐ³ÑÐ¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÐ¶Ð²ÑÑÐ·ÑÑÑÑÑÐ®ÐÐÐ¦ÐÐÐ¤ÐÐ¥ÐÐÐÐÐÐÐÐÐ¯Ð Ð¡Ð¢Ð£ÐÐÐ¬Ð«ÐÐ¨Ð­Ð©Ð§Ðª"},koi8t:{type:"_sbcs",chars:"ÒÒâÒââ¦â â¡ï¿½â°Ò³â¹Ò²Ò·Ò¶ï¿½Òâââââ¢ââï¿½â¢ï¿½âºï¿½ï¿½ï¿½ï¿½ï¿½Ó¯Ó®ÑÂ¤Ó£Â¦Â§ï¿½ï¿½ï¿½Â«Â¬Â­Â®ï¿½Â°Â±Â²Ðï¿½Ó¢Â¶Â·ï¿½âï¿½Â»ï¿½ï¿½ï¿½Â©ÑÐ°Ð±ÑÐ´ÐµÑÐ³ÑÐ¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÐ¶Ð²ÑÑÐ·ÑÑÑÑÑÐ®ÐÐÐ¦ÐÐÐ¤ÐÐ¥ÐÐÐÐÐÐÐÐÐ¯Ð Ð¡Ð¢Ð£ÐÐÐ¬Ð«ÐÐ¨Ð­Ð©Ð§Ðª"},armscii8:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ï¿½ÖÖ)(Â»Â«â.Õ,-Öâ¦ÕÕÕÔ±Õ¡Ô²Õ¢Ô³Õ£Ô´Õ¤ÔµÕ¥Ô¶Õ¦Ô·Õ§Ô¸Õ¨Ô¹Õ©ÔºÕªÔ»Õ«Ô¼Õ¬Ô½Õ­Ô¾Õ®Ô¿Õ¯ÕÕ°ÕÕ±ÕÕ²ÕÕ³ÕÕ´ÕÕµÕÕ¶ÕÕ·ÕÕ¸ÕÕ¹ÕÕºÕÕ»ÕÕ¼ÕÕ½ÕÕ¾ÕÕ¿ÕÖÕÖÕÖÕÖÕÖÕÖÕÖÕï¿½"},rk1048:{type:"_sbcs",chars:"ÐÐâÑââ¦â â¡â¬â°Ðâ¹ÐÒÒºÐÑâââââ¢ââï¿½â¢ÑâºÑÒÒ»ÑÂ Ò°Ò±ÓÂ¤Ó¨Â¦Â§ÐÂ©ÒÂ«Â¬Â­Â®Ò®Â°Â±ÐÑÓ©ÂµÂ¶Â·ÑâÒÂ»ÓÒ¢Ò£Ò¯ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ"},tcvn:{type:"_sbcs",chars:"\0Ãá»¤á»ªá»¬á»®\b\t\n\v\f\rá»¨á»°á»²á»¶á»¸Ãá»´ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ãáº¢ÃÃáº áº¶áº¬Ãáººáº¼Ãáº¸á»Ãá»Ä¨Ãá»Ãá»ÃÃá»á»á»á»á» á»á»¢Ãá»¦Å¨Â ÄÃÃÃÆ Æ¯ÄÄÃ¢ÃªÃ´Æ¡Æ°Äáº°ÌÌÌÌÌ£Ã áº£Ã£Ã¡áº¡áº²áº±áº³áºµáº¯áº´áº®áº¦áº¨áºªáº¤á»áº·áº§áº©áº«áº¥áº­Ã¨á»áº»áº½Ã©áº¹á»á»á»áº¿á»Ã¬á»á»áº¾á»Ä©Ã­á»Ã²á»á»ÃµÃ³á»á»á»á»á»á»á»á»á»¡á»á»£Ã¹á»á»§Å©Ãºá»¥á»«á»­á»¯á»©á»±á»³á»·á»¹Ã½á»µá»"},georgianacademy:{type:"_sbcs",chars:"ÂÂâÆââ¦â â¡Ëâ°Å â¹ÅÂÂÂÂâââââ¢ââËâ¢Å¡âºÅÂÂÅ¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ááááááááááááááááá á¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯á°á±á²á³á´áµá¶Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿"},georgianps:{type:"_sbcs",chars:"ÂÂâÆââ¦â â¡Ëâ°Å â¹ÅÂÂÂÂâââââ¢ââËâ¢Å¡âºÅÂÂÅ¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿áááááááá±ááááááá²áááá á¡á¢á³á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á´á¯á°áµÃ¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿"},pt154:{type:"_sbcs",chars:"ÒÒÓ®Òââ¦Ò¶Ò®Ò²Ò¯Ò Ó¢Ò¢ÒÒºÒ¸Òâââââ¢ââÒ³Ò·Ò¡Ó£Ò£ÒÒ»Ò¹Â ÐÑÐÓ¨ÒÒ°Â§ÐÂ©ÓÂ«Â¬Ó¯Â®ÒÂ°Ò±ÐÑÒÓ©Â¶Â·ÑâÓÂ»ÑÒªÒ«ÒÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ"},viscii:{type:"_sbcs",chars:"\0áº²áº´áºª\b\t\n\v\f\rá»¶á»¸á»´ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~áº áº®áº°áº¶áº¤áº¦áº¨áº¬áº¼áº¸áº¾á»á»á»á»á»á»á»á»á»á»¢á»á»á»á»á»á»á»á»¦Å¨á»¤á»²Ãáº¯áº±áº·áº¥áº§áº©áº­áº½áº¹áº¿á»á»á»á»á»á»á»á»á» Æ á»á»á»á»á»°á»¨á»ªá»¬Æ¡á»Æ¯ÃÃÃÃáº¢Äáº³áºµÃÃÃáººÃÃÄ¨á»³Äá»©ÃÃÃáº¡á»·á»«á»­ÃÃá»¹á»µÃá»¡Æ°Ã Ã¡Ã¢Ã£áº£Äá»¯áº«Ã¨Ã©Ãªáº»Ã¬Ã­Ä©á»Äá»±Ã²Ã³Ã´Ãµá»á»á»¥Ã¹ÃºÅ©á»§Ã½á»£á»®"},iso646cn:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#Â¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}â¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"},iso646jp:{type:"_sbcs",chars:"\0\b\t\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[Â¥]^_`abcdefghijklmnopqrstuvwxyz{|}â¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"},hproman8:{type:"_sbcs",chars:"ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÃÃÃÃÃÃÃÂ´ËËÂ¨ËÃÃâ¤Â¯ÃÃ½Â°ÃÃ§ÃÃ±Â¡Â¿Â¤Â£Â¥Â§ÆÂ¢Ã¢ÃªÃ´Ã»Ã¡Ã©Ã³ÃºÃ Ã¨Ã²Ã¹Ã¤Ã«Ã¶Ã¼ÃÃ®ÃÃÃ¥Ã­Ã¸Ã¦ÃÃ¬ÃÃÃÃ¯ÃÃÃÃÃ£ÃÃ°ÃÃÃÃÃÃµÅ Å¡ÃÅ¸Ã¿ÃÃ¾Â·ÂµÂ¶Â¾âÂ¼Â½ÂªÂºÂ«â Â»Â±ï¿½"},macintosh:{type:"_sbcs",chars:"ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºâ¦Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸âÂ¤â¹âºï¬ï¬â¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï¿½ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË"},ascii:{type:"_sbcs",chars:"ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½"},tis620:{type:"_sbcs",chars:"ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿½ï¿½ï¿½ï¿½à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿½ï¿½ï¿½ï¿½"}}},function(e,t,i){var o=i(7).Buffer;t._dbcs=l;for(var s=-1,r=-2,n=-1e3,a=new Array(256),c=0;c<256;c++)a[c]=s;function l(e,t){if(this.encodingName=e.encodingName,!e)throw new Error("DBCS codec is called without the data.");if(!e.table)throw new Error("Encoding '"+this.encodingName+"' has no data.");var i=e.table();this.decodeTables=[],this.decodeTables[0]=a.slice(0),this.decodeTableSeq=[];for(var o=0;o<i.length;o++)this._addDecodeChunk(i[o]);this.defaultCharUnicode=t.defaultCharUnicode,this.encodeTable=[],this.encodeTableSeq=[];var c={};if(e.encodeSkipVals)for(o=0;o<e.encodeSkipVals.length;o++){var l=e.encodeSkipVals[o];if("number"==typeof l)c[l]=!0;else for(var h=l.from;h<=l.to;h++)c[h]=!0}if(this._fillEncodeTable(0,0,c),e.encodeAdd)for(var d in e.encodeAdd)Object.prototype.hasOwnProperty.call(e.encodeAdd,d)&&this._setEncodeChar(d.charCodeAt(0),e.encodeAdd[d]);if(this.defCharSB=this.encodeTable[0][t.defaultCharSingleByte.charCodeAt(0)],this.defCharSB===s&&(this.defCharSB=this.encodeTable[0]["?"]),this.defCharSB===s&&(this.defCharSB="?".charCodeAt(0)),"function"==typeof e.gb18030){this.gb18030=e.gb18030();var m=this.decodeTables.length,u=this.decodeTables[m]=a.slice(0),g=this.decodeTables.length,p=this.decodeTables[g]=a.slice(0);for(o=129;o<=254;o++){var f=n-this.decodeTables[0][o],v=this.decodeTables[f];for(h=48;h<=57;h++)v[h]=n-m}for(o=129;o<=254;o++)u[o]=n-g;for(o=48;o<=57;o++)p[o]=r}}function h(e,t){this.leadSurrogate=-1,this.seqObj=void 0,this.encodeTable=t.encodeTable,this.encodeTableSeq=t.encodeTableSeq,this.defaultCharSingleByte=t.defCharSB,this.gb18030=t.gb18030}function d(e,t){this.nodeIdx=0,this.prevBuf=o.alloc(0),this.decodeTables=t.decodeTables,this.decodeTableSeq=t.decodeTableSeq,this.defaultCharUnicode=t.defaultCharUnicode,this.gb18030=t.gb18030}function m(e,t){if(e[0]>t)return-1;for(var i=0,o=e.length;i<o-1;){var s=i+Math.floor((o-i+1)/2);e[s]<=t?i=s:o=s}return i}l.prototype.encoder=h,l.prototype.decoder=d,l.prototype._getDecodeTrieNode=function(e){for(var t=[];e>0;e>>=8)t.push(255&e);0==t.length&&t.push(0);for(var i=this.decodeTables[0],o=t.length-1;o>0;o--){var r=i[t[o]];if(r==s)i[t[o]]=n-this.decodeTables.length,this.decodeTables.push(i=a.slice(0));else{if(!(r<=n))throw new Error("Overwrite byte in "+this.encodingName+", addr: "+e.toString(16));i=this.decodeTables[n-r]}}return i},l.prototype._addDecodeChunk=function(e){var t=parseInt(e[0],16),i=this._getDecodeTrieNode(t);t&=255;for(var o=1;o<e.length;o++){var s=e[o];if("string"==typeof s)for(var r=0;r<s.length;){var n=s.charCodeAt(r++);if(55296<=n&&n<56320){var a=s.charCodeAt(r++);if(!(56320<=a&&a<57344))throw new Error("Incorrect surrogate pair in "+this.encodingName+" at chunk "+e[0]);i[t++]=65536+1024*(n-55296)+(a-56320)}else if(4080<n&&n<=4095){for(var c=4095-n+2,l=[],h=0;h<c;h++)l.push(s.charCodeAt(r++));i[t++]=-10-this.decodeTableSeq.length,this.decodeTableSeq.push(l)}else i[t++]=n}else{if("number"!=typeof s)throw new Error("Incorrect type '"+typeof s+"' given in "+this.encodingName+" at chunk "+e[0]);var d=i[t-1]+1;for(r=0;r<s;r++)i[t++]=d++}}if(t>255)throw new Error("Incorrect chunk in "+this.encodingName+" at addr "+e[0]+": too long"+t)},l.prototype._getEncodeBucket=function(e){var t=e>>8;return void 0===this.encodeTable[t]&&(this.encodeTable[t]=a.slice(0)),this.encodeTable[t]},l.prototype._setEncodeChar=function(e,t){var i=this._getEncodeBucket(e),o=255&e;i[o]<=-10?this.encodeTableSeq[-10-i[o]][-1]=t:i[o]==s&&(i[o]=t)},l.prototype._setEncodeSequence=function(e,t){var i,o=e[0],r=this._getEncodeBucket(o),n=255&o;r[n]<=-10?i=this.encodeTableSeq[-10-r[n]]:(i={},r[n]!==s&&(i[-1]=r[n]),r[n]=-10-this.encodeTableSeq.length,this.encodeTableSeq.push(i));for(var a=1;a<e.length-1;a++){var c=i[o];"object"==typeof c?i=c:(i=i[o]={},void 0!==c&&(i[-1]=c))}i[o=e[e.length-1]]=t},l.prototype._fillEncodeTable=function(e,t,i){for(var o=this.decodeTables[e],s=0;s<256;s++){var r=o[s],a=t+s;i[a]||(r>=0?this._setEncodeChar(r,a):r<=n?this._fillEncodeTable(n-r,a<<8,i):r<=-10&&this._setEncodeSequence(this.decodeTableSeq[-10-r],a))}},h.prototype.write=function(e){for(var t=o.alloc(e.length*(this.gb18030?4:3)),i=this.leadSurrogate,r=this.seqObj,n=-1,a=0,c=0;;){if(-1===n){if(a==e.length)break;var l=e.charCodeAt(a++)}else{l=n;n=-1}if(55296<=l&&l<57344)if(l<56320){if(-1===i){i=l;continue}i=l,l=s}else-1!==i?(l=65536+1024*(i-55296)+(l-56320),i=-1):l=s;else-1!==i&&(n=l,l=s,i=-1);var h=s;if(void 0!==r&&l!=s){var d=r[l];if("object"==typeof d){r=d;continue}"number"==typeof d?h=d:null==d&&void 0!==(d=r[-1])&&(h=d,n=l),r=void 0}else if(l>=0){var u=this.encodeTable[l>>8];if(void 0!==u&&(h=u[255&l]),h<=-10){r=this.encodeTableSeq[-10-h];continue}if(h==s&&this.gb18030){var g=m(this.gb18030.uChars,l);if(-1!=g){h=this.gb18030.gbChars[g]+(l-this.gb18030.uChars[g]);t[c++]=129+Math.floor(h/12600),h%=12600,t[c++]=48+Math.floor(h/1260),h%=1260,t[c++]=129+Math.floor(h/10),h%=10,t[c++]=48+h;continue}}}h===s&&(h=this.defaultCharSingleByte),h<256?t[c++]=h:h<65536?(t[c++]=h>>8,t[c++]=255&h):(t[c++]=h>>16,t[c++]=h>>8&255,t[c++]=255&h)}return this.seqObj=r,this.leadSurrogate=i,t.slice(0,c)},h.prototype.end=function(){if(-1!==this.leadSurrogate||void 0!==this.seqObj){var e=o.alloc(10),t=0;if(this.seqObj){var i=this.seqObj[-1];void 0!==i&&(i<256?e[t++]=i:(e[t++]=i>>8,e[t++]=255&i)),this.seqObj=void 0}return-1!==this.leadSurrogate&&(e[t++]=this.defaultCharSingleByte,this.leadSurrogate=-1),e.slice(0,t)}},h.prototype.findIdx=m,d.prototype.write=function(e){var t=o.alloc(2*e.length),i=this.nodeIdx,a=this.prevBuf,c=this.prevBuf.length,l=-this.prevBuf.length;c>0&&(a=o.concat([a,e.slice(0,10)]));for(var h=0,d=0;h<e.length;h++){var u,g=h>=0?e[h]:a[h+c];if((u=this.decodeTables[i][g])>=0);else if(u===s)h=l,u=this.defaultCharUnicode.charCodeAt(0);else if(u===r){var p=l>=0?e.slice(l,h+1):a.slice(l+c,h+1+c),f=12600*(p[0]-129)+1260*(p[1]-48)+10*(p[2]-129)+(p[3]-48),v=m(this.gb18030.gbChars,f);u=this.gb18030.uChars[v]+f-this.gb18030.gbChars[v]}else{if(u<=n){i=n-u;continue}if(!(u<=-10))throw new Error("iconv-lite internal error: invalid decoding table value "+u+" at "+i+"/"+g);for(var _=this.decodeTableSeq[-10-u],w=0;w<_.length-1;w++)u=_[w],t[d++]=255&u,t[d++]=u>>8;u=_[_.length-1]}if(u>65535){u-=65536;var b=55296+Math.floor(u/1024);t[d++]=255&b,t[d++]=b>>8,u=56320+u%1024}t[d++]=255&u,t[d++]=u>>8,i=0,l=h+1}return this.nodeIdx=i,this.prevBuf=l>=0?e.slice(l):a.slice(l+c),t.slice(0,d).toString("ucs2")},d.prototype.end=function(){for(var e="";this.prevBuf.length>0;){e+=this.defaultCharUnicode;var t=this.prevBuf.slice(1);this.prevBuf=o.alloc(0),this.nodeIdx=0,t.length>0&&(e+=this.write(t))}return this.nodeIdx=0,e}},function(e,t,i){e.exports={shiftjis:{type:"_dbcs",table:function(){return i(183)},encodeAdd:{"Â¥":92,"â¾":126},encodeSkipVals:[{from:60736,to:63808}]},csshiftjis:"shiftjis",mskanji:"shiftjis",sjis:"shiftjis",windows31j:"shiftjis",ms31j:"shiftjis",xsjis:"shiftjis",windows932:"shiftjis",ms932:"shiftjis",932:"shiftjis",cp932:"shiftjis",eucjp:{type:"_dbcs",table:function(){return i(184)},encodeAdd:{"Â¥":92,"â¾":126}},gb2312:"cp936",gb231280:"cp936",gb23121980:"cp936",csgb2312:"cp936",csiso58gb231280:"cp936",euccn:"cp936",windows936:"cp936",ms936:"cp936",936:"cp936",cp936:{type:"_dbcs",table:function(){return i(29)}},gbk:{type:"_dbcs",table:function(){return i(29).concat(i(68))}},xgbk:"gbk",isoir58:"gbk",gb18030:{type:"_dbcs",table:function(){return i(29).concat(i(68))},gb18030:function(){return i(185)},encodeSkipVals:[128],encodeAdd:{"â¬":41699}},chinese:"gb18030",windows949:"cp949",ms949:"cp949",949:"cp949",cp949:{type:"_dbcs",table:function(){return i(186)}},cseuckr:"cp949",csksc56011987:"cp949",euckr:"cp949",isoir149:"cp949",korean:"cp949",ksc56011987:"cp949",ksc56011989:"cp949",ksc5601:"cp949",windows950:"cp950",ms950:"cp950",950:"cp950",cp950:{type:"_dbcs",table:function(){return i(69)}},big5:"big5hkscs",big5hkscs:{type:"_dbcs",table:function(){return i(69).concat(i(187))},encodeSkipVals:[41676]},cnbig5:"big5hkscs",csbig5:"big5hkscs",xxbig5:"big5hkscs"}},function(e){e.exports=[["0","\0",128],["a1","ï½¡",62],["8140","ãããï¼ï¼ã»ï¼ï¼ï¼ï¼ããÂ´ï½Â¨ï¼¾ï¿£ï¼¿ã½ã¾ãããä»ãããã¼ââï¼ï¼¼ï½â¥ï½â¦â¥ââââï¼ï¼ããï¼»ï¼½ï½ï½ã",9,"ï¼ï¼Â±Ã"],["8180","Ã·ï¼â ï¼ï¼â¦â§ââ´ââÂ°â²â³âï¿¥ï¼ï¿ ï¿¡ï¼ï¼ï¼ï¼ï¼ Â§ââââââââ¡â â³â²â½â¼â»ãââââã"],["81b8","âââââââªâ©"],["81c8","â§â¨ï¿¢ââââ"],["81da","â â¥ââââ¡ââªâ«ââ½ââµâ«â¬"],["81f0","â«â°â¯â­âªâ â¡Â¶"],["81fc","â¯"],["824f","ï¼",9],["8260","ï¼¡",25],["8281","ï½",25],["829f","ã",82],["8340","ã¡",62],["8380","ã ",22],["839f","Î",16,"Î£",6],["83bf","Î±",16,"Ï",6],["8440","Ð",5,"ÐÐ",25],["8470","Ð°",5,"ÑÐ¶",7],["8480","Ð¾",17],["849f","ââââââââ¬â¤â´â¼âââââââ£â³â«â»ââ â¯â¨â·â¿ââ°â¥â¸â"],["8740","â ",19,"â ",9],["875f","ããã¢ããã§ãã¶ãããã¦ã£ã«ãã»ããããããã¡"],["877e","ã»"],["8780","ããâãâ¡ã¤",4,"ã±ã²ã¹ã¾ã½ã¼ââ¡â«â®âââ¥â ââ¿âµâ©âª"],["889f","äºåå¨é¿åææ¨å§¶é¢èµèç©æªæ¡æ¸¥æ­è¦è¦é¯µæ¢å§æ¡æ±å®å§è»é£´çµ¢ç¶¾é®æç²è¢·å®åºµæææ¡ééæä»¥ä¼ä½ä¾åå²å¤·å§å¨å°æææ°ææ¤çºçç°ç§»ç¶­ç·¯èèè¡£è¬ééºå»äºäº¥åè²éç£¯ä¸å£±æº¢é¸ç¨²è¨èé°¯åå°å½å¡å å§»å¼é£²æ·«è¤è­"],["8940","é¢é°é é»åå³å®çç¾½è¿é¨å¯éµçªºä¸ç¢è¼æ¸¦ååæ¬èé°»å§¥å©æµ¦çéåäºéé²èé¤å¡å¶å¬°å½±æ æ³æ æ°¸æ³³æ´©ççç©é ´è±è¡è© é­æ¶²ç«çé§æ¦è¬è¶é²æ¦å­å"],["8980","åå °å¥å®´å»¶æ¨æ©æ´æ²¿æ¼ççççç¿ç¸è¶èèé éé´å¡©æ¼æ±ç¥å¹å¤®å¥¥å¾å¿æ¼æºæ¨ªæ¬§æ®´çç¿è¥é´¬é´é»å²¡æ²è»åå±æ¶èæ¡¶ç¡ä¹ä¿ºå¸æ©æ¸©ç©é³ä¸åä»®ä½ä¼½ä¾¡ä½³å å¯åå¤å«å®¶å¯¡ç§æææ¶æ­æ²³ç«çç¦ç¦¾ç¨¼ç®è±èèè·è¯èè¦èª²å©è²¨è¿¦ééèä¿å³¨æçç»è¥è½è¾è³éé¤é§ä»ä¼è§£åå¡å£å»»å¿«æªææ¢ææææ¹"],["8a40","é­æ¦æ¢°æµ·ç°çççµµè¥è¹ééè²å±å¾å¤å³å®³å´æ¨æ¦æ¶¯ç¢èè¡è©²é§éª¸æµ¬é¦¨èå£æ¿èéåååå»æ¡æ¹æ ¼æ ¸æ®»ç²ç¢ºç©«è¦è§èµ«è¼é­é£éé©å­¦å²³æ¥½é¡é¡æç¬ æ¨«"],["8a80","æ©¿æ¢¶é°æ½å²åæ°æ¬æ´»æ¸æ»èè¤è½ä¸é°¹å¶æ¤æ¨ºéæ ªåç«è²ééåé´¨æ ¢èè±ç²¥åèç¦ä¹¾ä¾å å¯ååå§å·»åå ªå§¦å®å®å¯å¹²å¹¹æ£ææ£æ¾ææ¢ææ¡æ£ºæ¬¾æ­æ±æ¼¢æ¾æ½ç°çç£çç«¿ç®¡ç°¡ç·©ç¼¶ç¿°èè¦èè¦³è«è²«ééééé¢é¥éé¤¨èä¸¸å«å²¸å·ç©çç¼å²©ç¿«è´éé é¡é¡ä¼ä¼å±åå¨åºå¥å¬å¯å²å¸å¹¾å¿æ®æºææ¢ææ£æ£"],["8b40","æ©å¸°æ¯æ°æ±½ç¿ç¥å­£ç¨ç´å¾½è¦è¨è²´èµ·è»è¼é£¢é¨é¬¼äºå½åå¦å®æ¯ææ¬æ¬ºç çç¥ç¾©è»èª¼è­°æ¬èé ååå«æ¡æ©è©°ç §æµé»å´å®¢èèéä¸ä¹ä»ä¼åå¸å®®å¼æ¥æ"],["8b80","æ½æ±æ±²æ³£ç¸çç©¶çª®ç¬ç´ç³¾çµ¦æ§çå»å±å·¨ææ ææ¸ èè¨±è·é¸æ¼ç¦¦é­äº¨äº«äº¬ä¾ä¾ ååç«¶å±å¶åå¡å¿å«å¬å¢å³¡å¼·å½æ¯ææ­æææ©æ³çç­ç¯è¸èèèé·é¡é¿é¥é©ä»°åå°­ææ¥­å±æ²æ¥µçæ¡ç²åå¤åå·¾é¦æ¤æ¬£æ¬½ç´ç¦ç¦½ç­ç·è¹èè¡¿è¥è¬¹è¿éåéä¹å¶å¥åºççç©è¦èº¯é§é§é§å·æèå°ç©ºå¶å¯ééä¸²æ«é§å±å±"],["8c40","æçªæ²é´è½¡çªªçéç²æ ç¹°æ¡é¬å²åè«è¨ç¾¤è»é¡å¦è¢ç¥ä¿å¾åååå­çªåå¥å½¢å¾æµæ¶æ§æ©æ²æºæ¬æ¯æ¡æ¸ç¦ç¨½ç³»çµç¶ç¹ç½«èèèè¨è©£è­¦è»½é é¶è¸è¿é¯¨"],["8c80","åæææ¿éæ¡åæ¬ æ±ºæ½ç©´çµè¡è¨£æä»¶å¹å¦å¥å¼å¸å£å§åå å«å»ºæ²æ¸æ³æ²æ¤æ¨©ç½ç¬ç®ç ç¡¯çµ¹çè©è¦è¬è³¢è»é£éµéºé¡é¨é¹¸ååå³å¹»å¼¦æ¸æºçç¾çµè·è¨è«ºéä¹åå¤å¼åºå§å­¤å·±åº«å¼§æ¸ææ¯æ¹çç³è¢´è¡è¡è°èèªè·¨é·éé¡§é¼äºäºä¼ååå¾å¨¯å¾å¾¡ææ¢§æªçç¢èªèª¤è­·éä¹é¯äº¤ä½¼ä¾¯åååå¬åå¹å¾åå£å"],["8d40","åååå¢å¥½å­å­å®å·¥å·§å··å¹¸åºåºåº·å¼æææææ§æ»æææ´æ­æ ¡æ¢æ§æ±æ´ªæµ©æ¸¯æºç²çç¡¬ç¨¿ç³ ç´ç´çµç¶±èèè¯è±èèèªèè¡è¡¡è¬è²¢è³¼ééµé±ç ¿é¼é¤é"],["8d80","é é¦é«é´»åå«å·åå£æ·æ¿ è±ªè½éº¹åå»åå½ç©é·éµ é»çæ¼è°çå¿½æéª¨çè¾¼æ­¤é ä»å°å¤å¢¾å©æ¨ææææ ¹æ¢±æ··çç´ºè®é­äºä½åååµ¯å·¦å·®æ»æ²ç³ç è©éè£ååº§æ«åµå¬åæåå¡å¦»å®°å½©ææ¡æ ½æ­³æ¸ç½éçç ç ¦ç¥­æç´°èè£è¼éå¤å¨æç½ªè²¡å´åéªå ºæ¦è´å²å´å¼ç¢é·ºä½ååæ¾æ¨ææµçªç­ç´¢é¯æ¡é®­ç¬¹ååå·"],["8e40","å¯æ¶æ®æ¦æ­æ®ºè©éçé¯æéé®«ç¿æä¸ååå±±æ¨ææ£æ¡ç¦çç£ç®çºèè®è³é¸é¤æ¬æ«æ®ä»ä»ä¼ºä½¿åºå¸å²å£åå£«å§å§å§¿å­å±å¸å¸«å¿æææ¯å­æ¯æ½æ¨ææ­¢"],["8e80","æ­»æ°çç¥ç§ç³¸ç´ç´«è¢èè³è¦è©è©©è©¦èªè«®è³è³éé£¼æ­¯äºä¼¼ä¾åå­å¯ºææææ¬¡æ»æ²»ç¾ç½çç£ç¤ºèè³èªèè¾æ±é¹¿å¼è­é´«ç«ºè»¸å®é«ä¸å±å·å¤±å«å®¤ææ¹¿æ¼ç¾è³ªå®èç¯ å²æ´èå±¡èç¸èåå°æ¨èµ¦æç®ç¤¾ç´èè¬è»é®èéªååºå°ºæç¼çµééé«è¥å¯å¼±æ¹ä¸»åå®ææ±æ®ç©ç ç¨®è«è¶£éé¦åååªå¯¿ææ¨¹ç¶¬éååå¨"],["8f40","å®å°±å·ä¿®ææ¾æ´²ç§ç§çµç¹ç¿è­èèè¡è¥²è®è¹´è¼¯é±éé¬ééä»ä½ååå¾æææ±æ¸ç£ç¸¦ééåå¤å®¿æ·ç¥ç¸®ç²å¡¾çåºè¡è¿°ä¿å³»æ¥ç¬ç«£èé§¿åå¾ªæ¬æ¥¯æ®æ·³"],["8f80","æºæ½¤ç¾ç´å·¡éµéé å¦åææææ¸åº¶ç·ç½²æ¸è¯è·è«¸å©åå¥³åºå¾æé¤é¤å·ååå åå¬å¨åå±åå¥¨å¦¾å¨¼å®µå°å°å°å°åºåºå» å½°æ¿ææææ·æææ­æ¶æ¾æ¢¢æ¨æ¨µæ²¼æ¶æ¸æ¹ç¼ç¦ç§ççç¡ç¤ç¥¥ç§°ç« ç¬ç²§ç´¹èèèèè¡è£³è¨è¨¼è©è©³è±¡è³é¤é¦é¾éééä¸ä¸ä¸ä¹åå°åå ´å£å¬¢å¸¸ææ¾æ¡ææµç¶ç³ç©£è¸è­²é¸é å±å´é£¾"],["9040","æ­æ¤æ®ç­ç¹è·è²è§¦é£èè¾±å°»ä¼¸ä¿¡ä¾µåå¨ å¯å¯©å¿ææ¯æ°ææ£®æ¦æµ¸æ·±ç³ç¹çç¥ç§¦ç´³è£è¯èªè¦ªè¨ºèº«è¾é²ééäººä»åå¡µå£¬å°çå°½èè¨è¿é£é­ç¬¥è«é é¢å³å¨"],["9080","éå¹åå¸¥æ¨æ°´çç¡ç²ç¿ è¡°éééééçé«å´åµ©æ°æ¢è¶¨éæ®ææ¤èé éè£¾æ¾æºå¯¸ä¸ç¬çæ¯åå¶å¢å§å¾æ§ææ¿æ´ææ´æ£²æ æ­£æ¸ç²ççç²¾èå£°è£½è¥¿èª èªè«ééééæç¨èé»å¸­æææ¥ææç³ç©ç±ç¸¾èè²¬èµ¤è·¡è¹ç¢©åææ¥ææè¨­çªç¯èª¬éªçµ¶èèä»ååå å®£å°å°å·æ¦ææ°æ æ ´æ³æµæ´ææ½çç½æç©¿ç®­ç·"],["9140","ç¹ç¾¨èºèè¹è¦è©®è³è·µé¸é·é­ééé®®ååæ¼¸ç¶å¨ç¦ç¹è³ç³åå¡å²¨æªæ¾æ½æ¥çççç¤ç¥ç§ç²ç´ çµèè¨´é»é¡é¼ å§åµåå¢ååªå£®å¥ç½å®å±¤åæ£æ³æææ¿æ»"],["9180","ææ©æ¹å·£æ§æ§½æ¼ç¥äºç©ç¸çªç³ç·ç¶è¡èèè¬è¼è»è£èµ°éé­ééé¨åå¢æèèµè´é ä¿å´åå³æ¯æææ¸¬è¶³éä¿å±è³æç¶åè¢å¶æå­å­«å°ææéä»å¤å¤ªæ±°è©å¾å å¦¥æ°ææèµæ¥éé§é¨¨ä½å å¯¾èå²±å¸¯å¾æ ææ´æ¿æ³°æ»èè¿èè¢è²¸éé®éé»é¯ä»£å°å¤§ç¬¬éé¡é·¹æ»ç§ååå®ææææ²¢æ¿¯ç¢è¨é¸æ¿è«¾è¸å§è¸åª"],["9240","å©ä½éè¾°å¥ªè±å·½ç«ªè¾¿æ£è°·ç¸é±æ¨½èª°ä¸¹ååå¦ææ¢æ¦æ­æ·¡æ¹ç­ç­ç«¯ç®ªç¶»è½èèèªéå£å£å¼¾æ­ææªæ®µç·è«å¤ç¥å°å¼æ¥æºæ± ç´ç¨ç½®è´èéé¦³ç¯çç«¹ç­è"],["9280","éç§©çªè¶å«¡çä¸­ä»²å®å¿ æ½æ¼æ±æ³¨è«è¡·è¨»éé³é§æ¨ç¦çªè§èè²¯ä¸åååå¯µå¸å¸³åºå¼å¼µå½«å¾´æ²ææ¢ææ½®ççºçºè´è¹è¸è¶èª¿è«è¶è·³éé·é é³¥åæç´ææ²çè³é®é³æ´¥å¢æ¤æ§è¿½éçéå¡æ æ´æ§»ä½æ¼¬æè¾»è¦ç¶´éæ¤¿æ½°åªå£·å¬¬ç´¬çªåé£é¶´äº­ä½ååµåè²åå ¤å®å¸åºåº­å»·å¼ææµæºææ¢¯æ±ç¢ç¦ç¨ç· èè¨è«¦è¹é"],["9340","é¸é­éé¼æ³¥ææ¢æµæ»´çç¬é©éæººå²å¾¹æ¤è½è¿­éå¸å¡«å¤©å±åºæ·»çºçè²¼è»¢é¡ç¹ä¼æ®¿æ¾±ç°é»ååå µå¡å¦¬å± å¾æææ¸¡ç»èè³­éé½éç ¥ç ºåªåº¦åå¥´æååå¬"],["9380","åååå¡å¡å¥å®å³¶å¶æ¼ææ­æ±æ¡æ¢¼æ£çæ·æ¹¯æ¶ç¯çå½çç¥·ç­ç­ç­ç³çµ±å°è£è©è¤è¨è¬è±è¸éééé¶é ­é¨°éåååå å°æ§ææ´ç³ç«¥è´èééå³ é´å¿å¾å¾³æ¶ç¹ç£ç¦¿ç¯¤æ¯ç¬èª­æ æ©¡å¸çªæ¤´å±é³¶è«å¯éçå¸å±¯ææ¦æ²è±éé åæéå¥é£åä¹åªèè¬çæºéæ¥¢é¦´ç¸ç·åæ¥ è»é£æ±äºå°¼å¼è¿©åè³èè¹å»¿æ¥ä¹³å¥"],["9440","å¦å°¿é®ä»»å¦å¿èªæ¿¡ç¦°ç¥¢å¯§è±ç«ç±å¹´å¿µæ»æçç²ä¹å»¼ä¹åå¢æ©æ¿ç´è½è³è¿è¾²è¦è¤å·´ææ­è¦æ·æ³¢æ´¾ç¶ç ´å©ç½µè­é¦¬ä¿³å»ææææ¯ççèèºè¼©éåå¹åªæ¢"],["9480","æ¥³ç¤ç½è²·å£²è³ éªéè¿ç§¤ç§è©ä¼¯å¥åæææ³ç½ç®ç²è¶èè¿«ææ¼ çç¸è«é§éº¦å½ç®±ç¡²ç®¸èç­æ«¨å¹¡èçç å«é¢æºçºéé«ªä¼ç½°æç­é¥é³©åºå¡è¤é¼ä¼´å¤åååå¸æ¬ææ¿æ°¾æ±çç¯ç­çç¹è¬è©è²©ç¯éç©é é£¯æ½æ©çªç¤ç£èè®åªåå¦å¦åºå½¼æ²ææ¹æ«ææ¯æ³ç²ç®ç¢ç§ç·ç½·è¥è¢«èª¹è²»é¿éé£æ¨ç°¸åå°¾å¾®ææ¯çµçç¾"],["9540","é¼»æç¨å¹çé«­å½¦èè±èå¼¼å¿ç¢ç­é¼æ¡§å§«åªç´ç¾è¬¬ä¿µå½ªæ¨æ°·æ¼ç¢ç¥¨è¡¨è©è±¹å»æçç§èé¨é²èè­é°­åå½¬ææµçè²§è³é »æç¶ä¸ä»å å¤«å©¦å¯å¨å¸åºææ¶æ·"],["9580","æ§æ®æµ®ç¶ç¬¦èèèè­è² è³¦èµ´ééä¾®æ«æ­¦èè¡èªé¨å°æ¥é¢¨èºèä¼å¯å¾©å¹æç¦è¹è¤è¦æ·µå¼ææ²¸ä»ç©é®åå»å´å¢³æ¤æ®çå¥®ç²ç³ç´é°æèä¸ä½µåµå¡å¹£å¹³å¼æä¸¦è½ééç±³é å»å£çç¢§å¥ç¥èç®åå¤çç¯ç·¨è¾ºè¿éä¾¿åå¨©å¼é­ä¿èéªåææ­©ç«è£è¼ç©åå¢æææ®æ¯ç°¿è©å£ä¿¸ååå ±å¥å®å³°å³¯å´©åºæ±æ§æ¾æ¹æ"],["9640","æ³æ³¡ç¹ç ²ç¸«èè³èè¬èè¤è¨ªè±é¦éé£½é³³éµ¬ä¹äº¡åååå¦¨å¸½å¿å¿æ¿æ´æææ£åç´¡èªè¨è¬è²è²¿é¾é²å é ¬åååå¢¨æ²æ´ç§ç¦ç©é¦åæ²¡æ®å å¹å¥æ¬ç¿»å¡ç"],["9680","æ©ç£¨é­éº»åå¦¹æ§ææ¯å©æ§å¹èæé®ªæ¾é±æ¡äº¦ä¿£åæ¹æ«æ²«è¿ä¾­ç¹­éº¿ä¸æ¢æºæ¼«èå³æªé­å·³ç®å²¬å¯èæ¹èç¨èå¦ç²æ°ç åå¤¢ç¡ççé§éµ¡æ¤å©¿å¨å¥åå½æçè¿·éé³´å§ªçæ»åæ£ç¶¿ç·¬é¢éººæ¸æ¨¡èå¦å­æ¯çç²ç¶²èèå²æ¨é»ç®æ¢å¿é¤å°¤æ»ç±¾è²°åæ¶ç´éåä¹å¶å¤çºè¶éå¼¥ç¢åå½¹ç´è¬è¨³èºéæ³è®éæææ²¹ç"],["9740","è«­è¼¸å¯ä½åªååå®¥å¹½æ æææææ¹§æ¶ç¶ç·ç±ç¥è£èªéééµéèå¤äºä½ä¸èªè¼¿é å­å¹¼å¦å®¹åº¸ææºæææ¥æ§æ´æº¶çç¨çª¯ç¾èèèè¦è¬¡è¸é¥é½é¤æ¾ææ¬²"],["9780","æ²æµ´ç¿ç¿¼æ·ç¾èºè£¸æ¥è±é ¼é·æ´çµ¡è½éªä¹±åµåµæ¬æ¿«èè­è¦§å©åå±¥ææ¢¨ççç¢è£è£¡éé¢é¸å¾çç«èæ ç¥åæµæºççç¡«ç²éç«é¾ä¾¶æ®æèäºäº®åä¸¡åå¯®ææ¢æ¶¼ççç­ç¨ç³§è¯è«é¼ééµé åç·å«åææ·çç³è¨è¼ªé£é±éºç å¡æ¶ç´¯é¡ä»¤ä¼¶ä¾å·å±å¶ºæç²ç¤¼èé´é·é¶ééºé½¢æ¦æ­´åå£çè£å»æææ¼£çç°¾ç·´è¯"],["9840","è®é£é¬åé­¯æ«çè³è·¯é²å´å©å»å¼ææ¥¼æ¦æµªæ¼ç¢ç¼ç¯­èè¾èéå­éºç¦èé²è«å­åè©±æ­ªè³èææ é·²äºäºé°è©«èè¨æ¤æ¹¾ç¢è"],["989f","å¼ä¸ä¸ä¸ªä¸±ä¸¶ä¸¼ä¸¿ä¹ä¹ä¹äºäºè±«äºèå¼äºäºäºäº äº¢äº°äº³äº¶ä»ä»ä»ä»ä»ä»ä»ä»­ä»ä»·ä¼ä½ä¼°ä½ä½ä½ä½ä½¶ä¾ä¾ä¾ä½»ä½©ä½°ä¾ä½¯ä¾ä¾åä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿¤ä¿¥åå¨ååªå¥åä¼ä¿¶å¡å©å¬ä¿¾ä¿¯ååååæåååååå¬å¸åååå´å²"],["9940","ååå³åååå¥å­å£å®å¹åµåååååååå¡åºå·å¼å»å¿ååååå¢ç«¸å©åªå®ååååååååååå¤å¦å¢å©åªå«å³å±å²å°åµå½åååå èå©å­"],["9980","å°åµå¾ååååå§åªå®å³å¹åååååååªå´å©å³å¿å½åååå±ååè¾¨è¾§å¬å­å¼åµååååå£å¦é£­å å³åµå¸å¹ååç¸åååååå£å¯å±å³å¸åååä¸ååååå©å®å¤å»å·ååå å¦å¥å®å°å¶åç°éåæ¼ç®å®å¨å­åºåå½åå¬å­å¼å®å¶å©ååååµååå±å·å°åå»åå¶ååååå¢å¸å¥å¬ååå¨"],["9a40","å«åå¤å¾å¼åå¥å¦ååå½å®å­åºå¢å¹åå£åå®ååååå¸å³åååå¯ååå»å¾ååå®å¼åå©åå¨åååååå¤ååå·åå¾å½åå¹ååçå´å¶å²å¸"],["9a80","å«å¤å¯å¬åªåååå ååå¥å®å¶å´åå¼ååååååååå®å¹åå¿ååååååååååå¦å·å¸åå»ååå©ååå¡å¿ååå å³å¤åªå°åååååå åå£å å å å¡²å ¡å¡¢å¡å¡°æ¯å¡å ½å¡¹å¢å¢¹å¢å¢«å¢ºå£å¢»å¢¸å¢®å£å£å£å£å£å£å£¥å£å£¤å£å£¯å£ºå£¹å£»å£¼å£½å¤å¤å¤å¤æ¢¦å¤¥å¤¬å¤­å¤²å¤¸å¤¾ç«å¥å¥å¥å¥å¥å¥¢å¥ å¥§å¥¬å¥©"],["9b40","å¥¸å¦å¦ä½ä¾«å¦£å¦²å§å§¨å§å¦å§å§å¨¥å¨å¨å¨å¨å¨å©å©¬å©å¨µå¨¶å©¢å©ªåªåª¼åª¾å«å«åª½å«£å«å«¦å«©å«å«ºå«»å¬å¬å¬å¬²å«å¬ªå¬¶å¬¾å­å­å­å­å­å­å­å­¥å­©å­°å­³å­µå­¸æå­ºå®"],["9b80","å®å®¦å®¸å¯å¯å¯å¯å¯å¯¤å¯¦å¯¢å¯å¯¥å¯«å¯°å¯¶å¯³å°å°å°å°å°å° å°¢å°¨å°¸å°¹å±å±å±å±å±å±å­±å±¬å±®ä¹¢å±¶å±¹å²å²å²å¦å²«å²»å²¶å²¼å²·å³å²¾å³å³å³©å³½å³ºå³­å¶å³ªå´å´å´åµå´å´å´å´å´¢å´å´å´åµåµåµåµåµ¬åµ³åµ¶å¶å¶å¶å¶¢å¶å¶¬å¶®å¶½å¶å¶·å¶¼å·å·å·å·å·å·å·«å·²å·µå¸å¸å¸å¸å¸å¸¶å¸·å¹å¹å¹å¹å¹å¹å¹å¹¢å¹¤å¹å¹µå¹¶å¹ºéº¼å¹¿åº å»å»å»å»å»"],["9c40","å»å»£å»å»å»å»¢å»¡å»¨å»©å»¬å»±å»³å»°å»´å»¸å»¾å¼å¼å½å½å¼å¼å¼å¼©å¼­å¼¸å½å½å½å½å¼¯å½å½å½å½å½¡å½­å½³å½·å¾å¾å½¿å¾å¾å¾å¾å¾å¾å¾å¾ å¾¨å¾­å¾¼å¿å¿»å¿¤å¿¸å¿±å¿æ³å¿¿æ¡æ "],["9c80","æææ©ææ±æææ«æ¦ææºæææªæ·æææææ£ææ¤ææ¬æ«ææææ§ææææææææ§ææ¡æ¸æ ææ´å¿°æ½ææµæææææ¶æ·ææ´æºææ¡æ»æ±ææææ¾æ¨æ§ææ¿æ¼æ¬æ´æ½æææ³æ·ææææ«æ´æ¯æ¥æ±ææææµææææ¬æææææ«æ®ææææ·ææææºæç½¹ææ¦æ£æ¶æºæ´æ¿æ½æ¼æ¾æææææææ"],["9d40","ææ¡æªæ®æ°æ²æ³ææææ£ææ æ¨æ¼æææ¾æææææææææ»ææ¿ææææææææææææ®æ±æ§æææ¯æµææ¾æææææææ«æ¶æ£ææææµæ«"],["9d80","æ©æ¾æ©æææ£æææ¶æææ´æææ¦æ¶æææ¨ææ§æ¯æ¶ææªæææ¥æ©ææ¼æææææ»æææ±æ§èæ æ¡æ¬æ£æ¯æ¬æ¶æ´æ²æºææ½ææææ¤æ£æ«æ´æµæ·æ¶æ¸çææææææææ²æ¸ææè®æææ«æ·æææææææææ æ¡æ±æ²æææ»æ³æµæ¶æ´ææææææææ¤æ§æ¨ææ¢æ°æææææææææ¹ææ¾æ¼"],["9e40","ææ¸æææ æ¿æ¦æ©æ°æµæ·ææææ¦æ§é¸æ®æ¿æ¶ææ¸æ·æææ ææ£æ¤ææ°æ©æ¼æªæææ¦æ¡ææ·æ¯æ´æ¬æ³æ©æ¸æ¤æææ¢æ®æ¹æææ§æªæ æ¡æ ©æ¡æ¡æ ²æ¡"],["9e80","æ¢³æ «æ¡æ¡£æ¡·æ¡¿æ¢æ¢æ¢­æ¢æ¢æ¢æ¢æª®æ¢¹æ¡´æ¢µæ¢ æ¢ºæ¤æ¢æ¡¾æ¤æ£æ¤æ£æ¤¢æ¤¦æ£¡æ¤æ£æ£æ£§æ£æ¤¶æ¤æ¤æ£æ££æ¤¥æ£¹æ£ æ£¯æ¤¨æ¤ªæ¤æ¤£æ¤¡æ£æ¥¹æ¥·æ¥æ¥¸æ¥«æ¥æ¥¾æ¥®æ¤¹æ¥´æ¤½æ¥æ¤°æ¥¡æ¥æ¥æ¦æ¥ªæ¦²æ¦®æ§æ¦¿æ§æ§æ¦¾æ§å¯¨æ§æ§æ¦»æ§æ¦§æ¨®æ¦æ¦ æ¦æ¦æ¦´æ§æ§¨æ¨æ¨æ§¿æ¬æ§¹æ§²æ§§æ¨æ¦±æ¨æ§­æ¨æ§«æ¨æ¨æ«æ¨£æ¨æ©æ¨æ©²æ¨¶æ©¸æ©æ©¢æ©æ©¦æ©æ¨¸æ¨¢æªæªæª æªæª¢æª£"],["9f40","æªèæª»æ«æ«æª¸æª³æª¬æ«æ«æ«æªªæ«æ«ªæ«»æ¬èæ«ºæ¬æ¬é¬±æ¬æ¬¸æ¬·çæ¬¹é£®æ­æ­æ­æ­æ­æ­æ­æ­æ­¡æ­¸æ­¹æ­¿æ®æ®æ®æ®æ®æ®æ®æ®¤æ®ªæ®«æ®¯æ®²æ®±æ®³æ®·æ®¼æ¯æ¯æ¯æ¯æ¯¬æ¯«æ¯³æ¯¯"],["9f80","éº¾æ°æ°æ°æ°æ°¤æ°£æ±æ±æ±¢æ±ªæ²æ²æ²æ²æ²æ±¾æ±¨æ±³æ²æ²æ³æ³±æ³æ²½æ³æ³æ³æ²®æ²±æ²¾æ²ºæ³æ³¯æ³æ³ªæ´è¡æ´¶æ´«æ´½æ´¸æ´æ´µæ´³æ´æ´æµ£æ¶æµ¤æµæµ¹æµæ¶æ¶æ¿¤æ¶æ·¹æ¸æ¸æ¶µæ·æ·¦æ¶¸æ·æ·¬æ·æ·æ·¨æ·æ·æ·ºæ·æ·¤æ·æ·ªæ·®æ¸­æ¹®æ¸®æ¸æ¹²æ¹æ¸¾æ¸£æ¹«æ¸«æ¹¶æ¹æ¸æ¹æ¸ºæ¹æ¸¤æ»¿æ¸æ¸¸æºæºªæºæ»æº·æ»æº½æº¯æ»æº²æ»æ»æºæº¥æ»æºæ½æ¼çæ»¬æ»¸æ»¾æ¼¿æ»²æ¼±æ»¯æ¼²æ»"],["e040","æ¼¾æ¼æ»·æ¾æ½ºæ½¸æ¾æ¾æ½¯æ½æ¿³æ½­æ¾æ½¼æ½æ¾æ¾æ¿æ½¦æ¾³æ¾£æ¾¡æ¾¤æ¾¹æ¿æ¾ªæ¿æ¿æ¿¬æ¿æ¿æ¿±æ¿®æ¿ççæ¿ºçççæ¿¾ççæ½´çççç°ç¾ç²çç£ççç¯ç±ç¬ç¸ç³ç®ççç"],["e080","ççç½ççç¥ççç¦ç¢ççç¬çç»ççç¨ç¬çç¹ç¾ççççç ç¬ç§çµç¼ç¹ç¿çççç¨ç­ç¬ç°ç²ç»ç¼ç¿ççççç´ç¾çççççç¢ç§ç¹ç²çççççç¢ç ç¡ç¹ç·åçççççç´ç¯ç©ç¥ç¾ççé»ççªç¨ç°ç¸çµç»çºçç³çç»çç¥ç®çç¢çç¯ç¥ç¸ç²çºçç¿ççççç©ç°ç£çªç¶ç¾ççç§çççç±"],["e140","ç ç£ç§ç©ç®ç²ç°ç±ç¸ç·çççççççççç¦ç¬ç¼çççççççç©ç¤ç§ç«ç­ç¸ç¶ççç´ççççççç¥ç£çç³ççµç½ç¸ç¼ç±ççççç£çç¾ç¿"],["e180","ç¼çç°çºç²ç³ççççç§ç ç¡ç¢ç¤ç´ç°ç»çççççç¡ç¢ç¨ç©çªç§ç¬ç°ç²ç¶ç¸ç¼çççççççççç°ç´ç¸ç¹çºçççççç¡ç¥ç§çªè¯ç»çççç©ç¤çç¥ç¦çç·ç¸ççç¨ç«çç¥ç¿ç¾ç¹çççç çç°ç¶ç¹ç¿ç¼ç½ç»çççççç£ç®ç¼ç ç ç¤¦ç  ç¤ªç¡ç¢ç¡´ç¢ç¡¼ç¢ç¢ç¢£ç¢µç¢ªç¢¯ç£ç£ç£ç£ç¢¾ç¢¼ç£ç£ç£¬"],["e240","ç£§ç£ç£½ç£´ç¤ç¤ç¤ç¤ç¤¬ç¤«ç¥ç¥ ç¥ç¥ç¥ç¥ç¥ç¥ºç¥¿ç¦ç¦ç¦§é½ç¦ªç¦®ç¦³ç¦¹ç¦ºç§ç§ç§§ç§¬ç§¡ç§£ç¨ç¨ç¨ç¨ç¨ ç¨ç¦ç¨±ç¨»ç¨¾ç¨·ç©ç©ç©ç©¡ç©¢ç©©é¾ç©°ç©¹ç©½çªçªçªçªçªçª©ç«çª°"],["e280","çª¶ç«ç«çª¿éç«ç«ç«ç«ç«ç«ç«ç«ç«ç«¡ç«¢ç«¦ç«­ç«°ç¬ç¬ç¬ç¬ç¬³ç¬ç¬ç¬ç¬µç¬¨ç¬¶ç­ç­ºç¬ç­ç¬ç­ç­ç­µç­¥ç­´ç­§ç­°ç­±ç­¬ç­®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç­ç®ç¯ç¯ç¯ç¯ç®´ç¯ç¯ç¯©ç°ç°ç¯¦ç¯¥ç± ç°ç°ç°ç¯³ç¯·ç°ç°ç¯¶ç°£ç°§ç°ªç°ç°·ç°«ç°½ç±ç±ç±ç±ç±ç±ç±ç±ç±¤ç±ç±¥ç±¬ç±µç²ç²ç²¤ç²­ç²¢ç²«ç²¡ç²¨ç²³ç²²ç²±ç²®ç²¹ç²½ç³ç³ç³ç³ç³ç³ç³¢é¬»ç³¯ç³²ç³´ç³¶ç³ºç´"],["e340","ç´ç´ç´ç´çµçµç´®ç´²ç´¿ç´µçµçµ³çµçµçµ²çµ¨çµ®çµçµ£ç¶ç¶çµç¶çµ½ç¶ç¶ºç¶®ç¶£ç¶µç·ç¶½ç¶«ç¸½ç¶¢ç¶¯ç·ç¶¸ç¶ç¶°ç·ç·ç·¤ç·ç·»ç·²ç·¡ç¸ç¸ç¸£ç¸¡ç¸ç¸±ç¸ç¸ç¸ç¸¢ç¹ç¹¦ç¸»ç¸µç¸¹ç¹ç¸·"],["e380","ç¸²ç¸ºç¹§ç¹ç¹ç¹ç¹ç¹ç¹¹ç¹ªç¹©ç¹¼ç¹»çºç·ç¹½è¾®ç¹¿çºçºçºçºçºçºçºçºçºçºçºç¼¸ç¼ºç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ ç½¨ç½©ç½§ç½¸ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾£ç¾¯ç¾²ç¾¹ç¾®ç¾¶ç¾¸è­±ç¿ç¿ç¿ç¿ç¿ç¿¡ç¿¦ç¿©ç¿³ç¿¹é£èèèèèèèè¡è¨è¿è»èèèèèèè¢è¨è³è²è°è¶è¹è½è¿èèèèèèè­åè¬èè¥èèèèèèè¯è±èè©è£è¯è"],["e440","éèè¾èèè¼è±è®è¥è¦è´èèèèèè èè¤è£èèè©è°èµè¾è¸è½èèèºèèèèèèèèè è§èºè»è¾èèèèèèèèè©è«è¸è³èèèèèèè¤"],["e480","è¢è¨èªè«è®è±è·è¸è¾èèè«èè»è¬è¡è£èèè´è³èºèèè»è¹èèèèèèµè´èè²è±èè¹èèè¯è«èèèèèªèè¢èè£èèèè¼èµè³èµè èè¨è´èè«èè½èèèèè·èè è²èè¢è è½è¸èè»è­èªè¼èèè·è«è­è®èè©èè¬è¯è¹èµèè¢è¹è¿èèèè»èèèèèè¡è¡è¿è´èèè¬èèèè¼èè£èè"],["e540","èèèèèè¤èèèè¨è­èèèªèèè·è¾èèèºèè¹èèèè¥èè¹èèèè¾èºèè¢èè°è¿èä¹èèè§è±èè£è©èªèèè¶è¯èèè°èè £è«èèè©è¬"],["e580","èèè¯èèèèèè»èèèè¹èè´è¿è·è»è¥è©èè èè¸èèè´èè¨è®èèè£èªè è¢èèè¯èè½èèéè«èè³èèè»è¯è²è è è è¾è¶è·è èè è è è ¢è ¡è ±è ¶è ¹è §è »è¡è¡è¡è¡è¡è¡¢è¡«è¢è¡¾è¢è¡µè¡½è¢µè¡²è¢è¢è¢è¢®è¢è¢¢è¢è¢¤è¢°è¢¿è¢±è£è£è£è£è£è£è£¹è¤è£¼è£´è£¨è£²è¤è¤è¤è¤è¥è¤è¤¥è¤ªè¤«è¥è¥è¤»è¤¶è¤¸è¥è¤è¥ è¥"],["e640","è¥¦è¥¤è¥­è¥ªè¥¯è¥´è¥·è¥¾è¦è¦è¦è¦è¦è¦¡è¦©è¦¦è¦¬è¦¯è¦²è¦ºè¦½è¦¿è§è§è§è§è§§è§´è§¸è¨è¨è¨è¨è¨è¨è¨¥è¨¶è©è©è©è©è©è©¼è©­è©¬è©¢èªèªèªèª¨èª¡èªèª¥èª¦èªèª£è«è«è«è«è««è«³è«§"],["e680","è«¤è«±è¬è« è«¢è«·è«è«è¬è¬è¬è«¡è¬è¬è¬è¬ è¬³é«è¬¦è¬«è¬¾è¬¨è­è­è­è­è­è­è­è­è­«è­è­¬è­¯è­´è­½è®è®è®è®è®è®è®è®è°ºè±è°¿è±è±è±è±è±è±¢è±¬è±¸è±ºè²è²è²è²è²è²è²è±¼è²æè²­è²ªè²½è²²è²³è²®è²¶è³è³è³¤è³£è³è³½è³ºè³»è´è´è´è´è´è´è´é½è´è³è´è´èµ§èµ­èµ±èµ³è¶è¶è·è¶¾è¶ºè·è·è·è·è·è·è·ªè·«è·è·£è·¼è¸è¸è·¿è¸è¸è¸è¸è¹è¸µè¸°è¸´è¹"],["e740","è¹è¹è¹è¹è¹è¹è¹¤è¹ è¸ªè¹£è¹è¹¶è¹²è¹¼èºèºèºèºèºèºèºèºèºèºèºªèº¡èº¬èº°è»èº±èº¾è»è»è»è»è»£è»¼è»»è»«è»¾è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼¦è¼³è¼»è¼¹è½è½è¼¾è½è½è½è½è½è½"],["e780","è½¢è½£è½¤è¾è¾è¾£è¾­è¾¯è¾·è¿è¿¥è¿¢è¿ªè¿¯éè¿´éè¿¹è¿ºééé¡ééééé§é¶éµé¹è¿¸ééééééé¾éééé¨é¯é¶é¨é²éé½éééééé¨é¯é±éµé¢é¤æééééé²é°éééé£é¥é©é³é²éééé¢é«é¯éªéµé´éºéééééééé¡éé¼éµé¶éé¿éé¬ééééééé¤ééé¿ééééééééé¹é·é©ééºéé®"],["e840","éé¢éé£éºéµé»éé é¼é®éé°é¬é­éé¹ééé¨é¥éééééé¤ééééééé¶é«éµé¡éºééééé é¢ééªé©é°éµé·é½éé¼é¾éé¿ééééééé"],["e880","é é¨é§é­é¼é»é¹é¾éæ¿¶éééééééé¡é¥é¢é¡é¨é®é¯ééééé·ééééé¦é²é¬éééééªé§é±é²é°é´é¶é¸é¹ééééè¥éééé¹éééééééééé¤éªé°é¹é½é¾ééééééé é¤é¦é¨åé«é±é¹éé¼ééºéééééé¨é¦é£é³é´éééééé­é½é²ç«é¶éµé é é ¸é ¤é ¡é ·é ½é¡é¡é¡é¡«é¡¯é¡°"],["e940","é¡±é¡´é¡³é¢ªé¢¯é¢±é¢¶é£é£é£é£©é£«é¤é¤é¤é¤é¤é¤¡é¤é¤é¤¤é¤ é¤¬é¤®é¤½é¤¾é¥é¥é¥é¥é¥é¥é¥é¥é¥é¦é¦é¦¥é¦­é¦®é¦¼é§é§é§é§é§é§­é§®é§±é§²é§»é§¸é¨é¨é¨é§¢é¨é¨«é¨·é©é©é©é©"],["e980","é¨¾é©é©é©é©é©é©¢é©¥é©¤é©©é©«é©ªéª­éª°éª¼é«é«é«é«é«é«é«é«¢é«£é«¦é«¯é««é«®é«´é«±é«·é«»é¬é¬é¬é¬é¬¢é¬£é¬¥é¬§é¬¨é¬©é¬ªé¬®é¬¯é¬²é­é­é­é­é­é­é­é­´é®é®é®é®é®é®é® é®¨é®´é¯é¯é®¹é¯é¯é¯é¯é¯£é¯¢é¯¤é¯é¯¡é°ºé¯²é¯±é¯°é°é°é°é°é°é°é°é°é°é°é°®é°é°¥é°¤é°¡é°°é±é°²é±é°¾é±é± é±§é±¶é±¸é³§é³¬é³°é´é´é³«é´é´é´ªé´¦é¶¯é´£é´éµé´é´éµé´¿é´¾éµéµ"],["ea40","éµéµéµ¤éµéµéµéµ²é¶é¶é¶«éµ¯éµºé¶é¶¤é¶©é¶²é·é·é¶»é¶¸é¶ºé·é·é·é·é·é·¸é·¦é·­é·¯é·½é¸é¸é¸é¹µé¹¹é¹½éºéºéºéºéºéºéºéºéº¥éº©éº¸éºªéº­é¡é»é»é»é»é»é»é»é»é» é»¥é»¨é»¯"],["ea80","é»´é»¶é»·é»¹é»»é»¼é»½é¼é¼ç·é¼é¼¡é¼¬é¼¾é½é½é½é½£é½é½ é½¡é½¦é½§é½¬é½ªé½·é½²é½¶é¾é¾é¾ å ¯æ§éç¤åç"],["ed40","çºè¤ééèä¿ç»æ±æ£é¹æ»å½ä¸¨ä»¡ä»¼ä¼ä¼ä¼¹ä½ä¾ä¾ä¾ä¾ä¿åå¢ä¿¿ååå°ååå´ååå¤åå¾å¬ååå¦ååååå¤å²åå²åï¨ååå©å¿ååå¥å¬ååï¨"],["ed80","ï¨å¢å¢²å¤å¥å¥å¥å¥£å¦¤å¦ºå­å¯ç¯å¯å¯¬å°å²¦å²ºå³µå´§åµï¨åµåµ­å¶¸å¶¹å·å¼¡å¼´å½§å¾·å¿ææææææ æ²ææ·æ°æææ¦æµæ ææææææ»ææ®ææ¤æ¥ææï¨æ³ææ æ²æ¿æºæï¤©æ¦æ»æ¡ææ æ¡æ£ï¨æ¥¨ï¨æ¦æ§¢æ¨°æ©«æ©æ©³æ©¾æ«¢æ«¤æ¯æ°¿æ±æ²æ±¯æ³æ´æ¶æµ¯æ¶æ¶¬æ·æ·¸æ·²æ·¼æ¸¹æ¹æ¸§æ¸¼æº¿æ¾æ¾µæ¿µççç¨çç«çççççï¨çç¾ç±"],["ee40","ç¾ç¤ï¨ç·ç½ççç£çççµç¦çªç©ç®ç¢çççç¯ççççç¦ï¨çå¯ç ¡ç¡ç¡¤ç¡ºç¤°ï¨ï¨ï¨ç¦ï¨ç¦ç«ç«§ï¨ç««ç®ï¨çµçµç¶·ç¶ ç·ç¹ç½ç¾¡ï¨èè¢è¿èè¶èè´èè"],["ee80","è«ï¨è°ï¨ ï¨¡è è£µè¨è¨·è©¹èª§èª¾è«ï¨¢è«¶è­è­¿è³°è³´è´èµ¶ï¨£è»ï¨¤ï¨¥é§éï¨¦éé§éééé­é®é¤é¥ééééºéé¼éééé¹é§é§é·é¸é§éééï¨§éé éé¥é¡é»ï¨¨éé¿ééé°éé¤ééé¸é±éééï§ï¨©éé¯é³é»éééééé¡é¡¥ï¨ªï¨«é¤§ï¨¬é¦é©é«é«é­µé­²é®é®±é®»é°éµ°éµ«ï¨­é¸é»"],["eeef","â°",9,"ï¿¢ï¿¤ï¼ï¼"],["f040","î",62],["f080","î¿",124],["f140","î¼",62],["f180","î»",124],["f240","î¸",62],["f280","î·",124],["f340","î´",62],["f380","î³",124],["f440","î°",62],["f480","î¯",124],["f540","î¬",62],["f580","î«",124],["f640","î¨",62],["f680","î§",124],["f740","î¤",62],["f780","î£",124],["f840","î ",62],["f880","î",124],["f940","î"],["fa40","â°",9,"â ",9,"ï¿¢ï¿¤ï¼ï¼ã±ââ¡âµçºè¤ééèä¿ç»æ±æ£é¹æ»å½ä¸¨ä»¡ä»¼ä¼ä¼ä¼¹ä½ä¾ä¾ä¾ä¾ä¿åå¢ä¿¿ååå°ååå´åå"],["fa80","å¤åå¾å¬ååå¦ååååå¤å²åå²åï¨ååå©å¿ååå¥å¬ååï¨ï¨å¢å¢²å¤å¥å¥å¥å¥£å¦¤å¦ºå­å¯ç¯å¯å¯¬å°å²¦å²ºå³µå´§åµï¨åµåµ­å¶¸å¶¹å·å¼¡å¼´å½§å¾·å¿ææææææ æ²ææ·æ°æææ¦æµæ ææææææ»ææ®ææ¤æ¥ææï¨æ³ææ æ²æ¿æºæï¤©æ¦æ»æ¡ææ æ¡æ£ï¨æ¥¨ï¨æ¦æ§¢æ¨°æ©«æ©æ©³æ©¾æ«¢æ«¤æ¯æ°¿æ±æ²æ±¯æ³æ´æ¶æµ¯"],["fb40","æ¶æ¶¬æ·æ·¸æ·²æ·¼æ¸¹æ¹æ¸§æ¸¼æº¿æ¾æ¾µæ¿µççç¨çç«çççççï¨çç¾ç±ç¾ç¤ï¨ç·ç½ççç£çççµç¦çªç©ç®ç¢çççç¯ççççç¦ï¨çå¯ç ¡ç¡ç¡¤ç¡ºç¤°ï¨ï¨"],["fb80","ï¨ç¦ï¨ç¦ç«ç«§ï¨ç««ç®ï¨çµçµç¶·ç¶ ç·ç¹ç½ç¾¡ï¨èè¢è¿èè¶èè´èèè«ï¨è°ï¨ ï¨¡è è£µè¨è¨·è©¹èª§èª¾è«ï¨¢è«¶è­è­¿è³°è³´è´èµ¶ï¨£è»ï¨¤ï¨¥é§éï¨¦éé§éééé­é®é¤é¥ééééºéé¼éééé¹é§é§é·é¸é§éééï¨§éé éé¥é¡é»ï¨¨éé¿ééé°éé¤ééé¸é±éééï§ï¨©éé¯é³é»éééééé¡é¡¥ï¨ªï¨«é¤§ï¨¬é¦é©é«"],["fc40","é«é­µé­²é®é®±é®»é°éµ°éµ«ï¨­é¸é»"]]},function(e){e.exports=[["0","\0",127],["8ea1","ï½¡",62],["a1a1","ãããï¼ï¼ã»ï¼ï¼ï¼ï¼ããÂ´ï½Â¨ï¼¾ï¿£ï¼¿ã½ã¾ãããä»ãããã¼ââï¼ï¼¼ï½â¥ï½â¦â¥ââââï¼ï¼ããï¼»ï¼½ï½ï½ã",9,"ï¼ï¼Â±ÃÃ·ï¼â ï¼ï¼â¦â§ââ´ââÂ°â²â³âï¿¥ï¼ï¿ ï¿¡ï¼ï¼ï¼ï¼ï¼ Â§ââââââ"],["a2a1","ââ¡â â³â²â½â¼â»ãââââã"],["a2ba","âââââââªâ©"],["a2ca","â§â¨ï¿¢ââââ"],["a2dc","â â¥ââââ¡ââªâ«ââ½ââµâ«â¬"],["a2f2","â«â°â¯â­âªâ â¡Â¶"],["a2fe","â¯"],["a3b0","ï¼",9],["a3c1","ï¼¡",25],["a3e1","ï½",25],["a4a1","ã",82],["a5a1","ã¡",85],["a6a1","Î",16,"Î£",6],["a6c1","Î±",16,"Ï",6],["a7a1","Ð",5,"ÐÐ",25],["a7d1","Ð°",5,"ÑÐ¶",25],["a8a1","ââââââââ¬â¤â´â¼âââââââ£â³â«â»ââ â¯â¨â·â¿ââ°â¥â¸â"],["ada1","â ",19,"â ",9],["adc0","ããã¢ããã§ãã¶ãããã¦ã£ã«ãã»ããããããã¡"],["addf","ã»ããâãâ¡ã¤",4,"ã±ã²ã¹ã¾ã½ã¼ââ¡â«â®âââ¥â ââ¿âµâ©âª"],["b0a1","äºåå¨é¿åææ¨å§¶é¢èµèç©æªæ¡æ¸¥æ­è¦è¦é¯µæ¢å§æ¡æ±å®å§è»é£´çµ¢ç¶¾é®æç²è¢·å®åºµæææ¡ééæä»¥ä¼ä½ä¾åå²å¤·å§å¨å°æææ°ææ¤çºçç°ç§»ç¶­ç·¯èèè¡£è¬ééºå»äºäº¥åè²éç£¯ä¸å£±æº¢é¸ç¨²è¨èé°¯åå°å½å¡å å§»å¼é£²æ·«è¤è­"],["b1a1","é¢é°é é»åå³å®çç¾½è¿é¨å¯éµçªºä¸ç¢è¼æ¸¦ååæ¬èé°»å§¥å©æµ¦çéåäºéé²èé¤å¡å¶å¬°å½±æ æ³æ æ°¸æ³³æ´©ççç©é ´è±è¡è© é­æ¶²ç«çé§æ¦è¬è¶é²æ¦å­ååå °å¥å®´å»¶æ¨æ©æ´æ²¿æ¼ççççç¿ç¸è¶èèé éé´å¡©æ¼æ±ç¥å¹å¤®å¥¥å¾å¿"],["b2a1","æ¼æºæ¨ªæ¬§æ®´çç¿è¥é´¬é´é»å²¡æ²è»åå±æ¶èæ¡¶ç¡ä¹ä¿ºå¸æ©æ¸©ç©é³ä¸åä»®ä½ä¼½ä¾¡ä½³å å¯åå¤å«å®¶å¯¡ç§æææ¶æ­æ²³ç«çç¦ç¦¾ç¨¼ç®è±èèè·è¯èè¦èª²å©è²¨è¿¦ééèä¿å³¨æçç»è¥è½è¾è³éé¤é§ä»ä¼è§£åå¡å£å»»å¿«æªææ¢ææææ¹"],["b3a1","é­æ¦æ¢°æµ·ç°çççµµè¥è¹ééè²å±å¾å¤å³å®³å´æ¨æ¦æ¶¯ç¢èè¡è©²é§éª¸æµ¬é¦¨èå£æ¿èéåååå»æ¡æ¹æ ¼æ ¸æ®»ç²ç¢ºç©«è¦è§èµ«è¼é­é£éé©å­¦å²³æ¥½é¡é¡æç¬ æ¨«æ©¿æ¢¶é°æ½å²åæ°æ¬æ´»æ¸æ»èè¤è½ä¸é°¹å¶æ¤æ¨ºéæ ªåç«è²ééåé´¨æ ¢èè±"],["b4a1","ç²¥åèç¦ä¹¾ä¾å å¯ååå§å·»åå ªå§¦å®å®å¯å¹²å¹¹æ£ææ£æ¾ææ¢ææ¡æ£ºæ¬¾æ­æ±æ¼¢æ¾æ½ç°çç£çç«¿ç®¡ç°¡ç·©ç¼¶ç¿°èè¦èè¦³è«è²«ééééé¢é¥éé¤¨èä¸¸å«å²¸å·ç©çç¼å²©ç¿«è´éé é¡é¡ä¼ä¼å±åå¨åºå¥å¬å¯å²å¸å¹¾å¿æ®æºææ¢ææ£æ£"],["b5a1","æ©å¸°æ¯æ°æ±½ç¿ç¥å­£ç¨ç´å¾½è¦è¨è²´èµ·è»è¼é£¢é¨é¬¼äºå½åå¦å®æ¯ææ¬æ¬ºç çç¥ç¾©è»èª¼è­°æ¬èé ååå«æ¡æ©è©°ç §æµé»å´å®¢èèéä¸ä¹ä»ä¼åå¸å®®å¼æ¥ææ½æ±æ±²æ³£ç¸çç©¶çª®ç¬ç´ç³¾çµ¦æ§çå»å±å·¨ææ ææ¸ èè¨±è·é¸æ¼ç¦¦é­äº¨äº«äº¬"],["b6a1","ä¾ä¾ ååç«¶å±å¶åå¡å¿å«å¬å¢å³¡å¼·å½æ¯ææ­æææ©æ³çç­ç¯è¸èèèé·é¡é¿é¥é©ä»°åå°­ææ¥­å±æ²æ¥µçæ¡ç²åå¤åå·¾é¦æ¤æ¬£æ¬½ç´ç¦ç¦½ç­ç·è¹èè¡¿è¥è¬¹è¿éåéä¹å¶å¥åºççç©è¦èº¯é§é§é§å·æèå°ç©ºå¶å¯ééä¸²æ«é§å±å±"],["b7a1","æçªæ²é´è½¡çªªçéç²æ ç¹°æ¡é¬å²åè«è¨ç¾¤è»é¡å¦è¢ç¥ä¿å¾åååå­çªåå¥å½¢å¾æµæ¶æ§æ©æ²æºæ¬æ¯æ¡æ¸ç¦ç¨½ç³»çµç¶ç¹ç½«èèèè¨è©£è­¦è»½é é¶è¸è¿é¯¨åæææ¿éæ¡åæ¬ æ±ºæ½ç©´çµè¡è¨£æä»¶å¹å¦å¥å¼å¸å£å§åå å«å»ºæ²æ¸æ³æ²"],["b8a1","æ¤æ¨©ç½ç¬ç®ç ç¡¯çµ¹çè©è¦è¬è³¢è»é£éµéºé¡é¨é¹¸ååå³å¹»å¼¦æ¸æºçç¾çµè·è¨è«ºéä¹åå¤å¼åºå§å­¤å·±åº«å¼§æ¸ææ¯æ¹çç³è¢´è¡è¡è°èèªè·¨é·éé¡§é¼äºäºä¼ååå¾å¨¯å¾å¾¡ææ¢§æªçç¢èªèª¤è­·éä¹é¯äº¤ä½¼ä¾¯åååå¬åå¹å¾åå£å"],["b9a1","åååå¢å¥½å­å­å®å·¥å·§å··å¹¸åºåºåº·å¼æææææ§æ»æææ´æ­æ ¡æ¢æ§æ±æ´ªæµ©æ¸¯æºç²çç¡¬ç¨¿ç³ ç´ç´çµç¶±èèè¯è±èèèªèè¡è¡¡è¬è²¢è³¼ééµé±ç ¿é¼é¤éé é¦é«é´»åå«å·åå£æ·æ¿ è±ªè½éº¹åå»åå½ç©é·éµ é»çæ¼è°çå¿½æéª¨çè¾¼"],["baa1","æ­¤é ä»å°å¤å¢¾å©æ¨ææææ ¹æ¢±æ··çç´ºè®é­äºä½åååµ¯å·¦å·®æ»æ²ç³ç è©éè£ååº§æ«åµå¬åæåå¡å¦»å®°å½©ææ¡æ ½æ­³æ¸ç½éçç ç ¦ç¥­æç´°èè£è¼éå¤å¨æç½ªè²¡å´åéªå ºæ¦è´å²å´å¼ç¢é·ºä½ååæ¾æ¨ææµçªç­ç´¢é¯æ¡é®­ç¬¹ååå·"],["bba1","å¯æ¶æ®æ¦æ­æ®ºè©éçé¯æéé®«ç¿æä¸ååå±±æ¨ææ£æ¡ç¦çç£ç®çºèè®è³é¸é¤æ¬æ«æ®ä»ä»ä¼ºä½¿åºå¸å²å£åå£«å§å§å§¿å­å±å¸å¸«å¿æææ¯å­æ¯æ½æ¨ææ­¢æ­»æ°çç¥ç§ç³¸ç´ç´«è¢èè³è¦è©è©©è©¦èªè«®è³è³éé£¼æ­¯äºä¼¼ä¾åå­å¯ºæææ"],["bca1","æ¬¡æ»æ²»ç¾ç½çç£ç¤ºèè³èªèè¾æ±é¹¿å¼è­é´«ç«ºè»¸å®é«ä¸å±å·å¤±å«å®¤ææ¹¿æ¼ç¾è³ªå®èç¯ å²æ´èå±¡èç¸èåå°æ¨èµ¦æç®ç¤¾ç´èè¬è»é®èéªååºå°ºæç¼çµééé«è¥å¯å¼±æ¹ä¸»åå®ææ±æ®ç©ç ç¨®è«è¶£éé¦åååªå¯¿ææ¨¹ç¶¬éååå¨"],["bda1","å®å°±å·ä¿®ææ¾æ´²ç§ç§çµç¹ç¿è­èèè¡è¥²è®è¹´è¼¯é±éé¬ééä»ä½ååå¾æææ±æ¸ç£ç¸¦ééåå¤å®¿æ·ç¥ç¸®ç²å¡¾çåºè¡è¿°ä¿å³»æ¥ç¬ç«£èé§¿åå¾ªæ¬æ¥¯æ®æ·³æºæ½¤ç¾ç´å·¡éµéé å¦åææææ¸åº¶ç·ç½²æ¸è¯è·è«¸å©åå¥³åºå¾æé¤é¤å·å"],["bea1","åå åå¬å¨åå±åå¥¨å¦¾å¨¼å®µå°å°å°å°åºåºå» å½°æ¿ææææ·æææ­æ¶æ¾æ¢¢æ¨æ¨µæ²¼æ¶æ¸æ¹ç¼ç¦ç§ççç¡ç¤ç¥¥ç§°ç« ç¬ç²§ç´¹èèèèè¡è£³è¨è¨¼è©è©³è±¡è³é¤é¦é¾éééä¸ä¸ä¸ä¹åå°åå ´å£å¬¢å¸¸ææ¾æ¡ææµç¶ç³ç©£è¸è­²é¸é å±å´é£¾"],["bfa1","æ­æ¤æ®ç­ç¹è·è²è§¦é£èè¾±å°»ä¼¸ä¿¡ä¾µåå¨ å¯å¯©å¿ææ¯æ°ææ£®æ¦æµ¸æ·±ç³ç¹çç¥ç§¦ç´³è£è¯èªè¦ªè¨ºèº«è¾é²ééäººä»åå¡µå£¬å°çå°½èè¨è¿é£é­ç¬¥è«é é¢å³å¨éå¹åå¸¥æ¨æ°´çç¡ç²ç¿ è¡°éééééçé«å´åµ©æ°æ¢è¶¨éæ®ææ¤èé éè£¾"],["c0a1","æ¾æºå¯¸ä¸ç¬çæ¯åå¶å¢å§å¾æ§ææ¿æ´ææ´æ£²æ æ­£æ¸ç²ççç²¾èå£°è£½è¥¿èª èªè«ééééæç¨èé»å¸­æææ¥ææç³ç©ç±ç¸¾èè²¬èµ¤è·¡è¹ç¢©åææ¥ææè¨­çªç¯èª¬éªçµ¶èèä»ååå å®£å°å°å·æ¦ææ°æ æ ´æ³æµæ´ææ½çç½æç©¿ç®­ç·"],["c1a1","ç¹ç¾¨èºèè¹è¦è©®è³è·µé¸é·é­ééé®®ååæ¼¸ç¶å¨ç¦ç¹è³ç³åå¡å²¨æªæ¾æ½æ¥çççç¤ç¥ç§ç²ç´ çµèè¨´é»é¡é¼ å§åµåå¢ååªå£®å¥ç½å®å±¤åæ£æ³æææ¿æ»ææ©æ¹å·£æ§æ§½æ¼ç¥äºç©ç¸çªç³ç·ç¶è¡èèè¬è¼è»è£èµ°éé­ééé¨åå¢æ"],["c2a1","èèµè´é ä¿å´åå³æ¯æææ¸¬è¶³éä¿å±è³æç¶åè¢å¶æå­å­«å°ææéä»å¤å¤ªæ±°è©å¾å å¦¥æ°ææèµæ¥éé§é¨¨ä½å å¯¾èå²±å¸¯å¾æ ææ´æ¿æ³°æ»èè¿èè¢è²¸éé®éé»é¯ä»£å°å¤§ç¬¬éé¡é·¹æ»ç§ååå®ææææ²¢æ¿¯ç¢è¨é¸æ¿è«¾è¸å§è¸åª"],["c3a1","å©ä½éè¾°å¥ªè±å·½ç«ªè¾¿æ£è°·ç¸é±æ¨½èª°ä¸¹ååå¦ææ¢æ¦æ­æ·¡æ¹ç­ç­ç«¯ç®ªç¶»è½èèèªéå£å£å¼¾æ­ææªæ®µç·è«å¤ç¥å°å¼æ¥æºæ± ç´ç¨ç½®è´èéé¦³ç¯çç«¹ç­èéç§©çªè¶å«¡çä¸­ä»²å®å¿ æ½æ¼æ±æ³¨è«è¡·è¨»éé³é§æ¨ç¦çªè§èè²¯ä¸åååå¯µ"],["c4a1","å¸å¸³åºå¼å¼µå½«å¾´æ²ææ¢ææ½®ççºçºè´è¹è¸è¶èª¿è«è¶è·³éé·é é³¥åæç´ææ²çè³é®é³æ´¥å¢æ¤æ§è¿½éçéå¡æ æ´æ§»ä½æ¼¬æè¾»è¦ç¶´éæ¤¿æ½°åªå£·å¬¬ç´¬çªåé£é¶´äº­ä½ååµåè²åå ¤å®å¸åºåº­å»·å¼ææµæºææ¢¯æ±ç¢ç¦ç¨ç· èè¨è«¦è¹é"],["c5a1","é¸é­éé¼æ³¥ææ¢æµæ»´çç¬é©éæººå²å¾¹æ¤è½è¿­éå¸å¡«å¤©å±åºæ·»çºçè²¼è»¢é¡ç¹ä¼æ®¿æ¾±ç°é»ååå µå¡å¦¬å± å¾æææ¸¡ç»èè³­éé½éç ¥ç ºåªåº¦åå¥´æååå¬åååå¡å¡å¥å®å³¶å¶æ¼ææ­æ±æ¡æ¢¼æ£çæ·æ¹¯æ¶ç¯çå½çç¥·ç­ç­ç­ç³çµ±å°"],["c6a1","è£è©è¤è¨è¬è±è¸éééé¶é ­é¨°éåååå å°æ§ææ´ç³ç«¥è´èééå³ é´å¿å¾å¾³æ¶ç¹ç£ç¦¿ç¯¤æ¯ç¬èª­æ æ©¡å¸çªæ¤´å±é³¶è«å¯éçå¸å±¯ææ¦æ²è±éé åæéå¥é£åä¹åªèè¬çæºéæ¥¢é¦´ç¸ç·åæ¥ è»é£æ±äºå°¼å¼è¿©åè³èè¹å»¿æ¥ä¹³å¥"],["c7a1","å¦å°¿é®ä»»å¦å¿èªæ¿¡ç¦°ç¥¢å¯§è±ç«ç±å¹´å¿µæ»æçç²ä¹å»¼ä¹åå¢æ©æ¿ç´è½è³è¿è¾²è¦è¤å·´ææ­è¦æ·æ³¢æ´¾ç¶ç ´å©ç½µè­é¦¬ä¿³å»ææææ¯ççèèºè¼©éåå¹åªæ¢æ¥³ç¤ç½è²·å£²è³ éªéè¿ç§¤ç§è©ä¼¯å¥åæææ³ç½ç®ç²è¶èè¿«ææ¼ çç¸è«é§éº¦"],["c8a1","å½ç®±ç¡²ç®¸èç­æ«¨å¹¡èçç å«é¢æºçºéé«ªä¼ç½°æç­é¥é³©åºå¡è¤é¼ä¼´å¤åååå¸æ¬ææ¿æ°¾æ±çç¯ç­çç¹è¬è©è²©ç¯éç©é é£¯æ½æ©çªç¤ç£èè®åªåå¦å¦åºå½¼æ²ææ¹æ«ææ¯æ³ç²ç®ç¢ç§ç·ç½·è¥è¢«èª¹è²»é¿éé£æ¨ç°¸åå°¾å¾®ææ¯çµçç¾"],["c9a1","é¼»æç¨å¹çé«­å½¦èè±èå¼¼å¿ç¢ç­é¼æ¡§å§«åªç´ç¾è¬¬ä¿µå½ªæ¨æ°·æ¼ç¢ç¥¨è¡¨è©è±¹å»æçç§èé¨é²èè­é°­åå½¬ææµçè²§è³é »æç¶ä¸ä»å å¤«å©¦å¯å¨å¸åºææ¶æ·æ§æ®æµ®ç¶ç¬¦èèèè­è² è³¦èµ´ééä¾®æ«æ­¦èè¡èªé¨å°æ¥é¢¨èºèä¼å¯å¾©å¹æ"],["caa1","ç¦è¹è¤è¦æ·µå¼ææ²¸ä»ç©é®åå»å´å¢³æ¤æ®çå¥®ç²ç³ç´é°æèä¸ä½µåµå¡å¹£å¹³å¼æä¸¦è½ééç±³é å»å£çç¢§å¥ç¥èç®åå¤çç¯ç·¨è¾ºè¿éä¾¿åå¨©å¼é­ä¿èéªåææ­©ç«è£è¼ç©åå¢æææ®æ¯ç°¿è©å£ä¿¸ååå ±å¥å®å³°å³¯å´©åºæ±æ§æ¾æ¹æ"],["cba1","æ³æ³¡ç¹ç ²ç¸«èè³èè¬èè¤è¨ªè±é¦éé£½é³³éµ¬ä¹äº¡åååå¦¨å¸½å¿å¿æ¿æ´æææ£åç´¡èªè¨è¬è²è²¿é¾é²å é ¬åååå¢¨æ²æ´ç§ç¦ç©é¦åæ²¡æ®å å¹å¥æ¬ç¿»å¡çæ©ç£¨é­éº»åå¦¹æ§ææ¯å©æ§å¹èæé®ªæ¾é±æ¡äº¦ä¿£åæ¹æ«æ²«è¿ä¾­ç¹­éº¿ä¸æ¢æº"],["cca1","æ¼«èå³æªé­å·³ç®å²¬å¯èæ¹èç¨èå¦ç²æ°ç åå¤¢ç¡ççé§éµ¡æ¤å©¿å¨å¥åå½æçè¿·éé³´å§ªçæ»åæ£ç¶¿ç·¬é¢éººæ¸æ¨¡èå¦å­æ¯çç²ç¶²èèå²æ¨é»ç®æ¢å¿é¤å°¤æ»ç±¾è²°åæ¶ç´éåä¹å¶å¤çºè¶éå¼¥ç¢åå½¹ç´è¬è¨³èºéæ³è®éæææ²¹ç"],["cda1","è«­è¼¸å¯ä½åªååå®¥å¹½æ æææææ¹§æ¶ç¶ç·ç±ç¥è£èªéééµéèå¤äºä½ä¸èªè¼¿é å­å¹¼å¦å®¹åº¸ææºæææ¥æ§æ´æº¶çç¨çª¯ç¾èèèè¦è¬¡è¸é¥é½é¤æ¾ææ¬²æ²æµ´ç¿ç¿¼æ·ç¾èºè£¸æ¥è±é ¼é·æ´çµ¡è½éªä¹±åµåµæ¬æ¿«èè­è¦§å©åå±¥ææ¢¨çç"],["cea1","ç¢è£è£¡éé¢é¸å¾çç«èæ ç¥åæµæºççç¡«ç²éç«é¾ä¾¶æ®æèäºäº®åä¸¡åå¯®ææ¢æ¶¼ççç­ç¨ç³§è¯è«é¼ééµé åç·å«åææ·çç³è¨è¼ªé£é±éºç å¡æ¶ç´¯é¡ä»¤ä¼¶ä¾å·å±å¶ºæç²ç¤¼èé´é·é¶ééºé½¢æ¦æ­´åå£çè£å»æææ¼£çç°¾ç·´è¯"],["cfa1","è®é£é¬åé­¯æ«çè³è·¯é²å´å©å»å¼ææ¥¼æ¦æµªæ¼ç¢ç¼ç¯­èè¾èéå­éºç¦èé²è«å­åè©±æ­ªè³èææ é·²äºäºé°è©«èè¨æ¤æ¹¾ç¢è"],["d0a1","å¼ä¸ä¸ä¸ªä¸±ä¸¶ä¸¼ä¸¿ä¹ä¹ä¹äºäºè±«äºèå¼äºäºäºäº äº¢äº°äº³äº¶ä»ä»ä»ä»ä»ä»ä»ä»­ä»ä»·ä¼ä½ä¼°ä½ä½ä½ä½ä½¶ä¾ä¾ä¾ä½»ä½©ä½°ä¾ä½¯ä¾ä¾åä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿¤ä¿¥åå¨ååªå¥åä¼ä¿¶å¡å©å¬ä¿¾ä¿¯ååååæåååååå¬å¸åååå´å²"],["d1a1","ååå³åååå¥å­å£å®å¹åµåååååååå¡åºå·å¼å»å¿ååååå¢ç«¸å©åªå®ååååååååååå¤å¦å¢å©åªå«å³å±å²å°åµå½åååå èå©å­å°åµå¾ååååå§åªå®å³å¹åååååååªå´å©å³å¿å½åååå±ååè¾¨"],["d2a1","è¾§å¬å­å¼åµååååå£å¦é£­å å³åµå¸å¹ååç¸åååååå£å¯å±å³å¸åååä¸ååååå©å®å¤å»å·ååå å¦å¥å®å°å¶åç°éåæ¼ç®å®å¨å­åºåå½åå¬å­å¼å®å¶å©ååååµååå±å·å°åå»åå¶ååååå¢å¸å¥å¬ååå¨"],["d3a1","å«åå¤å¾å¼åå¥å¦ååå½å®å­åºå¢å¹åå£åå®ååååå¸å³åååå¯ååå»å¾ååå®å¼åå©åå¨åååååå¤ååå·åå¾å½åå¹ååçå´å¶å²å¸å«å¤å¯å¬åªåååå ååå¥å®å¶å´åå¼ååååååååå®å¹åå¿åå"],["d4a1","ååååååååå¦å·å¸åå»ååå©ååå¡å¿ååå å³å¤åªå°åååååå åå£å å å å¡²å ¡å¡¢å¡å¡°æ¯å¡å ½å¡¹å¢å¢¹å¢å¢«å¢ºå£å¢»å¢¸å¢®å£å£å£å£å£å£å£¥å£å£¤å£å£¯å£ºå£¹å£»å£¼å£½å¤å¤å¤å¤æ¢¦å¤¥å¤¬å¤­å¤²å¤¸å¤¾ç«å¥å¥å¥å¥å¥å¥¢å¥ å¥§å¥¬å¥©"],["d5a1","å¥¸å¦å¦ä½ä¾«å¦£å¦²å§å§¨å§å¦å§å§å¨¥å¨å¨å¨å¨å¨å©å©¬å©å¨µå¨¶å©¢å©ªåªåª¼åª¾å«å«åª½å«£å«å«¦å«©å«å«ºå«»å¬å¬å¬å¬²å«å¬ªå¬¶å¬¾å­å­å­å­å­å­å­å­¥å­©å­°å­³å­µå­¸æå­ºå®å®å®¦å®¸å¯å¯å¯å¯å¯å¯¤å¯¦å¯¢å¯å¯¥å¯«å¯°å¯¶å¯³å°å°å°å°å°å° å°¢å°¨å°¸å°¹å±å±å±å±"],["d6a1","å±å±å­±å±¬å±®ä¹¢å±¶å±¹å²å²å²å¦å²«å²»å²¶å²¼å²·å³å²¾å³å³å³©å³½å³ºå³­å¶å³ªå´å´å´åµå´å´å´å´å´¢å´å´å´åµåµåµåµåµ¬åµ³åµ¶å¶å¶å¶å¶¢å¶å¶¬å¶®å¶½å¶å¶·å¶¼å·å·å·å·å·å·å·«å·²å·µå¸å¸å¸å¸å¸å¸¶å¸·å¹å¹å¹å¹å¹å¹å¹å¹¢å¹¤å¹å¹µå¹¶å¹ºéº¼å¹¿åº å»å»å»å»å»"],["d7a1","å»å»£å»å»å»å»¢å»¡å»¨å»©å»¬å»±å»³å»°å»´å»¸å»¾å¼å¼å½å½å¼å¼å¼å¼©å¼­å¼¸å½å½å½å½å¼¯å½å½å½å½å½¡å½­å½³å½·å¾å¾å½¿å¾å¾å¾å¾å¾å¾å¾å¾ å¾¨å¾­å¾¼å¿å¿»å¿¤å¿¸å¿±å¿æ³å¿¿æ¡æ æææ©ææ±æææ«æ¦ææºæææªæ·æææææ£ææ¤ææ¬æ«ææææ§ææ"],["d8a1","ææææææ§ææ¡æ¸æ ææ´å¿°æ½ææµæææææ¶æ·ææ´æºææ¡æ»æ±ææææ¾æ¨æ§ææ¿æ¼æ¬æ´æ½æææ³æ·ææææ«æ´æ¯æ¥æ±ææææµææææ¬æææææ«æ®ææææ·ææææºæç½¹ææ¦æ£æ¶æºæ´æ¿æ½æ¼æ¾æææææææ"],["d9a1","ææ¡æªæ®æ°æ²æ³ææææ£ææ æ¨æ¼æææ¾æææææææææ»ææ¿ææææææææææææ®æ±æ§æææ¯æµææ¾æææææææ«æ¶æ£ææææµæ«æ©æ¾æ©æææ£æææ¶æææ´æææ¦æ¶æææ¨ææ§æ¯æ¶ææªæææ¥æ©ææ¼"],["daa1","æææææ»æææ±æ§èæ æ¡æ¬æ£æ¯æ¬æ¶æ´æ²æºææ½ææææ¤æ£æ«æ´æµæ·æ¶æ¸çææææææææ²æ¸ææè®æææ«æ·æææææææææ æ¡æ±æ²æææ»æ³æµæ¶æ´ææææææææ¤æ§æ¨ææ¢æ°æææææææææ¹ææ¾æ¼"],["dba1","ææ¸æææ æ¿æ¦æ©æ°æµæ·ææææ¦æ§é¸æ®æ¿æ¶ææ¸æ·æææ ææ£æ¤ææ°æ©æ¼æªæææ¦æ¡ææ·æ¯æ´æ¬æ³æ©æ¸æ¤æææ¢æ®æ¹æææ§æªæ æ¡æ ©æ¡æ¡æ ²æ¡æ¢³æ «æ¡æ¡£æ¡·æ¡¿æ¢æ¢æ¢­æ¢æ¢æ¢æ¢æª®æ¢¹æ¡´æ¢µæ¢ æ¢ºæ¤æ¢æ¡¾æ¤æ£æ¤æ£æ¤¢æ¤¦æ£¡æ¤æ£"],["dca1","æ£æ£§æ£æ¤¶æ¤æ¤æ£æ££æ¤¥æ£¹æ£ æ£¯æ¤¨æ¤ªæ¤æ¤£æ¤¡æ£æ¥¹æ¥·æ¥æ¥¸æ¥«æ¥æ¥¾æ¥®æ¤¹æ¥´æ¤½æ¥æ¤°æ¥¡æ¥æ¥æ¦æ¥ªæ¦²æ¦®æ§æ¦¿æ§æ§æ¦¾æ§å¯¨æ§æ§æ¦»æ§æ¦§æ¨®æ¦æ¦ æ¦æ¦æ¦´æ§æ§¨æ¨æ¨æ§¿æ¬æ§¹æ§²æ§§æ¨æ¦±æ¨æ§­æ¨æ§«æ¨æ¨æ«æ¨£æ¨æ©æ¨æ©²æ¨¶æ©¸æ©æ©¢æ©æ©¦æ©æ¨¸æ¨¢æªæªæª æªæª¢æª£"],["dda1","æªèæª»æ«æ«æª¸æª³æª¬æ«æ«æ«æªªæ«æ«ªæ«»æ¬èæ«ºæ¬æ¬é¬±æ¬æ¬¸æ¬·çæ¬¹é£®æ­æ­æ­æ­æ­æ­æ­æ­æ­¡æ­¸æ­¹æ­¿æ®æ®æ®æ®æ®æ®æ®æ®¤æ®ªæ®«æ®¯æ®²æ®±æ®³æ®·æ®¼æ¯æ¯æ¯æ¯æ¯¬æ¯«æ¯³æ¯¯éº¾æ°æ°æ°æ°æ°¤æ°£æ±æ±æ±¢æ±ªæ²æ²æ²æ²æ²æ±¾æ±¨æ±³æ²æ²æ³æ³±æ³æ²½æ³æ³æ³æ²®æ²±æ²¾"],["dea1","æ²ºæ³æ³¯æ³æ³ªæ´è¡æ´¶æ´«æ´½æ´¸æ´æ´µæ´³æ´æ´æµ£æ¶æµ¤æµæµ¹æµæ¶æ¶æ¿¤æ¶æ·¹æ¸æ¸æ¶µæ·æ·¦æ¶¸æ·æ·¬æ·æ·æ·¨æ·æ·æ·ºæ·æ·¤æ·æ·ªæ·®æ¸­æ¹®æ¸®æ¸æ¹²æ¹æ¸¾æ¸£æ¹«æ¸«æ¹¶æ¹æ¸æ¹æ¸ºæ¹æ¸¤æ»¿æ¸æ¸¸æºæºªæºæ»æº·æ»æº½æº¯æ»æº²æ»æ»æºæº¥æ»æºæ½æ¼çæ»¬æ»¸æ»¾æ¼¿æ»²æ¼±æ»¯æ¼²æ»"],["dfa1","æ¼¾æ¼æ»·æ¾æ½ºæ½¸æ¾æ¾æ½¯æ½æ¿³æ½­æ¾æ½¼æ½æ¾æ¾æ¿æ½¦æ¾³æ¾£æ¾¡æ¾¤æ¾¹æ¿æ¾ªæ¿æ¿æ¿¬æ¿æ¿æ¿±æ¿®æ¿ççæ¿ºçççæ¿¾ççæ½´çççç°ç¾ç²çç£ççç¯ç±ç¬ç¸ç³ç®çççççç½ççç¥ççç¦ç¢ççç¬çç»ççç¨ç¬çç¹ç¾ççççç ç¬ç§çµç¼"],["e0a1","ç¹ç¿çççç¨ç­ç¬ç°ç²ç»ç¼ç¿ççççç´ç¾çççççç¢ç§ç¹ç²çççççç¢ç ç¡ç¹ç·åçççççç´ç¯ç©ç¥ç¾ççé»ççªç¨ç°ç¸çµç»çºçç³çç»çç¥ç®çç¢çç¯ç¥ç¸ç²çºçç¿ççççç©ç°ç£çªç¶ç¾ççç§çççç±"],["e1a1","ç ç£ç§ç©ç®ç²ç°ç±ç¸ç·çççççççççç¦ç¬ç¼çççççççç©ç¤ç§ç«ç­ç¸ç¶ççç´ççççççç¥ç£çç³ççµç½ç¸ç¼ç±ççççç£çç¾ç¿ç¼çç°çºç²ç³ççççç§ç ç¡ç¢ç¤ç´ç°ç»çççççç¡ç¢ç¨ç©çªç§ç¬ç°"],["e2a1","ç²ç¶ç¸ç¼çççççççççç°ç´ç¸ç¹çºçççççç¡ç¥ç§çªè¯ç»çççç©ç¤çç¥ç¦çç·ç¸ççç¨ç«çç¥ç¿ç¾ç¹çççç çç°ç¶ç¹ç¿ç¼ç½ç»çççççç£ç®ç¼ç ç ç¤¦ç  ç¤ªç¡ç¢ç¡´ç¢ç¡¼ç¢ç¢ç¢£ç¢µç¢ªç¢¯ç£ç£ç£ç£ç¢¾ç¢¼ç£ç£ç£¬"],["e3a1","ç£§ç£ç£½ç£´ç¤ç¤ç¤ç¤ç¤¬ç¤«ç¥ç¥ ç¥ç¥ç¥ç¥ç¥ç¥ºç¥¿ç¦ç¦ç¦§é½ç¦ªç¦®ç¦³ç¦¹ç¦ºç§ç§ç§§ç§¬ç§¡ç§£ç¨ç¨ç¨ç¨ç¨ ç¨ç¦ç¨±ç¨»ç¨¾ç¨·ç©ç©ç©ç©¡ç©¢ç©©é¾ç©°ç©¹ç©½çªçªçªçªçªçª©ç«çª°çª¶ç«ç«çª¿éç«ç«ç«ç«ç«ç«ç«ç«ç«ç«¡ç«¢ç«¦ç«­ç«°ç¬ç¬ç¬ç¬ç¬³ç¬ç¬ç¬ç¬µç¬¨ç¬¶ç­"],["e4a1","ç­ºç¬ç­ç¬ç­ç­ç­µç­¥ç­´ç­§ç­°ç­±ç­¬ç­®ç®ç®ç®ç®ç®ç®ç®ç®ç®ç­ç®ç¯ç¯ç¯ç¯ç®´ç¯ç¯ç¯©ç°ç°ç¯¦ç¯¥ç± ç°ç°ç°ç¯³ç¯·ç°ç°ç¯¶ç°£ç°§ç°ªç°ç°·ç°«ç°½ç±ç±ç±ç±ç±ç±ç±ç±ç±¤ç±ç±¥ç±¬ç±µç²ç²ç²¤ç²­ç²¢ç²«ç²¡ç²¨ç²³ç²²ç²±ç²®ç²¹ç²½ç³ç³ç³ç³ç³ç³ç³¢é¬»ç³¯ç³²ç³´ç³¶ç³ºç´"],["e5a1","ç´ç´ç´ç´çµçµç´®ç´²ç´¿ç´µçµçµ³çµçµçµ²çµ¨çµ®çµçµ£ç¶ç¶çµç¶çµ½ç¶ç¶ºç¶®ç¶£ç¶µç·ç¶½ç¶«ç¸½ç¶¢ç¶¯ç·ç¶¸ç¶ç¶°ç·ç·ç·¤ç·ç·»ç·²ç·¡ç¸ç¸ç¸£ç¸¡ç¸ç¸±ç¸ç¸ç¸ç¸¢ç¹ç¹¦ç¸»ç¸µç¸¹ç¹ç¸·ç¸²ç¸ºç¹§ç¹ç¹ç¹ç¹ç¹ç¹¹ç¹ªç¹©ç¹¼ç¹»çºç·ç¹½è¾®ç¹¿çºçºçºçºçºçºçºçºçºçºçºç¼¸ç¼º"],["e6a1","ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½ ç½¨ç½©ç½§ç½¸ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾£ç¾¯ç¾²ç¾¹ç¾®ç¾¶ç¾¸è­±ç¿ç¿ç¿ç¿ç¿ç¿¡ç¿¦ç¿©ç¿³ç¿¹é£èèèèèèèè¡è¨è¿è»èèèèèèè¢è¨è³è²è°è¶è¹è½è¿èèèèèèè­åè¬èè¥èèèèèèè¯è±èè©è£è¯è"],["e7a1","éèè¾èèè¼è±è®è¥è¦è´èèèèèè èè¤è£èèè©è°èµè¾è¸è½èèèºèèèèèèèèè è§èºè»è¾èèèèèèèèè©è«è¸è³èèèèèèè¤è¢è¨èªè«è®è±è·è¸è¾èèè«èè»è¬è¡è£èèè´è³èºèèè»è¹èèèèè"],["e8a1","èµè´èè²è±èè¹èèè¯è«èèèèèªèè¢èè£èèèè¼èµè³èµè èè¨è´èè«èè½èèèèè·èè è²èè¢è è½è¸èè»è­èªè¼èèè·è«è­è®èè©èè¬è¯è¹èµèè¢è¹è¿èèèè»èèèèèè¡è¡è¿è´èèè¬èèèè¼èè£èè"],["e9a1","èèèèèè¤èèèè¨è­èèèªèèè·è¾èèèºèè¹èèèè¥èè¹èèèè¾èºèè¢èè°è¿èä¹èèè§è±èè£è©èªèèè¶è¯èèè°èè £è«èèè©è¬èèè¯èèèèèè»èèèè¹èè´è¿è·è»è¥è©èè èè¸èèè´èè¨è®è"],["eaa1","èè£èªè è¢èèè¯èè½èèéè«èè³èèè»è¯è²è è è è¾è¶è·è èè è è è ¢è ¡è ±è ¶è ¹è §è »è¡è¡è¡è¡è¡è¡¢è¡«è¢è¡¾è¢è¡µè¡½è¢µè¡²è¢è¢è¢è¢®è¢è¢¢è¢è¢¤è¢°è¢¿è¢±è£è£è£è£è£è£è£¹è¤è£¼è£´è£¨è£²è¤è¤è¤è¤è¥è¤è¤¥è¤ªè¤«è¥è¥è¤»è¤¶è¤¸è¥è¤è¥ è¥"],["eba1","è¥¦è¥¤è¥­è¥ªè¥¯è¥´è¥·è¥¾è¦è¦è¦è¦è¦è¦¡è¦©è¦¦è¦¬è¦¯è¦²è¦ºè¦½è¦¿è§è§è§è§è§§è§´è§¸è¨è¨è¨è¨è¨è¨è¨¥è¨¶è©è©è©è©è©è©¼è©­è©¬è©¢èªèªèªèª¨èª¡èªèª¥èª¦èªèª£è«è«è«è«è««è«³è«§è«¤è«±è¬è« è«¢è«·è«è«è¬è¬è¬è«¡è¬è¬è¬è¬ è¬³é«è¬¦è¬«è¬¾è¬¨è­è­è­è­è­è­è­è­è­«"],["eca1","è­è­¬è­¯è­´è­½è®è®è®è®è®è®è®è®è°ºè±è°¿è±è±è±è±è±è±¢è±¬è±¸è±ºè²è²è²è²è²è²è²è±¼è²æè²­è²ªè²½è²²è²³è²®è²¶è³è³è³¤è³£è³è³½è³ºè³»è´è´è´è´è´è´è´é½è´è³è´è´èµ§èµ­èµ±èµ³è¶è¶è·è¶¾è¶ºè·è·è·è·è·è·è·ªè·«è·è·£è·¼è¸è¸è·¿è¸è¸è¸è¸è¹è¸µè¸°è¸´è¹"],["eda1","è¹è¹è¹è¹è¹è¹è¹¤è¹ è¸ªè¹£è¹è¹¶è¹²è¹¼èºèºèºèºèºèºèºèºèºèºèºªèº¡èº¬èº°è»èº±èº¾è»è»è»è»è»£è»¼è»»è»«è»¾è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼¦è¼³è¼»è¼¹è½è½è¼¾è½è½è½è½è½è½è½¢è½£è½¤è¾è¾è¾£è¾­è¾¯è¾·è¿è¿¥è¿¢è¿ªè¿¯éè¿´éè¿¹è¿ºééé¡ééééé§é¶éµé¹è¿¸"],["eea1","ééééééé¾éééé¨é¯é¶é¨é²éé½éééééé¨é¯é±éµé¢é¤æééééé²é°éééé£é¥é©é³é²éééé¢é«é¯éªéµé´éºéééééééé¡éé¼éµé¶éé¿éé¬ééééééé¤ééé¿ééééééééé¹é·é©ééºéé®"],["efa1","éé¢éé£éºéµé»éé é¼é®éé°é¬é­éé¹ééé¨é¥éééééé¤ééééééé¶é«éµé¡éºééééé é¢ééªé©é°éµé·é½éé¼é¾éé¿éééééééé é¨é§é­é¼é»é¹é¾éæ¿¶éééééééé¡é¥é¢é¡é¨é®é¯ééééé·éé"],["f0a1","ééé¦é²é¬éééééªé§é±é²é°é´é¶é¸é¹ééééè¥éééé¹éééééééééé¤éªé°é¹é½é¾ééééééé é¤é¦é¨åé«é±é¹éé¼ééºéééééé¨é¦é£é³é´éééééé­é½é²ç«é¶éµé é é ¸é ¤é ¡é ·é ½é¡é¡é¡é¡«é¡¯é¡°"],["f1a1","é¡±é¡´é¡³é¢ªé¢¯é¢±é¢¶é£é£é£é£©é£«é¤é¤é¤é¤é¤é¤¡é¤é¤é¤¤é¤ é¤¬é¤®é¤½é¤¾é¥é¥é¥é¥é¥é¥é¥é¥é¥é¦é¦é¦¥é¦­é¦®é¦¼é§é§é§é§é§é§­é§®é§±é§²é§»é§¸é¨é¨é¨é§¢é¨é¨«é¨·é©é©é©é©é¨¾é©é©é©é©é©é©¢é©¥é©¤é©©é©«é©ªéª­éª°éª¼é«é«é«é«é«é«é«é«¢é«£é«¦é«¯é««é«®é«´é«±é«·"],["f2a1","é«»é¬é¬é¬é¬é¬¢é¬£é¬¥é¬§é¬¨é¬©é¬ªé¬®é¬¯é¬²é­é­é­é­é­é­é­é­´é®é®é®é®é®é®é® é®¨é®´é¯é¯é®¹é¯é¯é¯é¯é¯£é¯¢é¯¤é¯é¯¡é°ºé¯²é¯±é¯°é°é°é°é°é°é°é°é°é°é°é°®é°é°¥é°¤é°¡é°°é±é°²é±é°¾é±é± é±§é±¶é±¸é³§é³¬é³°é´é´é³«é´é´é´ªé´¦é¶¯é´£é´éµé´é´éµé´¿é´¾éµéµ"],["f3a1","éµéµéµ¤éµéµéµéµ²é¶é¶é¶«éµ¯éµºé¶é¶¤é¶©é¶²é·é·é¶»é¶¸é¶ºé·é·é·é·é·é·¸é·¦é·­é·¯é·½é¸é¸é¸é¹µé¹¹é¹½éºéºéºéºéºéºéºéºéº¥éº©éº¸éºªéº­é¡é»é»é»é»é»é»é»é»é» é»¥é»¨é»¯é»´é»¶é»·é»¹é»»é»¼é»½é¼é¼ç·é¼é¼¡é¼¬é¼¾é½é½é½é½£é½é½ é½¡é½¦é½§é½¬é½ªé½·é½²é½¶é¾é¾é¾ "],["f4a1","å ¯æ§éç¤åç"],["f9a1","çºè¤ééèä¿ç»æ±æ£é¹æ»å½ä¸¨ä»¡ä»¼ä¼ä¼ä¼¹ä½ä¾ä¾ä¾ä¾ä¿åå¢ä¿¿ååå°ååå´ååå¤åå¾å¬ååå¦ååååå¤å²åå²åï¨ååå©å¿ååå¥å¬ååï¨ï¨å¢å¢²å¤å¥å¥å¥å¥£å¦¤å¦ºå­å¯ç¯å¯å¯¬å°å²¦å²ºå³µå´§åµï¨åµåµ­å¶¸å¶¹å·å¼¡å¼´å½§å¾·"],["faa1","å¿ææææææ æ²ææ·æ°æææ¦æµæ ææææææ»ææ®ææ¤æ¥ææï¨æ³ææ æ²æ¿æºæï¤©æ¦æ»æ¡ææ æ¡æ£ï¨æ¥¨ï¨æ¦æ§¢æ¨°æ©«æ©æ©³æ©¾æ«¢æ«¤æ¯æ°¿æ±æ²æ±¯æ³æ´æ¶æµ¯æ¶æ¶¬æ·æ·¸æ·²æ·¼æ¸¹æ¹æ¸§æ¸¼æº¿æ¾æ¾µæ¿µççç¨çç«çççççï¨çç¾ç±"],["fba1","ç¾ç¤ï¨ç·ç½ççç£çççµç¦çªç©ç®ç¢çççç¯ççççç¦ï¨çå¯ç ¡ç¡ç¡¤ç¡ºç¤°ï¨ï¨ï¨ç¦ï¨ç¦ç«ç«§ï¨ç««ç®ï¨çµçµç¶·ç¶ ç·ç¹ç½ç¾¡ï¨èè¢è¿èè¶èè´èèè«ï¨è°ï¨ ï¨¡è è£µè¨è¨·è©¹èª§èª¾è«ï¨¢è«¶è­è­¿è³°è³´è´èµ¶ï¨£è»ï¨¤ï¨¥é§éï¨¦éé§é"],["fca1","ééé­é®é¤é¥ééééºéé¼éééé¹é§é§é·é¸é§éééï¨§éé éé¥é¡é»ï¨¨éé¿ééé°éé¤ééé¸é±éééï§ï¨©éé¯é³é»éééééé¡é¡¥ï¨ªï¨«é¤§ï¨¬é¦é©é«é«é­µé­²é®é®±é®»é°éµ°éµ«ï¨­é¸é»"],["fcf1","â°",9,"ï¿¢ï¿¤ï¼ï¼"],["8fa2af","ËËÂ¸ËËÂ¯ËËï½ÎÎ"],["8fa2c2","Â¡Â¦Â¿"],["8fa2eb","ÂºÂªÂ©Â®â¢Â¤â"],["8fa6e1","ÎÎÎÎÎª"],["8fa6e7","Î"],["8fa6e9","ÎÎ«"],["8fa6ec","Î"],["8fa6f1","Î¬Î­Î®Î¯ÏÎÏÏÏÏÎ°Ï"],["8fa7c2","Ð",10,"ÐÐ"],["8fa7f2","Ñ",10,"ÑÑ"],["8fa9a1","ÃÄ"],["8fa9a4","Ä¦"],["8fa9a6","Ä²"],["8fa9a8","ÅÄ¿"],["8fa9ab","ÅÃÅ"],["8fa9af","Å¦Ã"],["8fa9c1","Ã¦ÄÃ°Ä§Ä±Ä³Ä¸ÅÅÅÅÃ¸ÅÃÅ§Ã¾"],["8faaa1","ÃÃÃÃÄÇÄÄÃÃÄÄÄÃÄÄÃÃÃÃÄÄÄÄ"],["8faaba","ÄÄÄ¢Ä Ä¤ÃÃÃÃÇÄ°ÄªÄ®Ä¨Ä´Ä¶Ä¹Ä½Ä»ÅÅÅÃÃÃÃÃÇÅÅÃÅÅÅÅÅÅ ÅÅ¤Å¢ÃÃÃÃÅ¬ÇÅ°ÅªÅ²Å®Å¨ÇÇÇÇÅ´ÃÅ¸Å¶Å¹Å½Å»"],["8faba1","Ã¡Ã Ã¤Ã¢ÄÇÄÄÃ¥Ã£ÄÄÄÃ§ÄÄÃ©Ã¨Ã«ÃªÄÄÄÄÇµÄÄ"],["8fabbd","Ä¡Ä¥Ã­Ã¬Ã¯Ã®Ç"],["8fabc5","Ä«Ä¯Ä©ÄµÄ·ÄºÄ¾Ä¼ÅÅÅÃ±Ã³Ã²Ã¶Ã´ÇÅÅÃµÅÅÅÅÅÅ¡ÅÅ¥Å£ÃºÃ¹Ã¼Ã»Å­ÇÅ±Å«Å³Å¯Å©ÇÇÇÇÅµÃ½Ã¿Å·ÅºÅ¾Å¼"],["8fb0a1","ä¸ä¸ä¸ä¸ä¸ä¸ä¸£ä¸¤ä¸¨ä¸«ä¸®ä¸¯ä¸°ä¸µä¹ä¹ä¹ä¹ä¹ä¹ä¹ä¹£ä¹¨ä¹©ä¹´ä¹µä¹¹ä¹¿äºäºäºäºäº¯äº¹ä»ä»ä»ä»ä» ä»¡ä»¢ä»¨ä»¯ä»±ä»³ä»µä»½ä»¾ä»¿ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼ä¼®ä¼±ä½ ä¼³ä¼µä¼·ä¼¹ä¼»ä¼¾ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½ä½£ä½ªä½¬ä½®ä½±ä½·ä½¸ä½¹ä½ºä½½ä½¾ä¾ä¾ä¾"],["8fb1a1","ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾ä¾²ä¾·ä¾¹ä¾»ä¾¼ä¾½ä¾¾ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ä¿ ä¿¢ä¿°ä¿²ä¿¼ä¿½ä¿¿åååååååååååååååå¢å§å®å°å²å³åµååååååååååååååå å¢å£å¦å§åªå­å°å±å»åååååååå"],["8fb2a1","ååååååå",4,"åªå¯å°å¹åºå½åååååååååååååå¢å¤å¦å¨å©å¯å±å¶åºå¾ååååååååå²åååååååå£å§å¨å¬å­å¯å±å³å´åµå¸å¹ååååååååå¤å¦å¾ååååååå¡å£å­å¸åºå¼å¾å¿å"],["8fb3a1","ååååååååå¢å¥å®å²å³å´å·ååååååååå¢å¨å±å²åµå¼ååååååååå å¡å¦å®å·å¸å¹ååååååååååååå¤å¥å¦å§å¯å°å¶å·å¸åºå»å½åååååååååååå¡å¥å¨å©åªå¬å°å±å´å¶å·åååå"],["8fb4a1","ååååååååå¥å§å¨å©å«å¬å­å°å²åµå¼å½å¾åååååå¡å£å¥å¬å­å²å¹å¾ååååååååå¡å¤åªå«å¯å²å´åµå·å¸åºå½åååååååååå å¦å§åµåååå¡å§å¨åªå¯å±å´åµååååååå¢å¤å¦å§å©å«å­å®å´å¿"],["8fb5a1","åååååååååååå¡å¦å§å©åªå­å®å±å·å¹åºå»å¿ååååå åªå¬å¯å¶å¼å¾å¿ååååååååååªå«å²åµå¶å»å¼å½åååååååååååå å¡å¤å¦å¿åååååååååååå£å¤å­å²å¿ååååååååå"],["8fb6a1","åååååå¢å©å¶å¿åååå",5,"åå¬å°å³åµå·å¹å»å¼å½å¿åååååååååååå å¡å¢å£å¦å©å­å¯å±å²åµåååååååååååå¦å§å¨å©å«å¬å­å±å³å·å¾ååååååååååååå¡å¤",4,"å±å«å­"],["8fb7a1","å¶å·ååååååååååå å¢å£å¤å¥å©åªå¬å®å¯å³å´å½å¾å¿åååååå¢å¥å§å¨å«å­",4,"å³å´åµå·å¹åºå»å¼å¾åååååååååååå¡åå§å¨å©å¬å¸å½åååååååå¤å¦å§å©å­å°åµå¶å¸å½å¾å¿å å å å å¡"],["8fb8a1","å å å å å å  å ¦å §å ­å ²å ¹å ¿å¡å¡å¡å¡å¡å¡å¡å¡¡å¡¤å¡§å¡¨å¡¸å¡¼å¡¿å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢å¢ å¢¡å¢¢å¢¦å¢©å¢±å¢²å£å¢¼å£å£å£å£å£å£å£å£å£å£å£¡å£¢å£©å£³å¤å¤å¤å¤å¤å¤å¤èå¤å¤¡å¤£å¤¤å¤¨å¤¯å¤°å¤³å¤µå¤¶å¤¿å¥å¥å¥å¥å¥å¥å¥å¥å¥å¥¡å¥£å¥«å¥­"],["8fb9a1","å¥¯å¥²å¥µå¥¶å¥¹å¥»å¥¼å¦å¦å¦å¦å¦å¦å¦å¦¤å¦§å¦­å¦®å¦¯å¦°å¦³å¦·å¦ºå¦¼å§å§å§å§å§å§å§å§å§å§å§£å§¤å§§å§®å§¯å§±å§²å§´å§·å¨å¨å¨å¨å¨å¨å¨å¨å¨£å¨¤å¨§å¨¨å¨ªå¨­å¨°å©å©å©å©å©å©å©å©å©£å©¥å©§å©­å©·å©ºå©»å©¾åªåªåªåªåªåªåªåªåª åª¢åª§åª¬åª±åª²åª³åªµåª¸åªºåª»åª¿"],["8fbaa1","å«å«å«å«å«å«å« å«¥å«ªå«®å«µå«¶å«½å¬å¬å¬å¬å¬´å¬å¬å¬å¬¡å¬¥å¬­å¬¸å­å­å­å­å­å­å­¨å­®å­¯å­¼å­½å­¾å­¿å®å®å®å®å®å®å®å®å®å®å®¨å®©å®¬å®­å®¯å®±å®²å®·å®ºå®¼å¯å¯å¯å¯å¯",4,"å¯ å¯¯å¯±å¯´å¯½å°å°å°å°å°£å°¦å°©å°«å°¬å°®å°°å°²å°µå°¶å±å±å±å±¢å±£å±§å±¨å±©"],["8fbba1","å±­å±°å±´å±µå±ºå±»å±¼å±½å²å²å²å²å²å²å²å² å²¢å²£å²¦å²ªå²²å²´å²µå²ºå³å³å³å³å³å³®å³±å³²å³´å´å´å´å´å´«å´£å´¤å´¦å´§å´±å´´å´¹å´½å´¿åµåµåµåµåµåµåµåµåµåµ åµ¡åµ¢åµ¤åµªåµ­åµ°åµ¹åµºåµ¾åµ¿å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶å¶ å¶§å¶«å¶°å¶´å¶¸å¶¹å·å·å·å·å·å·å·å· å·¤"],["8fbca1","å·©å·¸å·¹å¸å¸å¸å¸å¸å¸å¸å¸å¸ å¸®å¸¨å¸²å¸µå¸¾å¹å¹å¹å¹å¹å¹å¹å¹å¹å¹¨å¹ª",4,"å¹°åºåºåºåº¢åº¤åº¥åº¨åºªåº¬åº±åº³åº½åº¾åº¿å»å»å»å»å»å»å»å»å»å»å»¥å»«å¼å¼å¼å¼å¼å¼å¼å¼å¼¡å¼¢å¼£å¼¤å¼¨å¼«å¼¬å¼®å¼°å¼´å¼¶å¼»å¼½å¼¿å½å½å½å½å½å½å½å½å½å½ å½£å½¤å½§"],["8fbda1","å½¯å½²å½´å½µå½¸å½ºå½½å½¾å¾å¾å¾å¾å¾å¾å¾¢å¾§å¾«å¾¤å¾¬å¾¯å¾°å¾±å¾¸å¿å¿å¿å¿å¿å¿",4,"å¿å¿¡å¿¢å¿¨å¿©å¿ªå¿¬å¿­å¿®å¿¯å¿²å¿³å¿¶å¿ºå¿¼ææææææææææ¤æ­æ³æµæææææææææææ¡æ§æ±æ¾æ¿ææææææææææææ¢æ¤æ¥æ¨æ°æ±æ·"],["8fbea1","æ»æ¾æææææææææææææææ¢æ¥æ²æµæ¸æ¼æ½æææææ",4,"ææææææ¢æªæ«æ°æ±æµæ¶æ·æ¹ææææææ æ¬æ²æ¸æ»æ¼æ¿ææææææææææææææ æ¥æ¨æªæ­æ¸æ¹æ¼æææææææææææ¡æ¢æ§æ©æ¥"],["8fbfa1","æ¬æ­æ¯ææææææææ æ¢æ£æ§æ©æ«æ¹æ½æææææææææææææ¤æ­æ¯æ³æºæ½æææææ¦æ¨æ³æ¶æ·æºæ¾æ¿ææææææªæ²æ´æ¼æ½ææææææææææ©æªæ­æµæ¶æ¹æ¼ææææææææææææææ¥æ¦æ¬æ­æ±æ´æµ"],["8fc0a1","æ¸æ¼æ½æ¿æææææææææææ¤æ¦æ­æ®æ¯æ½ææææææææææ æ¥æªæ¬æ²æ³æµæ¸æ¹ææææææææ æ¢æ¤æ¥æ©æªæ¯æ°æµæ½æ¿ææææææææææææ æ¡æ£æ­æ³æ´æ»æ½æææææææææææ¡æ£æ¦æ¨æ¬æ³æ½æ¾æ¿"],["8fc1a1","æææææææææææ¤æ¥æ©æªæ­æ°æµæ·æ»æ¿ææææææææææææææ¢æ¦æ©æ®æ±æºæ¼æ½ææææææææ æ§æ«æºæ½ææææææææ æ£æ¦æ®æ²æ³æ´æ¿ææææææææææ°æ²æ´æµæ¹æ¾æ¿ææææææææææ"],["8fc2a1","ææ¡æ¢æ£æ¤æ¦æ©æªæ«æ¬æ®æ°æ±æ³æ¹æ·æææææææææææææ æ¡æ»æªæ«æ¬æ¾æ³æµæ¿æ·æ¸æ¹æ»ææ¼æææææææææææ æ¤æ­æ±æ²æµæ»æ¿æææææææææææ¨æ«æ¬æ®æºæææææææ æ¢æ³æ¾æææææææ"],["8fc3a1","æ¦æ¬æ®æ´æ¶æ»æææææææææææ°æ±æ²æµæ»æ¼æ½æ¹æææææææææææ¡æ¦æ°æ²æ¶æ·æ¡æ æ æ æ æ ¨æ §æ ¬æ ­æ ¯æ °æ ±æ ³æ »æ ¿æ¡æ¡æ¡æ¡æ¡æ¡æ¡æ¡æ¡«æ¡®",4,"æ¡µæ¡¹æ¡ºæ¡»æ¡¼æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢æ¢¡æ¢£æ¢¥æ¢©æ¢ªæ¢®æ¢²æ¢»æ£æ£æ£æ£"],["8fc4a1","æ£æ£æ£æ£æ£æ£æ£æ£¥æ£¨æ£ªæ£«æ£¬æ£­æ£°æ£±æ£µæ£¶æ£»æ£¼æ£½æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤æ¤±æ¤³æ¤µæ¤¸æ¤»æ¥æ¥æ¥æ¥æ¥æ¥æ¥£æ¥¤æ¥¥æ¥¦æ¥¨æ¥©æ¥¬æ¥°æ¥±æ¥²æ¥ºæ¥»æ¥¿æ¦æ¦æ¦æ¦æ¦æ¦¡æ¦¥æ¦¦æ¦¨æ¦«æ¦­æ¦¯æ¦·æ¦¸æ¦ºæ¦¼æ§æ§æ§æ§æ§æ§¢æ§¥æ§®æ§¯æ§±æ§³æ§µæ§¾æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨æ¨ æ¨¤æ¨¨æ¨°æ¨²"],["8fc5a1","æ¨´æ¨·æ¨»æ¨¾æ¨¿æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©æ©¤æ©§æ©ªæ©±æ©³æ©¾æªæªæªæªæªæªæªæªæªæªæªæª¥æª«æª¯æª°æª±æª´æª½æª¾æª¿æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«æ«¤æ«§æ«¬æ«°æ«±æ«²æ«¼æ«½æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬æ¬¤æ¬¨æ¬«æ¬¬æ¬¯æ¬µæ¬¶æ¬»æ¬¿æ­æ­æ­æ­æ­æ­æ­æ­ æ­§æ­«æ­®æ­°æ­µæ­½"],["8fc6a1","æ­¾æ®æ®æ®æ®æ®æ® æ®¢æ®£æ®¨æ®©æ®¬æ®­æ®®æ®°æ®¸æ®¹æ®½æ®¾æ¯æ¯æ¯æ¯æ¯æ¯æ¯¡æ¯£æ¯¦æ¯§æ¯®æ¯±æ¯·æ¯¹æ¯¿æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°æ°¦æ°§æ°¨æ°¬æ°®æ°³æ°µæ°¶æ°ºæ°»æ°¿æ±æ±æ±æ±æ±æ±æ±æ±æ±æ±«æ±­æ±¯æ±´æ±¶æ±¸æ±¹æ±»æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²æ²°æ²²æ²´æ³æ³æ³æ³æ³æ³æ³æ³æ³"],["8fc7a1","æ³æ³æ³ æ³§æ³©æ³«æ³¬æ³®æ³²æ³´æ´æ´æ´æ´æ´æ´æ´æ´æ´¦æ´§æ´¨æ±§æ´®æ´¯æ´±æ´¹æ´¼æ´¿æµæµæµæµ¡æµ¥æµ§æµ¯æµ°æµ¼æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶æ¶ªæ¶¬æ¶´æ¶·æ¶¹æ¶½æ¶¿æ·æ·æ·æ·æ·æ·æ·æ·æ·æ· æ·¢æ·¥æ·©æ·¯æ·°æ·´æ·¶æ·¼æ¸æ¸æ¸æ¸¢æ¸§æ¸²æ¸¶æ¸¹æ¸»æ¸¼æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹æ¹"],["8fc8a1","æ¹¢æ¹£æ¹¨æ¹³æ¹»æ¹½æºæºæºæº æº§æº­æº®æº±æº³æº»æº¿æ»æ»æ»æ»æ»æ»æ»æ»æ»æ»«æ»­æ»®æ»¹æ»»æ»½æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼æ¼¦æ¼©æ¼ªæ¼¯æ¼°æ¼³æ¼¶æ¼»æ¼¼æ¼­æ½æ½æ½æ½æ½æ½æ½æ½æ½æ½¡æ½¢æ½¨æ½¬æ½½æ½¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾æ¾ æ¾¥æ¾¦æ¾§æ¾¨æ¾®æ¾¯æ¾°æ¾µæ¾¶æ¾¼æ¿æ¿æ¿æ¿"],["8fc9a1","æ¿æ¿æ¿¨æ¿©æ¿°æ¿µæ¿¹æ¿¼æ¿½ççççççç ç£ç¯ç´ç·ç¹ç¼çççççççççççç¤ç¥ç¬ç®çµç¶ç¾çççç",4,"çç¤ç«ç°ç±ç´ç·ççççççççç¤çºç",4,"ççççç ç«ç­ç¯ç°ç±ç¸ççççççççççççç "],["8fcaa1","ç¨ç¹çççççççç ç¢ç¯ç°ç²ç³çºç¿ççççççççççç¸ç¾çççççççççç¤ç«ç¯ç´ç¸ç¹çççççççççççççç ç£ç¨ç«ç®ç¯ç±ç·ç¸ç»ç¼ç¿ççççççç¨ç­ç®ç±ç´ç¾ççççççççç¥ç³ç´çºç»"],["8fcba1","ç¾çççççççççççç¢ç¤ç§ç¨ç¬ç±ç²çµçºç»ç½çççççççççç ç¦ç§ç©ç«ç¬ç®ç¯ç±ç·ç¹ç¼ççççççççççççççç ç¢ç¥ç¦çªç«ç­çµç·ç¹ç¼ç½ç¿çççççççççççç¡ç£ç¦ç§ç©ç´çµç·ç¹çºç»ç½"],["8fcca1","ç¿ççççççççç¤ç¦ç¨",9,"ç¹çççççççççççç¢ç¦ç§ç¨ç«ç­ç®ç±ç²çççççççççççççççç ç¡ç£ç¦ç¨ç©çªç«ç®ç¯ç±ç²çµç¹ç»ç¿ççççççççççç¤ç¨çªç«ç¯ç´çºç»ç¼ç¿ç"],["8fcda1","çççç ç¡ç¤ç§ç©çªç¯ç¶ç¹ç½ç¾ç¿ççççççççççç¡ç¯ç±ç¹",5,"ççççççççç¢ç¤ç´çºç¿ççççççççççç ç¡ç¤ç§ç¬ç®ç¯ç±ç¹ççççççççççççççççççç£ç¥ç¦ç©ç­ç²ç³çµç¸ç¹"],["8fcea1","çºç¼çççççççççççç¤ç¥ç­ç®ç¯ç±ç´çççççççççç ç¢",6,"çªç­ç½ççççççççç ç¦ç¨ç¬ç°ç±ç¶ç¹ç¼çççççççççççç¢ç¨ç­ç®ç¯ç´çµç¶ç¹ç½ç¾çççççççççççççç ç¢"],["8fcfa1","ç¤ç§çªç¬ç°ç²ç³ç´çºç½çççççççççç¢ç§çªç®ç¯ç±çµç¾ççççççççç ç¤ç¦çªç¬ç°ç±ç´ç¸ç»ç ç ç ç ç ç ç ç ¡ç ¢ç £ç ­ç ®ç °ç µç ·ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ç¡ ç¡¡ç¡£ç¡¤ç¡¨ç¡ªç¡®ç¡ºç¡¾ç¢ç¢ç¢ç¢ç¢¡ç¢ç¢ç¢ç¢¤ç¢¨ç¢¬ç¢­ç¢°ç¢±ç¢²ç¢³"],["8fd0a1","ç¢»ç¢½ç¢¿ç£ç£ç£ç£ç£ç£ç£ç£ç£ç£¤ç£ç£ç£ ç£¡ç£¦ç£ªç£²ç£³ç¤ç£¶ç£·ç£ºç£»ç£¿ç¤ç¤ç¤ç¤ç¤ç¤ç¤ç¤ ç¤¥ç¤§ç¤©ç¤­ç¤±ç¤´ç¤µç¤»ç¤½ç¤¿ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥ç¥§ç¥©ç¥«ç¥²ç¥¹ç¥»ç¥¼ç¥¾ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦ç¦¡ç¦¨ç¦©ç¦«ç¦¯ç¦±ç¦´ç¦¸ç¦»ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§ç§"],["8fd1a1","ç§ ç§¢ç§¥ç§ªç§«ç§­ç§±ç§¸ç§¼ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨ç¨¡ç¨§ç¨«ç¨­ç¨¯ç¨°ç¨´ç¨µç¨¸ç¨¹ç¨ºç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç©ç© ç©¥ç©§ç©ªç©­ç©µç©¸ç©¾çªçªçªçªçªçªçªçªçªçªçª çª£çª¬çª³çªµçª¹çª»çª¼ç«ç«ç«ç«ç«ç«ç«¨ç«©ç««ç«¬ç«±ç«´ç«»ç«½ç«¾ç¬ç¬ç¬ç¬£ç¬§ç¬©ç¬ªç¬«ç¬­ç¬®ç¬¯ç¬°"],["8fd2a1","ç¬±ç¬´ç¬½ç¬¿ç­ç­ç­ç­ç­ç­ ç­¤ç­¦ç­©ç­ªç­­ç­¯ç­²ç­³ç­·ç®ç®ç®ç®ç®ç®ç®ç®ç® ç®¥ç®¬ç®¯ç®°ç®²ç®µç®¶ç®ºç®»ç®¼ç®½ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯ç¯¨ç¯ªç¯²ç¯´ç¯µç¯¸ç¯¹ç¯ºç¯¼ç¯¾ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç°ç° ç°¥ç°¦ç°¨ç°¬ç°±ç°³ç°´ç°¶ç°¹ç°ºç±ç±ç±ç±ç±ç±ç±",5],["8fd3a1","ç±¡ç±£ç±§ç±©ç±­ç±®ç±°ç±²ç±¹ç±¼ç±½ç²ç²ç²ç²ç²ç² ç²¦ç²°ç²¶ç²·ç²ºç²»ç²¼ç²¿ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³ç³¦ç³©ç³«ç³µç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´ç´£ç´¦ç´ªç´­ç´±ç´¼ç´½ç´¾çµçµçµçµçµçµçµçµçµçµçµçµçµ¥çµ§çµªçµ°çµ¸çµºçµ»çµ¿ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶ç¶"],["8fd4a1","ç¶ç¶¦ç¶§ç¶ªç¶³ç¶¶ç¶·ç¶¹ç·",4,"ç·ç·ç·ç·ç·ç¸ç·¢ç·¥ç·¦ç·ªç·«ç·­ç·±ç·µç·¶ç·¹ç·ºç¸ç¸ç¸ç¸ç¸ç¸ç¸ç¸ ç¸§ç¸¨ç¸¬ç¸­ç¸¯ç¸³ç¸¶ç¸¿ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹ç¹¡ç¹¢ç¹¥ç¹«ç¹®ç¹¯ç¹³ç¹¸ç¹¾çºçºçºçºçºçºçºçºçºçºçºç¼¼ç¼»ç¼½ç¼¾ç¼¿ç½ç½ç½ç½ç½ç½ç½ç½ç½ç½¡ç½£ç½¤ç½¥ç½¦ç½­"],["8fd5a1","ç½±ç½½ç½¾ç½¿ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾ç¾¡ç¾¢ç¾¦ç¾ªç¾­ç¾´ç¾¼ç¾¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿ç¿£ç¿¥ç¿¨ç¿¬ç¿®ç¿¯ç¿²ç¿ºç¿½ç¿¾ç¿¿èèèèèèèèèèèèèè è¤è¦è¬è®è°è´èµè·è¹èºè¼è¾èèè è¤è¦è­è±èµèèèèèè¦è§è«è¸è¹èèèèèèèèè è­è®"],["8fd6a1","è°è²è³è¶è¹èºè¾èèèèèèèè è¤è§è¬è°èµèºè¼èèèèèèè è¡è§è¨è©è­è¯è·èèèèèèèèèèèè¢è®è²è´è»èèèèèèèèèèèè¡è¤è«è¬è°è±è²èµè¶è¸è¹è½è¿èèèèèèèèè¡è¢è¨è²è´èºèèèè"],["8fd7a1","èèèèèèè è£è§è­è´è»è½è¿èèèèèèèèèèèèèèè è¡è£è¤è§è¨è©èªè®è°è²è´è·èºè¼è¾è¿èèèèè è¢è¤è¨èªè­è¯è¶è·è½è¾èèèèèèèèèèèè¡è¢è¬è­è®è°è³è·èºè¼è½èèèèèèèèèèè°è¸"],["8fd8a1","è½è¿èèèèèèèèèèèèèè¦è§è©è¬è¾è¿èèèèèèèèèè¨èªè¶è¸è¹è¼èèèèèèèè­è¯è¹èèèèèèèèèèèèèè è¤è¥è§èªè°è³è´è¶è¸è¼è½èèèèèèè¦è¨è©èªè¯è±è´èºè½è¾èèèèèèè"],["8fd9a1","èè§èªè¯è°è±è²è·è²èºè»è½èèèèèèèèè¢è£è¤è¥è§èªè«è¯è³è´è¶è¿èè",4,"èèè",6,"è¤è«è¯è¹èºè»è½è¿èèèèèèèèèèèè è¢è¥è§è´è¶è·è¸è¼è½è¾è¿èèèèèè­èèèè è¦è¨è­è³è¶è¼"],["8fdaa1","è¿èèèèèèèèèèèèè¡è§è©è¶è¸èºè¼è½èèèèèèèèèèè ",4,"è©è¬è¯èµè¶è·èºèèèèèèè¡è¦è§è¨è­è±è³è´èµè·è¸è¹è¿èèèèèèèèèèè è£è¥è§èèºè¼è½èèèèèèèèèèèèè¡è£"],["8fdba1","è¨è®è¯è±è²è¹èºè¼è½è¾èèèèèèè¡è¤è¥è¯è±è²è»è",6,"èèèèèèèèèè è£è§è¬è­è®è±èµè¾è¿èèèèèèèèèèèè¢è£è¤èªè«è­è±è³è¸èºè¿è è è è è è è è è è è è è è è è è è ¨è ­è ®è °è ²è µ"],["8fdca1","è ºè ¼è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡è¡ è¡¤è¡©è¡±è¡¹è¡»è¢è¢è¢è¢è¢è¢è¢ è¢¨è¢ªè¢ºè¢½è¢¾è£è£",4,"è£è£è£è£è£è£§è£¯è£°è£±è£µè£·è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤è¤ è¤¦è¤§è¤¨è¤°è¤±è¤²è¤µè¤¹è¤ºè¤¾è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥è¥¡è¥¢è¥£è¥«è¥®è¥°è¥³è¥µè¥º"],["8fdda1","è¥»è¥¼è¥½è¦è¦è¦è¦è¦è¦è¦è¦è¦ è¦¥è¦°è¦´è¦µè¦¶è¦·è¦¼è§",4,"è§¥è§©è§«è§­è§±è§³è§¶è§¹è§½è§¿è¨è¨è¨è¨è¨è¨è¨è¨è¨è¨ è¨¢è¨¤è¨¦è¨«è¨¬è¨¯è¨µè¨·è¨½è¨¾è©è©è©è©è©è©è©è©è©è©è©è©è©è©¡è©¥è©§è©µè©¶è©·è©¹è©ºè©»è©¾è©¿èªèªèªèªèªèªèªèªèªèªèªèª§èª©èª®èª¯èª³"],["8fdea1","èª¶èª·èª»èª¾è«è«è«è«è«è«è«è«è«è«è«è«è«¬è«°è«´è«µè«¶è«¼è«¿è¬è¬è¬è¬è¬è¬è¬è¬è¬­è¬°è¬·è¬¼è­",4,"è­è­è­è­è­è­è­è­£è­­è­¶è­¸è­¹è­¼è­¾è®è®è®è®è®è®è®è®è®è®è®è°¸è°¹è°½è°¾è±è±è±è±è±è±è±è±è±è±è±è±è±è±£è±¤è±¦è±¨è±©è±­è±³è±µè±¶è±»è±¾è²"],["8fdfa1","è²è²è²è²è²è²è²è²è²¤è²¹è²ºè³è³è³è³è³è³è³è³è³è³¡è³¨è³¬è³¯è³°è³²è³µè³·è³¸è³¾è³¿è´è´è´è´è´è´èµ¥èµ©èµ¬èµ®èµ¿è¶è¶è¶è¶è¶è¶è¶è¶è¶è¶ è¶¦è¶«è¶¬è¶¯è¶²è¶µè¶·è¶¹è¶»è·è·è·è·è·è·è·è·è·è·è·è·è·¤è·¥è·§è·¬è·°è¶¼è·±è·²è·´è·½è¸è¸è¸è¸è¸è¸è¸è¸è¸ è¸¡è¸¢"],["8fe0a1","è¸£è¸¦è¸§è¸±è¸³è¸¶è¸·è¸¸è¸¹è¸½è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹è¹¡è¹¢è¹©è¹¬è¹­è¹¯è¹°è¹±è¹¹è¹ºè¹»èºèºèºèºèºèºèºèºèºèºèº¢èº§èº©èº­èº®èº³èºµèººèº»è»è»è»è»è»è»è»è»è»è»¨è»®è»°è»±è»·è»¹è»ºè»­è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼è¼ è¼¡è¼£è¼¥è¼§è¼¨è¼¬è¼­è¼®è¼´è¼µè¼¶è¼·è¼ºè½è½"],["8fe1a1","è½è½è½è½",4,"è½è½è½è½¥è¾è¾ è¾¡è¾¤è¾¥è¾¦è¾µè¾¶è¾¸è¾¾è¿è¿è¿è¿è¿è¿è¿è¿è¿è¿è¿ è¿£è¿¤è¿¨è¿®è¿±è¿µè¿¶è¿»è¿¾ééééééé¨é©é¯éªé¬é­é³é´é·é¿éééééé¢é¦é§é¬é°é´é¹éééééééééééé é¡é¢é¥é°é²é³é´é¶é½éé¾é"],["8fe2a1","éééééééééééé¥éé¶é«é¯é°é´é¾é¿ééééééééééééééé é¥é¢é£é§é©é®é¯é±é´é¶é·é¹éºé¼é½éééééééééé¡é¤é§é­é´é¹éºé»ééééééééééééé¡é¦é¨é¬é­é®é°é±é²é³é¶é»é¼é½é¿"],["8fe3a1","éééééééééé¤é¥é©éªé¬",5,"é·é¹é»é½ééééééééééééééééé£é¤é¥é¦é¨é®é¯é°é³éµé¶é¸é¹éºé¼é¾ééééééééééééééé é¡é¥é§é¨é©é®é¯é°éµ",4,"é»é¼é½é¿ééééééé"],["8fe4a1","ééé é¤é¥é§é¨é«é¯é²é¶é¸éºé»é¼é½é¿",4,"éééééééééééééééééé é¡é£é¥é§é¨é¬é®é°é¹é»é¿éééééééééééé¡é¤é¥é§é©éªé³é´é¶é·éééééééééééé¤é¥é§é©éªé­é¯é°é±é³é´é¶"],["8fe5a1","éºé½é¿éééééééééééééé¡é£é¤é¦é¨é«é´éµé¶éºé©éééééé",4,"éééééé¢é¦é§é¹é·é¸éºé»é½ééééééééééééé®é¯é±é²é³é´é»é¿é½éééééééééé¡é£é¨é«é­é®é¯é±é²ééé¸é¹"],["8fe6a1","é¾ééééééééé¡é¦é©é«é¬é´é¶éºé½é¿éééééééééééééé é¤é¦ééé¢é¤é¥é¦é¬é±é³é·é¸é¹éºé¼é½ééééééé¡é®é´é»é¼é¾é¿ééééééééééé¤é¥é¦é©é®é¯é³éºééå¶²éééééé©é¯é±éºé"],["8fe7a1","ééééééé¡é¢é£é¨é±é³ééééééééééé£é§éªé®é³é¶é·é¸é»é½é¿éééééééééé¢é¬é®é±é²éµé¶é¸é¹éºé¼é¾é¿éééééééééééééééééé éé¡é¤é¯é±é´é·é¸éºé é é é é é é é é é  é £é ¦"],["8fe8a1","é «é ®é ¯é °é ²é ³é µé ¥é ¾é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡é¡¢é¡£é¡¥é¡¦é¡ªé¡¬é¢«é¢­é¢®é¢°é¢´é¢·é¢¸é¢ºé¢»é¢¿é£é£é£é£é£¡é££é£¥é£¦é£§é£ªé£³é£¶é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤é¤¢é¤¦é¤§é¤«é¤±",4,"é¤¹é¤ºé¤»é¤¼é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥é¥ é¦é¦é¦é¦¦é¦°é¦±é¦²é¦µ"],["8fe9a1","é¦¹é¦ºé¦½é¦¿é§é§é§é§é§é§é§é§é§§é§ªé§«é§¬é§°é§´é§µé§¹é§½é§¾é¨é¨é¨é¨é¨é¨é¨é¨é¨é¨ é¨¢é¨£é¨¤é¨§é¨­é¨®é¨³é¨µé¨¶é¨¸é©é©é©é©é©é©é©é©é©é©é©éªªéª¬éª®éª¯éª²éª´éªµéª¶éª¹éª»éª¾éª¿é«é«é«é«é«é«é«é«é«é«é«é«é« é«¤é«¥é«§é«©é«¬é«²é«³é«µé«¹é«ºé«½é«¿",4],["8feaa1","é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬é¬ é¬¦é¬«é¬­é¬³é¬´é¬µé¬·é¬¹é¬ºé¬½é­é­é­é­é­é­é­é­é­¡é­£é­¥é­¦é­¨é­ª",4,"é­³é­µé­·é­¸é­¹é­¿é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®é®¦é®§é®©é®¬é®°é®±é®²é®·é®¸é®»é®¼é®¾é®¿é¯é¯é¯é¯é¯é¯é¯é¯é¯é¯¥é¯§é¯ªé¯«é¯¯é¯³é¯·é¯¸"],["8feba1","é¯¹é¯ºé¯½é¯¿é°é°é°é°é°é°é°é°é°é°é°é°¢é°£é°¦",4,"é°±é°µé°¶é°·é°½é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±é±£é±©é±ªé±é±«é±¨é±®é±°é±²é±µé±·é±»é³¦é³²é³·é³¹é´é´é´é´é´é´é´é´é´¯é´°é´²é´³é´´é´ºé´¼éµé´½éµéµéµéµéµéµéµéµ£éµ¢éµ¥éµ©éµªéµ«éµ°éµ¶éµ·éµ»"],["8feca1","éµ¼éµ¾é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶é¶¡é¶ªé¶¬é¶®é¶±é¶µé¶¹é¶¼é¶¿é·é·é·é·é·é·é·é·é·é·é·é· é·¥é·§é·©é·«é·®é·°é·³é·´é·¾é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¸é¹ºé¹»é¹¼éºéºéºéºéºéºéºéºéºéºéºéºéº¤éº¨éº¬éº®éº¯éº°éº³éº´éºµé»é»é»é»é»é»¤é»§é»¬é»­é»®é»°é»±é»²é»µ"],["8feda1","é»¸é»¿é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼é¼¢é¼¦é¼ªé¼«é¼¯é¼±é¼²é¼´é¼·é¼¹é¼ºé¼¼é¼½é¼¿é½é½",4,"é½é½é½é½é½é½é½é½é½¨é½©é½­",4,"é½³é½µé½ºé½½é¾é¾é¾é¾é¾é¾é¾é¾é¾¡é¾¢é¾£é¾¥"]]},function(e){e.exports={uChars:[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],gbChars:[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189e3]}},function(e){e.exports=[["0","\0",127],["8141","ê°ê°ê°ê°ê°",4,"ê°ê°ê°ê°¡ê°¢ê°£ê°¥",6,"ê°®ê°²ê°³ê°´"],["8161","ê°µê°¶ê°·ê°ºê°»ê°½ê°¾ê°¿ê±",9,"ê±ê±",5,"ê±"],["8181","ê±ê±ê±ê±ê±ê±",18,"ê±²ê±³ê±µê±¶ê±¹ê±»",4,"ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²",6,"ê²ê²¢",5,"ê²«ê²­ê²®ê²±",6,"ê²ºê²¾ê²¿ê³ê³ê³ê³ê³ê³ê³ê³ê³ê³",7,"ê³ê³",7,"ê³¢ê³£ê³¥ê³¦ê³©ê³«ê³­ê³®ê³²ê³´ê³·",4,"ê³¾ê³¿ê´ê´ê´ê´ê´",4,"ê´ê´ê´ê´"],["8241","ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´ê´¡",7,"ê´ªê´«ê´®",5],["8261","ê´¶ê´·ê´¹ê´ºê´»ê´½",6,"êµêµêµ",5,"êµêµêµêµêµêµ"],["8281","êµ",7,"êµ¢êµ¤",7,"êµ®êµ¯êµ±êµ²êµ·êµ¸êµ¹êµºêµ¾ê¶ê¶",4,"ê¶ê¶ê¶ê¶ê¶ê¶",10,"ê¶",5,"ê¶¥",17,"ê¶¸",7,"ê·ê·ê·ê·ê·ê·",6,"ê·ê·",7,"ê·ê·ê·ê·¡ê·¢ê·£ê·¥",18],["8341","ê·ºê·»ê·½ê·¾ê¸",5,"ê¸ê¸ê¸",5,"ê¸",7],["8361","ê¸",18,"ê¸²ê¸³ê¸µê¸¶ê¸¹ê¸»ê¸¼"],["8381","ê¸½ê¸¾ê¸¿ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹",4,"ê¹ê¹¢ê¹£ê¹¤ê¹¦ê¹§ê¹ªê¹«ê¹­ê¹®ê¹¯ê¹±",6,"ê¹ºê¹¾",5,"êº",5,"êº",46,"êº¿ê»ê»ê»ê»",6,"ê»ê»",5,"ê»ê»ê»",8],["8441","ê»¦ê»§ê»©ê»ªê»¬ê»®",5,"ê»µê»¶ê»·ê»¹ê»ºê»»ê»½",8],["8461","ê¼ê¼ê¼ê¼ê¼ê¼ê¼ê¼",18],["8481","ê¼¤",7,"ê¼®ê¼¯ê¼±ê¼³ê¼µ",6,"ê¼¾ê½ê½ê½ê½ê½ê½",5,"ê½",10,"ê½",5,"ê½¦",18,"ê½º",5,"ê¾ê¾ê¾ê¾ê¾ê¾ê¾",6,"ê¾ê¾ê¾ê¾",5,"ê¾",26,"ê¾ºê¾»ê¾½ê¾¾"],["8541","ê¾¿ê¿",5,"ê¿ê¿ê¿",4,"ê¿",6,"ê¿",4],["8561","ê¿¢",5,"ê¿ª",5,"ê¿²ê¿³ê¿µê¿¶ê¿·ê¿¹",6,"ëë"],["8581","ë",6,"ëëëëëëë",6,"ë",9,"ë©",26,"ëëëëëëëëëëëëëëë",29,"ë¾ë¿ëëëë",6,"ëëë",5,"ëëëë£ë¤"],["8641","ë¥ë¦ë§ëªë°ë²ë¶ë·ë¹ëºë»ë½",6,"ëë",5,"ë"],["8661","ëëëëë",6,"ë¡ë¢ë£ë¤ë¦",10],["8681","ë±",22,"ëëëëëëëëëëë",4,"ë¦ë§ë©ëªë«ë­",6,"ë¶ëº",5,"ëëëëëë",6,"ëëëëëëëëëëë¡",22,"ëºë»ë½ë¾ë¿ëë",4,"ëëëëëëëëëëëëë"],["8741","ë",9,"ë©",15],["8761","ë¹",18,"ëëëëëëë"],["8781","ë",5,"ëë ",7,"ëªë«ë­ë®ë¯ë±",7,"ëºë¼ë¾",5,"ëëëëë",6,"ëëë",5,"ë¡",18,"ëµ",6,"ë½",26,"ëëëëëëë¡",6,"ëª",4],["8841","ë¯",4,"ë¶",5,"ë½",6,"ëëëë",4],["8861","ëëëëëëë",4,"ë¢ë¤ë§ë¨ë©ë«ë­ë®ë¯ë±ë²ë³ëµë¶ë·"],["8881","ë¸",15,"ëëëëëëë",4,"ëëëëë ë¡ë£ë§ë©ëªë°ë±ë²ë¶ë¼ë½ë¾ëëëëëë",6,"ëë",5,"ë",54,"ëëëëë ë¡ë¢ë£"],["8941","ë¦ë¨ëªë¬ë­ë¯ë²ë³ëµë¶ë·ë¹",6,"ëë",5,"ë"],["8961","ëëëëëë",10,"ë¢",5,"ë©ëªë«ë­"],["8981","ë®",21,"ëëëëëëëëëëëëëëëë¡ë¢ë£ë¥ë¦ë§ë©",18,"ë½",18,"ë",6,"ëëëëëëë¡",6,"ëªë¬",7,"ëµ",15],["8a41","ë",10,"ëëëëëë",6,"ë¢ë¤ë¦"],["8a61","ë§",4,"ë­",18,"ëë"],["8a81","ë",4,"ë",19,"ë",5,"ë¥ë¦ë§ë©ëªë«ë­",7,"ë¶ë¸ëº",5,"ëëëëëëë",6,"ëëëëë",5,"ëëë¡ë¢ë¥ë§",4,"ë®ë°ë²",5,"ë¹",26,"ëëëëë"],["8b41","ë",5,"ë¦ë«",4,"ë²ë³ëµë¶ë·ë¹",6,"ëë"],["8b61","ëëëëëëëëëë",6,"ëë¢",8],["8b81","ë«",52,"ë¢ë£ë¥ë¦ë§ë©ë¬ë­ë®ë¯ë²ë¶",4,"ë¾ë¿ëëëë",6,"ëë",5,"ë",18,"ë­",18],["8c41","ë",15,"ëëëëëë",4],["8c61","ë",6,"ë¦",5,"ë­",6,"ëµ",5],["8c81","ë»",12,"ë",26,"ë¥ë¦ë§ë©",50,"ëëë¡ë¢ë£ë¥",5,"ë­ë®ë¯ë°ë²",16],["8d41","ë",16,"ë",8],["8d61","ë",17,"ë±ë²ë³ëµë¶ë·ë¹ëº"],["8d81","ë»",4,"ëëëë",33,"ëªë«ë­ë®ë±",6,"ëºë¼",7,"ëëëëëëë",6,"ë",9,"ë¡ë¢ë£ë¥ë¦ë§ë©",6,"ë²ë´ë¶",5,"ë¾ë¿ëëëë",6,"ëëëëëëëë"],["8e41","ëë¡",6,"ëªë®",5,"ë¶ë·ë¹",8],["8e61","ë",4,"ëë",19],["8e81","ë",13,"ë®ë¯ë±ë²ë³ëµ",6,"ë¾ë ",4,"ë ë ë ë ë ë ",6,"ë ë ë ",5,"ë ¦ë §ë ©ë ªë «ë ­",6,"ë ¶ë º",5,"ë¡ë¡ë¡ë¡",11,"ë¡ë¡",7,"ë¡ë¡ë¡¡ë¡¢ë¡£ë¡¥",6,"ë¡®ë¡°ë¡²",5,"ë¡¹ë¡ºë¡»ë¡½",7],["8f41","ë¢",7,"ë¢",17],["8f61","ë¢ ",7,"ë¢©",6,"ë¢±ë¢²ë¢³ë¢µë¢¶ë¢·ë¢¹",4],["8f81","ë¢¾ë¢¿ë£ë£ë£",5,"ë£ë£ë£ë£ë£ë£ë£",7,"ë£ë£ ë£¢",5,"ë£ªë£«ë£­ë£®ë£¯ë£±",6,"ë£ºë£¼ë£¾",5,"ë¤",18,"ë¤",6,"ë¤¡",26,"ë¤¾ë¤¿ë¥ë¥ë¥ë¥",6,"ë¥ë¥ë¥ë¥",5],["9041","ë¥ë¥ë¥ë¥ë¥ë¥¡",6,"ë¥ªë¥¬ë¥®",5,"ë¥¶ë¥·ë¥¹ë¥ºë¥»ë¥½"],["9061","ë¥¾",5,"ë¦ë¦ë¦ë¦ë¦",15],["9081","ë¦",12,"ë¦®ë¦¯ë¦±ë¦²ë¦³ë¦µ",6,"ë¦¾ë§ë§",5,"ë§ë§ë§ë§",4,"ë§ë§ë§ë§ ë§¢ë§¦ë§§ë§©ë§ªë§«ë§­",6,"ë§¶ë§»",4,"ë¨",5,"ë¨",11,"ë¨",33,"ë¨ºë¨»ë¨½ë¨¾ë¨¿ë©ë©ë©ë©ë©"],["9141","ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©",6,"ë©¦ë©ª",5],["9161","ë©²ë©³ë©µë©¶ë©·ë©¹",9,"ëªëªëªëªëªëª",5],["9181","ëª",20,"ëªªëª­ëª®ëª¯ëª±ëª³",4,"ëªºëª¼ëª¾",5,"ë«ë«ë«ë«",14,"ë«",33,"ë«½ë«¾ë«¿ë¬ë¬ë¬ë¬",7,"ë¬ë¬ë¬",5,"ë¬ë¬ë¬ë¬ë¬ë¬ë¬¡",6],["9241","ë¬¨ë¬ªë¬¬",7,"ë¬·ë¬¹ë¬ºë¬¿",4,"ë­ë­ë­ë­ë­ë­ë­ë­"],["9261","ë­ë­ë­ë­ë­",7,"ë­¢ë­¤",7,"ë­­",4],["9281","ë­²",21,"ë®ë®ë®ë®ë®ë®ë®",18,"ë®¥ë®¦ë®§ë®©ë®ªë®«ë®­",6,"ë®µë®¶ë®¸",7,"ë¯ë¯ë¯ë¯ë¯ë¯ë¯",6,"ë¯ë¯ë¯",35,"ë¯ºë¯»ë¯½ë¯¾ë°"],["9341","ë°",4,"ë°ë°ë°ë°ë°ë°ë°ë° ë°¡ë°¢ë°£ë°¦ë°¨ë°ªë°«ë°¬ë°®ë°¯ë°²ë°³ë°µ"],["9361","ë°¶ë°·ë°¹",6,"ë±ë±ë±ë±ë±ë±ë±ë±ë±",8],["9381","ë±ë±ë±ë±",37,"ë²ë²ë²ë²ë²ë²",4,"ë²ë²ë²",4,"ë²¢ë²£ë²¥ë²¦ë²©",6,"ë²²ë²¶",5,"ë²¾ë²¿ë³ë³ë³ë³",7,"ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³",22,"ë³·ë³¹ë³ºë³»ë³½"],["9441","ë³¾",5,"ë´ë´ë´",5,"ë´ë´ë´ë´",8],["9461","ë´",5,"ë´¥",6,"ë´­",12],["9481","ë´º",5,"ëµ",6,"ëµëµëµëµëµëµ",6,"ëµ",9,"ëµ¥ëµ¦ëµ§ëµ©",22,"ë¶ë¶ë¶ë¶ë¶",4,"ë¶ë¶ë¶ë¶ë¶ë¶ë¶",6,"ë¶¥",10,"ë¶±",6,"ë¶¹",24],["9541","ë·ë·ë·ë·ë·ë·ë·ë·",11,"ë·ª",5,"ë·±"],["9561","ë·²ë·³ë·µë·¶ë··ë·¹",6,"ë¸ë¸ë¸ë¸",5,"ë¸ë¸ë¸ë¸ë¸"],["9581","ë¸",6,"ë¸ë¸ ",35,"ë¹ë¹ë¹ë¹ë¹ë¹ë¹",4,"ë¹ë¹ë¹ë¹ë¹ë¹ë¹¢ë¹£ë¹¥ë¹¦ë¹§ë¹©ë¹«",4,"ë¹²ë¹¶",4,"ë¹¾ë¹¿ëºëºëºëº",6,"ëºëº",5,"ëº",13,"ëº©",14],["9641","ëº¸",23,"ë»ë»"],["9661","ë»ë»ë»",6,"ë»¡ë»¢ë»¦",5,"ë»­",8],["9681","ë»¶",10,"ë¼",5,"ë¼",13,"ë¼ë¼",33,"ë½ë½ë½ë½ë½ë½",6,"ë½ë½ë½ë½",44],["9741","ë¾",16,"ë¾",8],["9761","ë¾",17,"ë¾±",7],["9781","ë¾¹",11,"ë¿",5,"ë¿ë¿ë¿ë¿ë¿ë¿",6,"ë¿ë¿ë¿ ë¿¢",89,"ì½ì¾ì¿"],["9841","ì",16,"ì",5,"ììì"],["9861","ìììì¡",6,"ìª",15],["9881","ìº",21,"ìììììì",6,"ì¢ì¤ì¦",5,"ì®ì±ì²ì·",4,"ì¾ììììììììììì",6,"ìì",5,"ì¦ì§ì©ìªì«ì­",6,"ì¶ì¸ìº",5,"ììììììì",6,"ììììì",5,"ì¡ì¢ì¥ì¨ì©ìªì«ì®"],["9941","ì²ì³ì´ìµì·ìºì»ì½ì¾ì¿ì",6,"ìì",5,"ìì"],["9961","ìììì",6,"ì¦ìª",5,"ì±ì²ì³ìµì¶ì·ì¹ìºì»"],["9981","ì¼",8,"ì",5,"ìììììì",4,"ìì ì¢ì£ì¤ì¦ì§ìªì«ì­ì®ì¯ì±",11,"ì¾",5,"ììììììì",6,"ììì",6,"ì¡ì¢ì£ì¥ì¦ì§ì©",6,"ì²ì´",7,"ì¾ì¿ìììì",6,"ììì",5,"ììììì¡ì¢ì£"],["9a41","ì¤ì¥ì¦ì§ìªì¬ì®ì°ì³ìµ",16],["9a61","ììì",6,"ìììììì",6,"ì¡ì¢ì£ì¤ì¦"],["9a81","ì§",4,"ì®ì¯ì±ì²ì³ìµ",6,"ì¾ìì",5,"ì",5,"ì",6,"ìììì",5,"ì¦ì§ì©ìªì«ì®",5,"ì¶ì¸ìº",33,"ììì¡ì¢ì¥",5,"ì®ì°ì²ì³ì´ìµì·ìºì½ì¾ì¿ì",6,"ìììì"],["9b41","ììììììììì",6,"ì¦ì§ìª",8],["9b61","ì³",17,"ì",7],["9b81","ì",25,"ìªì«ì­ì®ì¯ì±ì³",4,"ìºì»ì¾",5,"ììììììì",50,"ì",22,"ì"],["9c41","ìììì¡ì£",4,"ìªì«ì¬ì®",5,"ì¶ì·ì¹",5],["9c61","ì¿",8,"ì",6,"ì",9],["9c81","ì",8,"ì¥",6,"ì­ì®ì¯ì±ì²ì³ìµ",6,"ì¾",9,"ì",26,"ì¦ì§ì©ìªì«ì­",6,"ì¶ì·ì¸ìº",5,"ì",18,"ì",6,"ì",12],["9d41","ìª",13,"ì¹ìºì»ì½",8],["9d61","ì",25],["9d81","ì ",8,"ìª",5,"ì²ì³ìµì¶ì·ì¹ì»ì¼ì½ì¾ì",9,"ììììììì",6,"ì",10,"ìªì«ì­ì®ì¯ì±",6,"ìºì¼ì¾",5,"ììììììììììììì¢ì£ì¥ì¦ì§ì©",6,"ì²ì¶",5,"ì¾ì¿ìììììììììììììì"],["9e41","ìììììììì¡",7,"ìª",9,"ì¶"],["9e61","ì·ìºì¿",4,"ììììììììì",6,"ì¢ì¤ì¦ì§"],["9e81","ì¨ì©ìªì«ì¯ì±ì²ì³ìµì¸ì¹ìºì»ìììììììììì",6,"ìì",6,"ì¦ì§ì©ìªì«ì¯ì±ì²ì¶ì¸ìºì¼ì½ì¾ì¿ìììììì",6,"ìì",5,"ììì¡",10,"ì­ì®ì°ì²",5,"ìºì»ì½ì¾ì¿ì",6,"ììì",5,"ìììììì",6,"ì¦"],["9f41","ì¨ìª",5,"ì²ì³ìµì¶ì·ì»",4,"ììì",5,"ì"],["9f61","ììììì",6,"ììì¢",5,"ìªì«ì­ì®ì¯ì±ì²"],["9f81","ì³",4,"ìºì»ì¼ì¾",5,"ìììììì",6,"ììì",5,"ì¢ì£ì¥ì¦ì§ì©",6,"ì²ì´ì¶ì¸ì¹ìºì»ì¾ì¿ìììì",4,"ìììììììììì¡",6,"ì©ìªì¬",7,"ì¶ì·ì¹ìºì»ì¿ììììììììììììì",4,"ì¢ì§",4,"ì®ì¯ì±ì²ì³ìµì¶ì·"],["a041","ì¸ì¹ìºì»ì¾ì",5,"ììììì",6,"ìììì"],["a061","ì",5,"ì¥ì¦ì§ì©ìªì«ì­",13],["a081","ì»",4,"ì ì ì ì ì ì ì ",4,"ì ì ì ",4,"ì ì ì ¡ì ¢ì £ì ¥",6,"ì ®ì °ì ²",5,"ì ¹ì ºì »ì ½ì ¾ì ¿ì¡",6,"ì¡ì¡ì¡",5,"ì¡",26,"ì¡²ì¡³ì¡µì¡¶ì¡·ì¡¹ì¡»",4,"ì¢ì¢ì¢ì¢ì¢ì¢",5,"ì¢",7,"ì¢ì¢ ì¢¢ì¢£ì¢¤"],["a141","ì¢¥ì¢¦ì¢§ì¢©",18,"ì¢¾ì¢¿ì£ì£"],["a161","ì£ì£ì£ì£ì£ì£ì£ì£ì£",6,"ì£ì£ì£",5,"ì£¢ì££ì£¥"],["a181","ì£¦",14,"ì£¶",5,"ì£¾ì£¿ì¤ì¤ì¤ì¤",4,"ì¤ãããÂ·â¥â¦Â¨ãÂ­ââ¥ï¼¼â¼ââââããã",9,"Â±ÃÃ·â â¤â¥ââ´Â°â²â³ââ«ï¿ ï¿¡ï¿¥âââ â¥ââââ¡âÂ§â»ââââââââ¡â â³â²â½â¼âââââãâªâ«ââ½ââµâ«â¬âââââââªâ©â§â¨ï¿¢"],["a241","ì¤ì¤",5,"ì¤",18],["a261","ì¤­",6,"ì¤µ",18],["a281","ì¥",7,"ì¥ì¥ì¥ì¥ì¥ì¥",6,"ì¥¢ì¥¤",7,"ì¥­ì¥®ì¥¯ââââÂ´ï½ËËËËËÂ¸ËÂ¡Â¿Ëâ®ââÂ¤ââ°âââ·â¶â¤â â¡â¥â§â£âââ£ââââ¤â¥â¨â§â¦â©â¨ââââÂ¶â â¡ââââââ­â©âªâ¬ã¿ãâãâ¢ããâ¡â¬Â®"],["a341","ì¥±ì¥²ì¥³ì¥µ",6,"ì¥½",10,"ì¦ì¦ì¦ì¦ì¦"],["a361","ì¦",6,"ì¦ì¦ì¦",16],["a381","ì¦¯",16,"ì§ì§ì§ì§ì§ì§",4,"ì§ì§ì§ì§ì§ï¼",58,"ï¿¦ï¼½",32,"ï¿£"],["a441","ì§ì§ì§¡ì§£ì§¥ì§¦ì§¨ì§©ì§ªì§«ì§®ì§²",5,"ì§ºì§»ì§½ì§¾ì§¿ì¨ì¨ì¨ì¨"],["a461","ì¨ì¨ì¨ì¨ì¨",5,"ì¨ì¨ì¨ì¨",12],["a481","ì¨¦ì¨§ì¨¨ì¨ª",28,"ã±",93],["a541","ì©",4,"ì©ì©ì©ì©ì©ì©",6,"ì©ì©¢",5,"ì©©ì©ª"],["a561","ì©«",17,"ì©¾",5,"ìªìª"],["a581","ìª",16,"ìª",14,"â°",9],["a5b0","â ",9],["a5c1","Î",16,"Î£",6],["a5e1","Î±",16,"Ï",6],["a641","ìª¨",19,"ìª¾ìª¿ì«ì«ì«ì«"],["a661","ì«",5,"ì«ì«ì«ì«ì«ì«ì«ì«",5,"ì«¡",6],["a681","ì«¨ì«©ì«ªì««ì«­",6,"ì«µ",18,"ì¬ì¬ââââââââ¬â¤â´â¼âââââââ£â³â«â»ââ â¯â¨â·â¿ââ°â¥â¸ââââââââââââ¡â¢â¦â§â©âªâ­â®â±â²âµâ¶â¹âºâ½â¾âââ",7],["a741","ì¬",4,"ì¬ì¬ì¬ì¬ì¬ì¬ì¬",6,"ì¬¢",7],["a761","ì¬ª",22,"ì­ì­ì­"],["a781","ì­ì­ì­ì­ì­ì­ì­ì­ì­",6,"ì­ì­ì­ì­",5,"ì­¥",7,"ãããâããã£ã¤ã¥ã¦ã",9,"ããããããããã§ã¨ã°",9,"ã",4,"ãº",5,"ã",4,"â¦ãããããããã­ã®ã¯ãã©ãªã«ã¬ããããããã"],["a841","ì­­",10,"ì­º",14],["a861","ì®",18,"ì®",6],["a881","ì®¤",19,"ì®¹",11,"ÃÃÂªÄ¦"],["a8a6","Ä²"],["a8a8","Ä¿ÅÃÅÂºÃÅ¦Å"],["a8b1","ã ",27,"â",25,"â ",14,"Â½ââÂ¼Â¾ââââ"],["a941","ì¯",14,"ì¯",10],["a961","ì¯ ì¯¡ì¯¢ì¯£ì¯¥ì¯¦ì¯¨ì¯ª",18],["a981","ì¯½",14,"ì°ì°ì°ì°ì°ì°",6,"ì°ì°ì° ì°£ì°¤Ã¦ÄÃ°Ä§Ä±Ä³Ä¸ÅÅÃ¸ÅÃÃ¾Å§ÅÅã",27,"â",25,"â´",14,"Â¹Â²Â³â´â¿ââââ"],["aa41","ì°¥ì°¦ì°ªì°«ì°­ì°¯ì°±",6,"ì°ºì°¿",4,"ì±ì±ì±ì±ì±ì±ì±"],["aa61","ì±",4,"ì±ì±",5,"ì±¡ì±¢ì±£ì±¥ì±§ì±©",6,"ì±±ì±²"],["aa81","ì±³ì±´ì±¶",29,"ã",82],["ab41","ì²ì²ì²ì²ì²ì²ì²ì²ì²ì²¡",6,"ì²ªì²®",5,"ì²¶ì²·ì²¹"],["ab61","ì²ºì²»ì²½",6,"ì³ì³ì³",5,"ì³ì³ì³ì³",5],["ab81","ì³",8,"ì³¥",6,"ì³­ì³®ì³¯ì³±",12,"ã¡",85],["ac41","ì³¾ì³¿ì´ì´",5,"ì´ì´ì´ì´ì´ì´",6,"ì´ì´ì´ì´ì´ "],["ac61","ì´¡ì´¢ì´£ì´¥ì´¦ì´§ì´©ì´ªì´«ì´­",11,"ì´º",4],["ac81","ì´¿",28,"ìµìµìµÐ",5,"ÐÐ",25],["acd1","Ð°",5,"ÑÐ¶",25],["ad41","ìµ¡ìµ¢ìµ£ìµ¥",6,"ìµ®ìµ°ìµ²",5,"ìµ¹",7],["ad61","ì¶",6,"ì¶",10,"ì¶ì¶ì¶ì¶ì¶ì¶ì¶ì¶"],["ad81","ì¶ ì¶¡ì¶¢ì¶£ì¶¦ì¶¨ì¶ª",5,"ì¶±",18,"ì·"],["ae41","ì·",5,"ì·ì·ì·ì·",16],["ae61","ì·¢",5,"ì·©ì·ªì·«ì·­ì·®ì·¯ì·±",6,"ì·ºì·¼ì·¾",4],["ae81","ì¸ì¸ì¸ì¸ì¸ì¸ì¸ì¸",6,"ì¸ì¸ì¸ì¸ì¸",5,"ì¸¢ì¸£ì¸¥ì¸¦ì¸§ì¸©ì¸ªì¸«"],["af41","ì¸¬ì¸­ì¸®ì¸¯ì¸²ì¸´ì¸¶",19],["af61","ì¹",13,"ì¹ì¹ì¹ì¹ì¹¢",5,"ì¹ªì¹¬"],["af81","ì¹®",5,"ì¹¶ì¹·ì¹¹ì¹ºì¹»ì¹½",6,"ìºìºìº",5,"ìºìºìºìºìºìº"],["b041","ìº",5,"ìº¢ìº¦",5,"ìº®",12],["b061","ìº»",5,"ì»",19],["b081","ì»",13,"ì»¦ì»§ì»©ì»ªì»­",6,"ì»¶ì»º",5,"ê°ê°ê°ê°ê°ê°ê°ê°",7,"ê°",4,"ê° ê°¤ê°¬ê°­ê°¯ê°°ê°±ê°¸ê°¹ê°¼ê±ê±ê±ê±ê±ê±ê±°ê±±ê±´ê±·ê±¸ê±ºê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê²ê² ê²¡ê²¨ê²©ê²ªê²¬ê²¯ê²°ê²¸ê²¹ê²»ê²¼ê²½ê³ê³ê³ê³ê³ê³ê³ ê³¡ê³¤ê³§ê³¨ê³ªê³¬ê³¯ê³°ê³±ê³³ê³µê³¶ê³¼ê³½ê´ê´ê´"],["b141","ì¼ì¼ì¼ì¼ì¼ì¼",6,"ì¼ì¼ì¼",5,"ì¼ì¼ì¼ì¼¡ì¼¢ì¼£"],["b161","ì¼¥",6,"ì¼®ì¼²",5,"ì¼¹",11],["b181","ì½",14,"ì½ì½ì½ì½ì½ì½",6,"ì½¦ì½¨ì½ªì½«ì½¬ê´ê´ê´ê´ê´ê´ê´ ê´©ê´¬ê´­ê´´ê´µê´¸ê´¼êµêµêµêµêµêµêµêµ¡êµ£êµ¬êµ­êµ°êµ³êµ´êµµêµ¶êµ»êµ¼êµ½êµ¿ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶ê¶¤ê¶·ê·ê·ê·ê·ê·ê·ê·ê·ê· ê·¤ê·¸ê·¹ê·¼ê·¿ê¸ê¸ê¸ê¸ê¸ê¸ê¸ê¸°ê¸±ê¸´ê¸·ê¸¸ê¸ºê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ê¹ ê¹¡ê¹¥ê¹¨ê¹©ê¹¬ê¹°ê¹¸"],["b241","ì½­ì½®ì½¯ì½²ì½³ì½µì½¶ì½·ì½¹",6,"ì¾ì¾ì¾ì¾ì¾",5,"ì¾"],["b261","ì¾",18,"ì¾¢",5,"ì¾©"],["b281","ì¾ª",5,"ì¾±",18,"ì¿",6,"ê¹¹ê¹»ê¹¼ê¹½êºêºêºêº¼êº½êº¾ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»ê»¨ê»«ê»­ê»´ê»¸ê»¼ê¼ê¼ê¼ê¼ê¼¬ê¼­ê¼°ê¼²ê¼´ê¼¼ê¼½ê¼¿ê½ê½ê½ê½ê½ê½ê½ê½ê½¤ê½¥ê½¹ê¾ê¾ê¾ê¾ê¾ê¾ê¾ê¾¸ê¾¹ê¾¼ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿ê¿¨ê¿©ê¿°ê¿±ê¿´ê¿¸ëëëëëëëëë¨ëëëëëëëëëëë"],["b341","ì¿",19,"ì¿¢ì¿£ì¿¥ì¿¦ì¿§ì¿©"],["b361","ì¿ª",5,"ì¿²ì¿´ì¿¶",5,"ì¿½ì¿¾ì¿¿íííí",5],["b381","í",5,"í",5,"í",19,"ëë¼ë½ëëëëëëëëëëëë ë¡ë¢ë¨ë©ë«",4,"ë±ë³ë´ëµë¸ë¼ëëëëëëëëëë ë¥ëëëëëëëëëëëëë£ë¤ë¥ë¨ë¬ë´ëµë·ë¸ë¹ëëëëëëëëëëë ë¸ë¹ë¼ëëëëëëëëëëëë¨ëëëëë"],["b441","í®",5,"í¶í·í¹íºí»í½",6,"ííí",5],["b461","ííííííí",6,"í¡",10,"í®í¯"],["b481","í±í²í³íµ",6,"í¾í¿íí",18,"ëë¨ë©ë¬ë°ë¹ë»ë½ëëëëëëëëëë ë´ë¼ëëë ë¨ë©ë´ëµë¼ëëëëëëëëëë ë¡ë£ë¥ë¦ëªë¬ë°ë´ëëëëëëëëëë¢ë¤ë¥ë¦ë¨ë«",4,"ë³ë´ëµë·",4,"ë¿ëëëëëëëëëëëëëëëëëëë¤ë¥"],["b541","í",14,"í¦í§í©íªí«í­",5],["b561","í³í¶í¸íº",5,"íííííí",5,"íí",4],["b581","íííí¡í¢í£í¥",6,"í®í²",5,"í¹",11,"ë§ë©ë«ë®ë°ë±ë´ë¸ëëëëëëëëë ë¡ë¨ë¬ëëëëëëëëëëëëëë ë¤ë¨ë¼ëëëë ë¨ë©ë«ë´ëëëëë ë¡ë£ë¥ë¬ëëëë¤ë¨ë¬ëµë·ë¹ëëëëëëëë ë£ë¤ë¦ë¬ë­ë¯ë±ë¸ëëëëëë¤ë¥ë§ë¨ë©ëªë°ë±ë´ë¸"],["b641","í",7,"í",17],["b661","í ",15,"í²í³íµí¶í·í¹í»í¼í½í¾"],["b681","í¿íí",5,"íííííí",6,"íí í¢",5,"í©íªí«í­ëëëëëëëëëëëëëë ë¡ë ë¡ë¤ë¨ëªë«ë°ë±ë³ë´ëµë»ë¼ë½ëëëëëëëëë¬ëëëëë¥ë¬ë´ëë¤ë¨ëëë ë¤ë«ë¬ë±ëë°ë´ë¸ëëëë¨ë©ë¬ë¯ë°ë¸ë¹ë»ëëëëëë ë¤ë¨ë°ë±ë³ëµë¼ë½ëëëëëëëëëë"],["b741","í®",13,"í½",6,"ííííí"],["b761","í",20,"í¢í£í¥í¦í§"],["b781","í©",6,"í²í´í¶í·í¸í¹í»í½í¾í¿í",14,"ëëëë ë¨ë©ë«ë¬ë­ë´ëµë¸ëëë¬ë­ë°ë´ë¼ë½ë¿ë ë ë ë ë ë ë ë ë ë ë ë ¤ë ¥ë ¨ë ¬ë ´ë µë ·ë ¸ë ¹ë¡ë¡ë¡ë¡ë¡ë¡ë¡ ë¡¤ë¡¬ë¡­ë¡¯ë¡±ë¡¸ë¡¼ë¢ë¢¨ë¢°ë¢´ë¢¸ë£ë£ë£ë£ë£ë£ë£ë£ë£ë£¡ë£¨ë£©ë£¬ë£°ë£¸ë£¹ë£»ë£½ë¤ë¤ë¤ ë¤¼ë¤½ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ë¥ ë¥¨ë¥©"],["b841","í",7,"í",17],["b861","í«",8,"íµí¶í·í¹",13],["b881","íí",5,"í",24,"ë¥«ë¥­ë¥´ë¥µë¥¸ë¥¼ë¦ë¦ë¦ë¦ë¦ë¦ë¦ë¦¬ë¦­ë¦°ë¦´ë¦¼ë¦½ë¦¿ë§ë§ë§ë§ë§",4,"ë§ë§ë§ë§ë§ë§¡ë§£ë§¤ë§¥ë§¨ë§¬ë§´ë§µë§·ë§¸ë§¹ë§ºë¨ë¨ë¨ë¨ë¨¸ë¨¹ë¨¼ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©ë©¤ë©¥ë©§ë©¨ë©©ë©°ë©±ë©´ë©¸ëªëªëªëªëªëª¨ëª©ëª«ëª¬ëª°ëª²ëª¸ëª¹ëª»ëª½ë«ë«ë«ë«ë«¼"],["b941","íªí«í®í¯í±í²í³íµ",6,"í¾íí",5,"íííí"],["b961","í",14,"í",6,"í¥í¦í§í¨"],["b981","í©",22,"íííííííííë¬ë¬ë¬ë¬ë¬ë¬ë¬ë¬ ë¬©ë¬«ë¬´ë¬µë¬¶ë¬¸ë¬»ë¬¼ë¬½ë¬¾ë­ë­ë­ë­ë­ë­ë­ë­ë­ë­¡ë­£ë­¬ë®ë®ë®ë®¤ë®¨ë®¬ë®´ë®·ë¯ë¯ë¯ë¯ë¯ë¯¸ë¯¹ë¯¼ë¯¿ë°ë°ë°ë°ë°ë°ë°ë°ë°ë°",4,"ë°",4,"ë°¤ë°¥ë°§ë°©ë°­ë°°ë°±ë°´ë°¸ë±ë±ë±ë±ë±ë±ë±ë±ë±ë±ë²ë²ë²ë²ë²ë²ë²ë²ë²"],["ba41","ííííííí",5,"íííí¡í¢í£í¥",6,"í­"],["ba61","í®í¯í°í²",5,"íºí»í½í¾íí",4,"íí",5],["ba81","ííííííííí",6,"í¦",9,"í²í³íµí¶í·í¹íºë²ë²ë² ë²¡ë²¤ë²§ë²¨ë²°ë²±ë²³ë²´ë²µë²¼ë²½ë³ë³ë³ë³ë³ë³ë³ë³ë³ë³´ë³µë³¶ë³¸ë³¼ë´ë´ë´ë´ë´ë´ë´¤ë´¬ëµëµëµëµëµëµëµëµ¤ëµ¨ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶ë¶¤ë¶°ë¶¸ë·ë·ë·ë·ë·©ë·°ë·´ë·¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¸ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ë¹ ë¹¡ë¹¤"],["bb41","í»",4,"ííí",5,"íííííí",4,"íí¢í£"],["bb61","í¤í¦í§íªí«í­í®í¯í±",6,"íºí¾",5,"íííí"],["bb81","í",31,"ë¹¨ë¹ªë¹°ë¹±ë¹³ë¹´ë¹µë¹»ë¹¼ë¹½ëºëºëºëºëºëºëºëºëºëº¨ë»ë»ë»ë»ë»ë» ë»£ë»¤ë»¥ë»¬ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë¼ë½ë½ë½ë½ë½ë½ë½ë¾ë¾°ë¿ë¿ë¿ë¿ë¿ë¿ë¿ë¿¡ì¼ìììì ì¨ì©ììììì ì¡ì£ì¥ì¬ì­ì¯ì°ì³ì´ìµì¶ì¼ì½ì¿ììììììììììììì¤"],["bc41","íª",17,"í¾í¿íííííí"],["bc61","íííííí",5,"íííííí¡",6,"íªí¬í®"],["bc81","í¯",4,"íµí¶í·í¹íºí»í½",6,"ííí",5,"í",5,"ì¥ì¨ì¬ì´ìµì·ì¹ìììììì",4,"ì£ì¤ì¦ì§ì¬ì­ì¯ì°ì±ì¶ì¸ì¹ì¼ììììììììììì¤ì¥ì§ì¨ì©ì°ì´ì¸ììììììììììì¡ì¥ì¨ì©ì¬ì°ì½ììììììì ì¤ì¨ì°ì±ì³ì¼ì½ììììììììììì ì¨ì©ì«ì­"],["bd41","íí",7,"í¢í¤",7,"í®í¯í±í²í³íµí¶í·"],["bd61","í¸í¹íºí»í¾íí",5,"í",13],["bd81","í",5,"í",25,"ì¯ì±ì²ì´ìììììì ì¥ì¬ì­ì°ì´ì¼ì½ì¿ìììììììì¤ì¥ì¨ì¬ì­ì´ìµì·ì¹ììì ì£ì¤ì«ì¬ì­ì¯ì±ì¶ì¸ì¹ì»ì¼ììììììììììì¤ì¥ì¨ì©ìì¨ì©ì¬ì°ì²ì¸ì¹ì¼ì½ììììììììì ì¢ì¨ì©ì­ì´ìµì¸ììì¤ì¬ì°"],["be41","í¸",7,"íííí",14],["be61","í",7,"íííí¡í¢í£í¥",7,"í®í°í±í²"],["be81","í³",4,"íºí»í½í¾íí",4,"ííí",5,"í",8,"ì´ì¼ì½ìì¤ì¥ì¨ì¬ì´ìµì¹ìììì¸ì¼ì©ì°ì±ì´ì¸ìºì¿ììììììì¨ì©ì¬ì°ì¸ì¹ì»ì½ììììììììììììììììì ì¡ì¤ì¨ì°ì±ì³ì´ìµì¼ì½ìììììììììììì ì©ì´ìµì¸ì¹ì»ì¼ì½ì¾ì",6,"ìì"],["bf41","í",10,"íª",14],["bf61","í¹",18,"ííííííí"],["bf81","í",5,"ííí ",7,"í©íªí«í­í®í¯í±",6,"í¹íºí¼ììììì ì¡ì£ì¥ì¬ì­ì®ì°ì´ì¶ì·ì¼",5,"ììììììììììì¤ì¥ì¨ì¬ì­ì®ì°ì³ì´ìµì·ì¹ì»ìììììììììììì ì¬ì¯ì±ì¸ì¹ì¼ìììììììììì¤ì¥ì§ì©ì°ì±ì´ì¸ì¹ìºììììììììììì ì¡ì¨"],["c041","í¾",5,"ííííííí",6,"íí",5],["c061","í",25],["c081","í¸í¹íºí»í¾í¿íííí",6,"ííí",5,"íííííí¡í¢í£ì©ì¬ì°ì¸ì¹ì½ììììììììì ì¡ì¤ì¨ì°ì±ì³ìµì·ì¼ì½ììììììì",7,"ìì ì¨ì«ì´ìµì¸ì¼ì½ì¾ìììììììììììììììì ì¡ì£ì¤ì¥ì¦ì¬ì­ì°ì´ì¼ì½ì¿ìììììììììì¤ì¨ì¬ì ì ì ì ì "],["c141","í¤í¦í§íªí¬í®",5,"í¶í·í¹íºí»í½",6,"ííí"],["c161","ííííí",19,"í¦í§"],["c181","í¨",31,"ì ì ì ì ì ì ì ì  ì ¤ì ¬ì ­ì ¯ì ±ì ¸ì ¼ì¡ì¡ì¡ì¡ì¡ì¡ì¡°ì¡±ì¡´ì¡¸ì¡ºì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢ì¢¡ì¢¨ì¢¼ì¢½ì£ì£ì£ì£ì£ì£ì£ì£ ì£¡ì£¤ì£µì£¼ì£½ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤ì¤¬ì¤´ì¥ì¥ì¥ì¥ì¥ ì¥¡ì¥£ì¥¬ì¥°ì¥´ì¥¼ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì¦ì§ì§ì§ì§ì§ì§ì§ì§ì§"],["c241","ííííííí",4,"ííí",5,"í¦í§í©íªí«í­í®"],["c261","í¯",4,"í¶í¸íº",5,"íííííí",6,"í"],["c281","í",5,"íííí¡í¢í£í¥",7,"í®",9,"íºí»ì§ì§ì§ì§ì§ì§ì§ ì§¢ì§¤ì§§ì§¬ì§­ì§¯ì§°ì§±ì§¸ì§¹ì§¼ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨ì¨©ì©ì©ì©ì©ì©ì©ì©ì© ì©¡ì©¨ì©½ìªìªìª¼ìª½ì«ì«ì«ì«ì«ì«ì«ì«ì«ì« ì«¬ì«´ì¬ì¬ì¬ì¬ì¬ ì¬¡ì­ì­ì­ì­ì­ì­ì­ì­ì­¤ì­¸ì­¹ì®ì®¸ì¯ì¯¤ì¯§ì¯©ì°ì°ì°ì°ì°ì°ì°¡ì°¢ì°§ì°¨ì°©ì°¬ì°®ì°°ì°¸ì°¹ì°»"],["c341","í½í¾í¿ííííííííííííííííííí",4],["c361","í¢",4,"í¨íª",5,"í²í³íµ",11],["c381","íííí",5,"íííííí",7,"íí í¢",5,"í©íªì°¼ì°½ì°¾ì±ì±ì±ì±ì±ì±ì±ì±ì±ì± ì±¤ì±¦ì±¨ì±°ì±µì²ì²ì²ì² ì²¨ì²©ì²«ì²¬ì²­ì²´ì²µì²¸ì²¼ì³ì³ì³ì³ì³ì³ì³¤ì³¬ì³°ì´ì´ì´ì´ì´ì´ì´ì´ì´ì´¤ì´¨ì´¬ì´¹ìµìµ ìµ¤ìµ¬ìµ­ìµ¯ìµ±ìµ¸ì¶ì¶ì¶ì¶ì¶ì¶¤ì¶¥ì¶§ì¶©ì¶°ì·ì·ì·ì·¨ì·¬ì·°ì·¸ì·¹ì·»ì·½ì¸ì¸ì¸ì¸ì¸ì¸ ì¸¡ì¸¤ì¸¨ì¸°ì¸±ì¸³ì¸µ"],["c441","í«í­í®í¯í±",7,"íºí¼",7,"ííííí"],["c461","íííííííííí",5,"í¡í¢í£í¥í¦í§í©",4],["c481","í®í¯í±í²í³í´í¶",5,"í¾í¿íííí",11,"íííì¹ì¹ì¹ì¹ì¹ ì¹¡ì¹¨ì¹©ì¹«ì¹­ì¹´ì¹µì¹¸ì¹¼ìºìºìºìºìºìºìºìºìº ìº¡ìº£ìº¤ìº¥ìº¬ìº­ì»ì»¤ì»¥ì»¨ì»«ì»¬ì»´ì»µì»·ì»¸ì»¹ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ì¼ ì¼¤ì¼¬ì¼­ì¼¯ì¼°ì¼±ì¼¸ì½ì½ì½ì½ì½¤ì½¥ì½§ì½©ì½°ì½±ì½´ì½¸ì¾ì¾ì¾ì¾¡ì¾¨ì¾°ì¿ì¿ ì¿¡ì¿¤ì¿¨ì¿°ì¿±ì¿³ì¿µì¿¼ííííí­í´íµí¸í¼"],["c541","ííííííííí¡",6,"íªí¬í®",5,"í¶í·í¹"],["c561","íºí»í½",6,"íííí",5,"íííí",4],["c581","íí¢í¤í¦í§í¨íªí«í­í®í¯í±í²í³íµ",6,"í¾í¿íí",5,"íííííííííí í¬í­í°í´í¼í½íí¤í¥í¨í¬í´íµí·í¹ííííííííííííí í¤í¬í­í¯í°í±í¸íí°í±í´í¸íºííííííííííííí¡í¨í¬í¼ííí í¡í¤í¨í°í±í³íµíºí¼ííí´í¸íííí¬í­í°í´í¼í½í¿ííí"],["c641","íííí",6,"ííí",5],["c6a1","í¤ííííííííí í¤í¬í±í¸í¹í¼í¿ííííííííí¤í¥í°í±í´í¸íííííííííííííí í¡í¥í¨í©í¬í°í¸í¹í»í¼í½ííí¼í½ííííííííííí í¨í©í«í­í´í¸í¼ííííííí¡í£í¬í­í°í´í¼í½í¿í"],["c7a1","íííííí í¤í­í¯í¸í¹í¼í¿íííííííí©íííííí¨í¬í°í¸í»í½ííííííí¼í½íííííííííí í¥í¨í©í«í­í´íµí¸í¼ííííííí¥íííííííííí¤í¥í¨í¬í´íµí·í¹ííííííííííí "],["c8a1","í¤í­í¸í¹í¼íííííííííííí§í©í°í±í´ííííííííí¡í¨í¬í°í¹í»ííííííííí í¤í¨í°íµí¼í½ííííííí í¨í©í«í­í´íµí¸í¼ííííííííííí í¡í£í¥í©í¬í°í´í¼í½ííííííííí"],["caa1","ä¼½ä½³åå¹å å¯åµå¥åå«å®¶ææ¶æ·æ¯æ­ççç¨¼èèè¡è¢è¨¶è³è·è»»è¿¦é§å»å´åæªæ¤æ®¼çèè¦ºè§é£ä¾åå¢¾å¥¸å§¦å¹²å¹¹ææææ¬æ¡¿æ¾ççç£µç¨ç«¿ç°¡èè®è±è««éä¹«åæ·æ¸´ç¢£ç«­èè¤èé¨ååå ªåµææ¾æ¡æ¢ææ©æ¸çç³ç£ç°ç´ºé¯ééé¾"],["cba1","å£å²¬ç²èééåå å§å²¡å´åº·å¼ºå½æ·æ±çºçç³ çµ³ç¶±ç¾èè¡èè¥è¬é¼éé±ä»ä»·åå±å¡æ·æ¾æ¨æ¹æ§ªæ¼ç¥ççç®è¥èï¤é§éåå®¢åï¤ç²³ç¾¹éµå¨å»å±å·¨ææ®ææ§æ¸ ç¬ç¥è·è¸ï¤é½éé¸ä¹¾ä»¶å¥å·¾å»ºææ¥è±èè¹éµé¨«ä¹åæ°æ¡åååæª¢"],["cca1","ç¼éé»å«æ¯è¿²åæ©æ­ææ ¼æªæ¿èè¦¡éå ç½ç¬ççµ¹ç¹­è©è¦è­´é£éµææ±ºæ½çµç¼ºè¨£å¼æç®è¬ééäº¬ä¿åå¾åååå¿å°å¢åºå¾æ¶æ¬ææ¬æ¯æ»æ´æ¢æ¶çç±çç¥ççç¡¬ç£¬ç«ç«¶çµç¶èè¿èèè­¦è¼éé¡é é ¸é©é¯¨ä¿åå ºå¥å­£å±æ¸ææ¡æ¢°"],["cda1","æ£¨æºªçç¸ç£ç¨½ç³»ç¹«ç¹¼è¨èª¡è°¿éé·å¤å©åå±åºå§å­¤å°»åº«æ·æ·ææ²æ æ¯æ§æ²½ç¼çç¾ç¨¿ç¾èè¡èè¦è½è°èè ±è¢´èª¥ï¤è¾é®éé¡§é«é¼å­ææ²æ¢ç©è°·éµ å°å¤å´ææ¢±æ£æ»¾ç¨è¢é¯¤æ±¨ï¤éª¨ä¾å¬å±åå­å·¥ææ­æ±æ§æ»çç©ºè£è²¢éä¸²å¯¡ææç"],["cea1","ç§èèªèª²è·¨ééé¡å»æ§¨è¿é­ï¤å å®å¯¬æ£æ£ºæ¬¾çç¯çç®¡ç½èè§è²«éé¤¨å®ææ¬éä¾åå¡å£å»£æ æ´¸çççç­è±éå¦æç½«ä¹åå¡å£æªæ§ææ§é­å®ç´è±è½äº¤åå¬å¬å¬å¶ å·§æªææ ¡æ©ç¡çç¯çµç¿¹è èèè¼è½éé¤é©é®«ä¸ä¹ä¹ä»ä¿±å·å¾"],["cfa1","åå£å¥åååµå¢å¯å¶å»æ¼æææ¸æ©æ§æ­æ¯æ¯¬æ±æºç¸çççç¿ç©ç©¶çµ¿èè¼èèèè¡¢è¬³è³¼è»éé±é¤é¶é§é©é³©é·é¾åå±èé é«éº´åçªç¾¤è£è»é¡å å±æçªå®®å¼ç©¹çª®èèº¬å¦å¸å¸å·åæ³æ²æ¬æ·ç·å¥çè¨è¹¶éæºæ«æ½°è©­è»é¥ï¤æ·æ­¸è²´"],["d0a1","é¬¼ï¤å«å­å¥ææ§»çªç¡çªºç«ç³¾èµè¦èµ³éµé¨å»åçç­ èéï¤æ©åååææ£æ¥µéåå¤å¤ææ¤æ ¹æ§¿ç¾ç­è¹è«è¦²è¬¹è¿é¥ï¤ä»å¦æææªç´ç¦ç¦½è©è¡¾è¡¿è¥ï¤é¦ä¼åæ¥æ±æ±²ç´çµ¦äºå¢çè¯ä¼ä¼å¶ååå¨å»åºå¼å¤å¥å¦å¯å²å´å·±å¹¾å¿æææ£"],["d1a1","ææææ£æ£æ©æ¬ºæ°£æ±½æ²æ·çç¦çªçç£ç¸ç¿ç¢ç£¯ç¥ç¥ç¥ç¥ºç®ç´ç¶ºç¾èè­èè¨è­è±èµ·é¡é¤é£¢é¥é¨é¨é©¥éºç·ä½¶åæ®æ¡éå«åºï¤ï¤å¨æ¦ï¤ææ¿ï¤",5,"é£ï¤",4,"è«¾ï¤ï¤ï¤ï¤æï¤çï¤ï¤é£ï¤ ææºåï¤¡ææ¥ æ¹³ï¤¢ç·ï¤£ï¤¤ï¤¥"],["d2a1","ç´ï¤¦ï¤§è¡²åå¨ï¤¨",4,"ä¹ï¤­å§å¥æ°èï¤®å¥³å¹´æç§å¿µæ¬ææ»å¯§å¯åªï¤¯å¥´å¼©æï¤°ï¤±ï¤²çï¤³",5,"é§ï¤¹",10,"æ¿ï¥ï¥è¿è¾²æ±ï¥ï¥è¦ï¥ï¥å°¿ï¥",7,"å«©è¨¥æ»ç´ï¥",5,"è½ï¥ï¥å°¼æ³¥å¿æººå¤è¶"],["d3a1","ä¸¹äº¶ä½å®åå£å½æ·æ¦æªæ®µæ¹ç­ç«¯ç°ç·èè¢é²éæ»æ¾¾çºç¸éååæºæææ·¡æ¹æ½­æ¾¹ç°èè½èè¦è«è­éæ²çç­è¸éåå å¡å¹¢æææ£ ç¶ç³è³é»¨ä»£åå®å¤§å°å²±å¸¶å¾æ´æ¡ç³èºè¢è²¸éé»å®å¾·æ³ååå°åå µå¡å°å± å³¶å¶åº¦å¾æ¼ææææ¡"],["d4a1","æ£¹æ«æ·æ¸¡æ»æ¿¤ç¾çç¹ç¦±ç¨»èè¦©è³­è·³è¹éééé½éé¶éæ¯ççç¢ç¨ç£ç¦¿ç¯¤çºè®å¢©ææ¦æ½æ¾æ²ççè±é ä¹­çªä»å¬åååæ§æ±æ¡æ£æ´æ½¼ç¼ç³ç«¥è´è£éåæææçç«è³ï¥è±éé ­å±¯èèéé¯éå¾å¶æ©çç»ç­è¤è¬é§é¨°åæ¶ï¥ç©ç¾"],["d5a1","è¿èºè£¸éï¥æ´çççµ¡è½ï¥éªé§±ï¥äºåµæ¬æ¬ç¾çè­é¸åè¾£åµæ¥æ¬æ¬æ¿«ç±çºèè¥¤è¦½æèè å»ææµªç¼çç¯èéä¾å´å¾ èå·æ ç¥äº®åå©åæ¢æ¨ç²®ç²±ç³§è¯è«è¼éä¾¶å·åµåå»¬æ®æ¾ææ«æ¿¾ç¤ªèè £é­é©¢é©ªéºé»åææ­·çç¤«è½¢éæææ£æ¼£"],["d6a1","ççç·´è¯è®è¼¦é£éå½åå£æ´çè£å»ææ®®æ¿ç°¾çµä»¤ä¼¶å¹ï¥å²ºå¶ºæç²ç¬­ç¾ç¿èéé´é¶éé é½¡ä¾æ¾§ç¦®é´é·åï¥ æææ«æ½ççç§èèèè·¯è¼é²é­¯é·ºé¹µç¢ç¥¿ç¶ èéé¹¿éºè«å£å¼æ§ç§çç± è¾å¡ç¨ç¢ç£è³è³è³´é·äºåå¯®å»æççç­èè¼"],["d7a1","é¼é¬§é¾å£å©å±¢æ¨æ·æ¼ç»ç´¯ç¸·èè¤¸é¤éåææ³æ¦´æµæºççç çç¤ç¡«è¬¬é¡å­æ®é¸ä¾å«å´æ·ªç¶¸è¼ªå¾ææ ï¥¡éåèååæ¥ç¨ç¶¾è±éµä¿å©åååå±¥æ§ææ¢¨æµ¬çç¸ççï¥¢ç¢ç±¬ç½¹ç¾¸èè£è£¡ééé¢é¯åæ½¾ççèºèºªé£é±éºææ·ç³è¨éç ¬"],["d8a1","ç«ç¬ ç²æ©çªç²ç¢¼ç£¨é¦¬é­éº»å¯å¹æ¼ èè«éä¸åå¨©å·å½æ¢æ½æ©æ¼æ»¿æ¼«ç£çè¬èè »è¼é¥é°»åæ¹æ«æ²«èè¥ªéºäº¡å¦å¿å¿æç¶²ç½èè«è½è¼éåå¦¹åªå¯æ§ææ¢æ¯ç¤ç½µè²·è³£éé­èè²éé©éº¥å­æ°çç²çèåªè¦åååæ£æ²çç ç¶¿ç·¬é¢éºµæ»"],["d9a1","èå¥åå½æææ¤§æºç¿çèèèé©éé³´è¢ä¾®ååå§å¸½ææ¸æ¹æ®ææ¨¡æ¯æ¯çç¡çç¸çèè¼èè¬è¬¨è²æ¨æ²ç§ç®ç¦ç©é¶©æ­¿æ²å¤¢æ¦èå¯å¢å¦å»ææ´æ³æ¸ºç«ç«èé¨åå·«æ®ææææ«æ æ¥æ­¦æ¯ç¡ç·çç¹èèèªèª£è²¿é§éµ¡å¢¨é»ååå»åæ"],["daa1","æ±¶ç´ç´èèéé¯å¿æ²ç©å³åªå°¾åµå½å¾®æªæ¢¶æ¥£æ¸¼æ¹çç±³ç¾èè¬è¿·é¡é»´å²·æ¶ææ«ææ»æ¼æ°æ³¯ççç·¡éå¯èè¬ååæææ²æ´æ¨¸æ³ççç®ç²ç¸èè¶èè¿«é¹é§ä¼´åååææ¬æææ§æ³®æ½ç­çç¢ç¤ç¼ç£ç£»ç¤¬çµè¬è è¿é é£¯åææ¥æ¸¤æ½"],["dba1","ç¼è·é±é¢é«®é­å£ååå¦¨å°¨å¹å½·æ¿æ¾æ¹ææææ¦æ»ç£ç´¡èªèè«è³è¡èè¨ªè¬é¦é²é¾åä¿³ï¥£å¹å¾æææ¯æ¹ççèèè£´è£µè¤è³ è¼©ééªä¼¯ä½°å¸ææ ¢ç½ç¾é­å¹¡æ¨ç©ççªï¥¤ç¹èè©é£ä¼ç­ç½°é¥å¡å¸æ¢µæ°¾æ±æ³ç¯ç¯èæ³çºå»åå£ææªç§ç"],["dca1","ç¢§èé¢é¹ï¥¥åå¼è®è¾¨è¾¯éå¥ç¥é±é¼ä¸ååµå±å¹·ææºææ£ç³ççç§ç«è¼§é¤ é¨ä¿å ¡å ±å¯¶æ®æ­¥æ´æ¹ºæ½½ç¤ç«è©è£è¤è­è¼ä¼åååå®å¾©æç¦è¹è¯èè¤è¦è¼¹è¼»é¦¥é°æ¬ä¹¶ä¿¸å¥å°å³¯å³°æ§æ£ç½ç¢ç«ç¸«è¬èé¢éé³³ä¸ä»ä¿¯ååå¯å¦åå å¤«å©¦"],["dda1","å­å­µå¯åºï¥¦æ¶æ·æ§æµ®æº¥ç¶ç¬¦ç°¿ç¼¶èèèèèè©è¨è² è³¦è³»èµ´è¶ºé¨éééé§é³§ååå©å´å¢³å¥å¥®å¿¿æ¤æ®ææ±¾ççç²ç³ç´è¬è³é°ï¥§ä½å¼å½¿æå´©ææ£ç¡¼ç¹éµ¬ä¸åååªåå¦å©¢åºæ²æææ¹æææ¦§æ¯æ¯æ¯æ¯æ²¸ï¥¨çµçºç ç¢ç§ç§ç²ç·ç¿¡è¥"],["dea1","è¾èè²èè£¨èª¹è­¬è²»ééé£é¼»å¬å¬ªå½¬ææª³æ®¯æµæ¿±ççç­è²§è³é »ææ°·èé¨ä¹äºäºä»ä¼ºä¼¼ä½¿ä¿å¿å²å¸åå£åå£«å¥¢å¨å¯«å¯ºå°å·³å¸«å¾ææ¨ææ¯æ¶æ»æ¢­æ­»æ²æ³æ¸£ççç ç¤¾ç¥ç¥ ç§ç¯©ç´çµ²èèèèèè£è©è©è¬è³èµ¦è¾­éªé£¼é§éºåï¥©æï¥ª"],["dfa1","ååªå±±æ£æ±çç£çç®èé¸é°ä¹·ææ®ºçè©ä¸ï¥«ææ£®æ¸èèè¡«æ·æ¾éé¢¯ä¸å·ååååªåå­å°å³ å¸¸åºåº å»æ³æ¡æ©¡æ¹ç½ççç¸ç¥¥ç®±ç¿è£³è§´è©³è±¡è³éå¡ç½è³½åï¥¬ç©¡ç´¢è²ç²çç¥ï¥­ç¬å¢å£»å¶¼åºåº¶å¾æææ¿ææææ¸æ æ£²ççç­®çµ®ç·ç½²"],["e0a1","è¥èè¯è¥¿èªéé¤é»é¼ å¤å¥­å¸­æææ³ææ±æ·æ½ç³ç¢©èéé«ä»åååå¬å®£ææ¾ææ¸²ç½çççç¿ç¬ç¦ªç·ç¹ç¾¨èºè³è¹èè¬è©µè·£é¸éé¥é¥é®®å¨å±æ¥æ³æ´©æ¸«èèè¤»è¨­èªªéªé½§å¡æ¹æ®²çºè¾è´ééææ¶ç®ï¥®åå§å®¬æ§æºæææç©ç¹ççç­¬"],["e1a1","èè²è¥èª éä¸å¢æ­²æ´ç¨ç¬¹ç´°ï¥¯è²°å¬å¯å¡å®µå°å°å·¢ææææ­æ¢³æ²¼æ¶æº¯çç¤çç¦çççç¬ç¯ ç°«ç´ ç´¹è¬è­èè¨´éé¡éµé·é¶é¨·ä¿å±¬ææ¶ç²çºè¬è´éå­«å·½æèéé£¡çå®ææ¾æ·è¨èª¦éé å·ï¥°çç¢éè¡°éä¿®åå½ååå£½å«å®å²«å³å¸¥æ"],["e2a1","æææææ¶æ¸æ¨¹æ®æ°´æ´æ¼±ç§ç©ç¸çç²ç¦ç¡ç§ç©ç«ªç²¹ç¶ç¶¬ç¹¡ç¾è©è±èèèªè¢èª°è®è¼¸ééé¬éé¹éé§é¨ééé é¦é«é¬åå¡¾å¤å­°å®¿æ·æ½çç¡ç¹èè½å·¡å¾å¾ªææ¬æ æ¥¯æ©æ®æ´µæ·³ç£ç¾ç¬ç­ç´è£èèè´è£è©¢è«ééé é¦´æè¡è¿°é¥å´å´§"],["e3a1","åµ©çèè¨æ¿æ¾ç¿è¤¶è¥²ä¸ä¹å§ååæ¿æç¹©è éä¾åå¶å§åª¤å°¸å±å±å¸å¼ææ½æ¯ææ¾æ´çç¢ç¤ºç¿èèè¦è©¦è©©è«¡è±è±ºå´å¯å¼æ¯æ­æ¤æ®æ¹çç¯èè­è»¾é£é£¾ä¼¸ä¾ä¿¡å»å¨ å®¸æ¼æ°æ¨ç¼ç³ç¥ç´³èè£èèªèèè¨èº«è¾ï¥±è¿å¤±å®¤å¯¦æå¯©å°å¿æ²"],["e4a1","ï¥²æ·±ççè¯è«¶ä»åï¥³éæ°äºä¿ååå¨¥å³¨æçè½èªè¾è¡è¨é¿éé¤é´éµå å²³å¶½å¹æ¡ææ¡æ¨æ¸¥ééé¡é°é½·å®å²¸æææ¡ç¼ééé¡é®æ¡è¬è»é¼åµå²©å·åºµæçè´éå£æ¼çé´¨ä»°å¤®ææ»æ®ç§§é´¦åååå´æææ¶¯ç¢è¾ééåæ¼ææ¶²ç¸èé¡"],["e5a1","æ«»ç½é¶¯é¸ä¹å»å¶å¤æ¹æ¶æ¤°çºè¶ï¥´éå¼±ï¥µï¥¶ç´è¥è¯è»è¥èºï¥·ä½¯ï¥¸ï¥¹å£¤å­ææææ­æï¥ºæ¥æ¨£æ´çç¬ççç¦³ç©°ï¥»ç¾ï¥¼è¥ï¥½è®éé½ï¥¾é¤åå¾¡æ¼æ¼çç¦¦èªé¦­é­é½¬åæ¶ææªèåå °å½¦çè¨è«ºå­¼èä¿ºå¼å´å¥æ©æ·¹å¶ªæ¥­åäºä½ï¥¿ï¦ï¦å¦ï¦"],["e6a1","ï¦æ­æ±ï¦çµç¤ï¦èèè¹è¼¿è½ï¦é¤ï¦ï¦ï¦äº¦ï¦åå½¹æï¦ï¦ç«ç¹¹è­¯ï¦éé©å¥å §å§¸å¨å®´ï¦å»¶ï¦ï¦ææ»ï¦æ¤½æ²æ²¿æ¶æ¶æ·µæ¼ï¦çç¶çï¦ççï¦ç¡ç¡¯ï¦ç­µç·£ï¦ç¸¯ï¦è¡è»ï¦ï¦ï¦éï¦é³¶ï¦ï¦ï¦ææ¶ï¦ç±ï¦ ï¦¡é±å­ï¦¢ï¦£ï¦¤æï¦¥çç°ç°è¶è"],["e7a1","ï¦¦é»é«¥é¹½æï¦§çèï¦¨ï¦©å¡ï¦ªï¦«å¶¸å½±ï¦¬æ ææ¥¹æ¦®æ°¸æ³³æ¸¶æ½æ¿çç¯ççç°ï¦­çï¦®ççç©çºï¦¯ï¦°è±è© è¿ï¦±éï¦²éï¦³ï¦´ä¹åªï¦µåå¡æ³æ±­æ¿çç¿ç©¢è®èèï¦¶è£è©£è­½è±«ï¦·é³ï¦¸éé äºä¼ä¿å²åå¾å³åå¡¢å¢ºå¥§å¨å¯¤æï¦¹æææ¿æ¤æ¢§æ±æ¾³"],["e8a1","çç¬çç­½èèª¤é°²é¼å±æ²ççéºæº«ç¥çç©©ç¸èåå£æç®çç°ç¿ééé¥æ¸¦ç¦çª©çªªè¥èè¸è¨å©å®å®æ¢¡æ¤æµ£ç©çç¬ç¢ç·©ç¿«èèèè±é®é æ°å¾æºææ±ªçå­å¨æ­ªç®å¤åµ¬å·ç¥çï¦ºï¦»å¥å¹å ¯å¤­å¦å§å¯¥ï¦¼ï¦½å¶¢ææææ¾ï¦¾æï¦¿æ©ï§ç¿ç¤ï§"],["e9a1","çªçª¯ç¹ç¹èè°ï§è¯è¦è¬ éï§éé¥æ¾æ¬²æµ´ç¸è¤¥è¾±ä¿å­åååå¢å®¹åº¸ææ¦æ¶æ¹§æº¶çç¢ç¨ç¬è³è¸èè¸ééï§äºä½å¶åªååå³å®å¯å°¤æææ´ççççç¥ç¦ç¦¹ç´ç¾½èèèè¿ééµéªéé¨é©åå½§æ­æ±æ ¯çç¨¶éé äºï§æ©æ®æ¾çèè¸è"],["eaa1","ééé²é»èé¬±äºçéååå¡ååå£åªå«å¯æ¨æ¿æ´æ²æ´¹æ¹²æºç°ç¿çèè¢è½é ï§é¢é¡é´æè¶éä½ååå±åå§å¨å°æ°ææ¸­ç²çç·¯èèè¦è¿èè¡è¤è¬ééé­ä¹³ä¾ååªï§å¯å©å­ºå®¥å¹¼å¹½åº¾æ æææææ¸æï§ææï§æ¥¡æ¥¢æ²¹æ´§ï§æ¸¸ï§"],["eba1","æ¿¡ç¶ç·ï§çç±ï§çï§ï§ç¶­è¾è¸è£èªè«è«­è¸°è¹éé¾éºééé®ï§ï§å ï§æ¯èè²ï§ï§åå¥«å°¹ï§ï§æ½¤ç§è¤è´ï§ééï§ï§ï§ï§è¿æççµ¨èï§å æ©ææ®·èª¾éé±ä¹åæ·«è­é°é³é£®ææ³£éåæèºé·¹ä¾ååå®ææ¿æ¬æ¤æ¯çç£ç¾©è¤èè»è¡£èª¼"],["eca1","è­°é«äºä»¥ä¼ï§ï§å¤·å§¨ï§å·²å¼å½æ¡ï§ ï§¡ï§¢ï§£ç¾ç¥ï§¤ç°çï§¥ç§»ï§¦èè³èè¡èï§§ï§¨è²½è²³éï§©ï§ªé£´é¤ï§«ï§¬ç·çç¿ç¿ç¿¼è¬äººä»åå°ï§­å½å å§»å¯å¼å¿æ¹®ï§®ï§¯çµªèµï§°èèªï§±é­é·ï§²ï§³ä¸ä½ä½¾å£¹æ¥æº¢é¸é°é¦¹ä»»å£¬å¦å§æï§´ï§µç¨ï§¶èè³å¥å"],["eda1","ï§·ï§¸ï§¹ä»å©å­è¿ä»åºå¨å§å§¿å­å­å­æ£ææ»çç®çç·çµç£ç´«èèªè¨èèè«®è³éä½åºå¼æ«æ¨ç¼ç¸çµç¶½èéééµ²å­±æ£§æ®æ½ºçå²æ«æ½ç®´ç°ªè ¶éä¸ä»å å ´å¢»å£¯å¥¬å°å¸³åºå¼µææ²ææ¨æª£æ¬æ¼¿çï§ºççç« ç²§è¸èè§èè¬è£èèè£è´é¬é·"],["eea1","éååå¨å®°æææ ½æ¢æ¸½æ»ç½ç¸¡è£è²¡è¼é½é½ç­ç®è«éä½ä½å²åå§åºæµæµæ¥®æ¨æ²®æ¸ççªç½ç®¸ç´µè§è¹èè·è©è²¯èºéé¸éé½å£åå«¡å¯ææµæ»´çï§»çç©ç¬ç±ç¸¾ç¿è»è¬«è³èµ¤è·¡è¹è¿ªè¿¹é©éä½ä½ºå³å¨å¸ååªå¡¡å¡¼å¥ å°å±å»ææ°æ æ®¿æ°æ¾±"],["efa1","çç ç°ç¸çç²ç­ç®ç®­ç¯çºè©®è¼¾è½é¿éé¢é«é»é¡é¡«é¤åæªææµç¤ç«ç¯çµ¶å å²¾åºæ¼¸ç¹ç²éé®é»æ¥æºè¶ä¸äºäº­ååµåå§å®å¹åº­å»·å¾ææºæ¿æ´ææ¶æ¸æ¾æ¥¨æªæ­£æ±æ·æ·¨æ¸æ¹çç¡çç½çºçç¢ç¦ç¨ç©½ç²¾ç¶èè¨è«ªè²é­ééé¦éé éé"],["f0a1","éé é¼å¶åå¼å ¤å¸å¼æææ¢¯æ¿ç¥­ç¬¬èèºè£½è«¸è¹éé¤éé½é¡é½ä¿ååå©å²å¼å½«æªææ©ææºæ¹ææ¢æ£æ§½æ¼æ½®ç§ç¥çªçªçºç¥ç¥ç§ç¨ çªç²ç³çµç¹°èè»è¤è©èª¿è¶èºé é­é£é»éé³¥æç°è¶³éå­å°åæçå§å®å¾æ°æ«æ£æ·ç®ç¨®çµç¶ç¸±è«"],["f1a1","è¸ªè¸µé¾éä½åå·¦åº§æ«ç½ªä¸»ä½ä¾åå§èåªå¨å¾å¥å®å·å»ææ±æ±æ ªæ³¨æ´²æ¹æ¾ç·ç çç±ç´ç´¬ç¶¢èèè¨»èªèµ°èºè¼³é±éééé§ç«¹ç²¥ä¿åååå¯¯å³»ææ¨½æµæºæ¿¬çç¯ç«£è ¢é¡éµéé§¿èä¸­ä»²è¡éå½æ«æ¥«æ±èºå¢ææ¾æ¯çççç¹è¸è­è´ä¹åª"],["f2a1","å«å°åå¿æææ¯æ¯æ¨æºææ³æ­¢æ± æ²æ¼¬ç¥ç ¥ç¥ç¥ç´è¢èè³èè·èèªï§¼è´è¶¾é²ç´ç¨ç¨·ç¹è·ååå¡µæ¯æ¢æææ¡­æ¦æ®æ´¥æº±çç¨ç¡çç¹ç¡ççç§¦ç¸ç¸è»è¯è¢è¨ºè³è»«è¾°é²é­é£é³éä¾å±å§ªå«å¸æ¡çç¾ç§©çªè£è­è³ªè·è¿­ææï§½å·æ½ç·è¼¯"],["f3a1","é¶éå¾µæ²æ¾ä¸ä¾ååååµ¯å·®æ¬¡æ­¤ç£ç®ï§¾è¹è»é®ææ¾ççªé¯é¿é½ªæ°æ¾¯ç¦ç¨çç«ç°çºç²²çºè®è´é½é¤é¥å¹å¯æ¦æ­ç´®å­åå¡¹æææºæ¬ç«è®è®åå¡åµå±å¨¼å» å½°æ´æææ¶æ¢æ§æ»æ¼²çç¡çªè¹èèè¼åµå°å¯å¯¨å½©æ¡ç ¦ç¶µèè¡ééµåæµç­"],["f4a1","è²¬åå¦»æ½èåï§¿åå°ºæ½æææ²æ¥æ»ç èè¹ éé»ä»ååå¤©å·ææ³æ·ºçç©¿èè¦è³¤è¸é·é§é¡é¡éå¸å²åå¾¹æ¤æ¾ç¶´è¼è½éµåå°æ²¾æ·»çç»ç°½ç±¤è©¹è«å å¦¾å¸æ·ççç«è«è²¼è¼å»³æ´æ·¸è½èè«éé¯ï¨åæ¿æ¶æ»¯ç· è«¦é®éé«åå¿å¨ææææ¢¢"],["f5a1","æ¤æ¥æ¨µçç¦ç¡ç¤ç¤ç§ç¨èè¸èèèè²è¶é¢éé®ä¿åç­çèè§¸å¯¸å¿æé¨å¢å¡å¯µæ¤ææ ç¸½è°è¥éæ®å¬å´æå¢æ½æ¨æ¤æ¥¸æ¨æ¹«çºç§è»è©è«è¶¨è¿½éééééééé¨¶é°ä¸çç¥ç«ºç­ç¯ç¸®èè¹è¹´è»¸éæ¥æ¤¿çåºæ®é»åå¿ æ²è²è¡è¡·æ´èµè"],["f6a1","è´åå¹å´å¨¶å°±çç¿ èèè­è¶£éé©é·²å´ä»å æ»æ¸¬å±¤ä¾å¤å¤å³å¹æ¥æ¢æ²»æ·ç¾çç´ç¡ç¨ç©ç·ç·»ç½®è´è©è¼éé¦³é½ååé£­è¦ªä¸ææ¼ä¾µå¯¢ææ²æµ¸çç §éé¼èç§¤ç¨±å¿«ä»å¤å¾å¢®å¦¥æ°æææ¶æ¥èµéé¦±é§å¬ååå¼ï¨æï¨æ¢æ«ææ¿æ¿¯ç¢ç¸è¨"],["f7a1","é¸ååå¦å½ææ­çç­ç¶»èªå¥ªè«æ¢çè½è²ªå¡æ­æ¦»å®å¸æ¹¯ï¨è©åå°å¤ªæ ææ®æ±°æ³°ç¬èèè·é°é¢±ï¨ææ¾¤ææåååè¨ææ¡¶ï¨çç­çµ±éå æ§è¿è¤ªéé ¹å¸å¥å¦¬æéé¬ªæç¹éå¡å©å·´ææ­æºæ·æ³¢æ´¾ç¬ç¶ç ´ç½·è­è·é å¤åæ¿çç£è²©è¾¦é"],["f8a1","éªå«å­æä½©åæææ²æµ¿çç½ç¨è¦è²å½­æ¾ç¹è¨æä¾¿åæçç¯ç·¨ç¿©éé­é¨è²¶åªå¹³æ°èè©å å¬å¹£å»¢å¼æèºè½ééä½åååååºåå¸æææ±æï¨æ³¡æµ¦ç±ç ²èè¯èè¡è²è¢è¤ééªé£½é®å¹æ´æççï¨ä¿µå½å½ªæææ¨æ¼ç¢ç¥¨è¡¨è±¹é£é£é©"],["f9a1","åç¨æ¥è«·è±é¢¨é¦®å½¼æ«ç²ç®è¢«é¿éå¹å¼¼å¿æ³çç¢çç­è¾é¦ä¹é¼ä¸ä½å¦å¤å»æ°æ²³çè·è¦è³ééé°å£å­¸èè¬é¶´å¯æ¨ææ±æ±æ¼¢æ¾£çç½ç¿°ééééå²è½å½å«å¸å£åæª»æ¶µç·è¦éé·é¹¹ååçè¤é¤ééäº¢ä¼å§®å«¦å··æææ­æ¡æ²æ¸¯ç¼¸èèª"],["faa1","ï¨ï¨é äº¥åå³åå¥å­©å®³ææ¥·æµ·ç£è¹è§£è©²è«§éé§­éª¸å¾æ ¸åå¹¸æèè¡äº«åå®ç¦éé¿é¤é¥é¦åå¢èè¨±æ²æ«¶ç»è»æ­éªé©å¥çèµ«é©ä¿å³´å¼¦æ¸ææ³«ç«çç¹ç¾ç©ççµçµ¢ç¸£è·è¡ï¨è³¢éé¡¯å­ç©´è¡é å«ä¿ åå¤¾å³½æ¾æµ¹ç¹èèè¢éé °äº¨ååå"],["fba1","å½¢æ³æ»ççç¯çç©ç©èè¢è¡¡éé¢é£é¦¨å®å½æ æ§æ³èè¹é¯éä¹äºå¼å£å£ºå¥½å²µå¼§æ¶æææ§æ¯«æµ©æ·æ¹æ»¸æ¾æ¿ æ¿©ççç¥çç çç¥ç³ç¸è¡è¦è«è¿èèè´è­·è±ªé¬é é¡¥ææé·å©ææ··æ¸¾ç¿é­å¿½æç¬åå¼æ±æ³æ´ªçç´è¹è¨é´»ååå¬æ¨ºç«çµ"],["fca1","ç¦ç¦¾è±è¯è©±è­è²¨é´ï¨æ´æ«ç¢ºç¢»ç©«ä¸¸åå¥å®¦å¹»æ£ææ­¡æ¥æ¡æ¸ç¥ç°ç´éé©©é°¥æ´»æ»ç¾è±éå°å¹å¾¨ææ¶æ°ææææ¦¥æ³æ¹æ»æ½¢çççç¯ç°§èèééé»å¯åå»»å¾æ¢ææ·æ¦ææªæ·®æ¾®ç°çªç¹ªè¾è´èèª¨è³åç²å®æ©«éå®åå­ææææ¢æ¶æ·"],["fda1","ç»è´éµé©ä¾¯åååå¼ååå¸¿å¾æ½ç¦çéåå³å¡¤å£ççç»è°è¨æè¨å§æçè±ååæ¯å½å¾½æ®æçè«±è¼éº¾ä¼æºçç¦è§æ¤è­é·¸åå¶åæ´¶è¸é»ææ¬£ççåå±¹ç´è¨æ¬ æ¬½æ­å¸æ°æ´½ç¿èåååå«åå§¬å¬å¸æææ±ææ¦çç¹çºç§ç¦§ç¨ç¾²è©°"]]},function(e){e.exports=[["8740","ä°ä°²ää¦ä¸ð§§äµ·ä³ð§²±ä³¢ð§³ã®ä¶ää±ä±ð¤¿ð£ð§ð¦ºð§ä±ðªäää²ð§±¬ä´äª¤ä¡ð¦¬£ç¥ð¥©ð¡©£ð£¸ð£½¡æå»"],["8767","ç¶å¤ð¨®¹ã·´é´ð§¯¯å¯ð¡µåª¤ã¥ð©º°å«å®·å³¼æ®èð©¥ç¡çã¡µð¡µð£ð¦¡ã»¬"],["87a1","ð¥£ã«µç«¼é¾ð¤¡ð¨¤ð£ªð ªð£äèé¾é¯ä¤°èå¢ééç§ç¨²æ æ¨©è¢çç¯æç¨¬åéã¦çð¥¶¹çé¿å³ä¤¯åä±ð£å ç©²ð§­¥è®ä®ð¦ºäð¥¶ç®®ð¢¼é¿ð¢ð¢ð¢é¿èð£»ä´é¿ä¡ðª·¿æç®é¿"],["8840","ã",4,"ð ãð ð ããð ð¡¿¨ãð ããããð ããÄÃÇÃÄÃÄÃÅÃÇÃà¿¿ÃÌáº¾à¿¿ÃÌá»ÃÄÃ¡ÇÃ ÉÄÃ©ÄÃ¨Ä«Ã­ÇÃ¬ÅÃ³ÇÃ²Å«ÃºÇÃ¹ÇÇÇ"],["88a1","ÇÃ¼à¿¿ÃªÌáº¿à¿¿ÃªÌá»ÃªÉ¡ââ"],["8940","ðª©ð¡"],["8943","æ"],["8946","ä¸½æ»éµé"],["894c","ð§µæä¼ä¼¨ä¾¨åå´åå¤å¡å¨å»åååå¢å£°å¤å¤å¤²å¤´å­¦å®å®å²åºæ»ææ¾æ æ¡¥æµç¼çµçº¤çº¬çººç»ç»ç»ç¼ç¼·èºèè¯è§è®¾è¯¢è½¦è½§è½®"],["89a1","çç³¼ç·æ¥ç«å§"],["89ab","éç¢¸éè¼"],["89b0","è´è¶ð §§"],["89b5","èé»ä³é·é¸ä°¾ð©·¶ð§é¸ðª³ã"],["89c1","æºè¾ç"],["89c5","ä¤é©¬éªé¾ç¦ð¨¬ð¡·ð ð¢«¦ä¸¤äºäºäºäº¿ä»«ä¼·ãä¾½ã¹ååã½ãã¥åå¤åå¼åäºå¹åå§ãå©ãå°ãåå£ã­ã²ãåå£å´å¹åå¯åå£å¨ãå¿ã¥ã¿åã"],["8a40","ð§¶å¥"],["8a43","ð ±ð ´ð¥«åð¢³ã§¬ð è¹ð¤¶¸ð©¥äð¨¾çºð¢°¸ã¨´äð¨ð¦§²ð¤·ªæð µ¼ð ¾´ð ³ð¡´æè¹¾ð ºð °ð ½¤ð¢²©ð¨ð¤"],["8a64","ð µð©©ð¨©ä´ð¤º§ð¢³éª²ã©§ð©´ã¿­ãð¥ð©ð§£ð¢µéµ®é "],["8a76","äð¦¥æ´å£ð¢µð¢¯ð¡·ã§»ð¡¯"],["8aa1","ð¦ð¦ð§¦ æªð¥ð ±è¹¨ð¢¡ð¨­ð ±"],["8aac","ä ð ©ã¿ºå¡³ð¢¶"],["8ab2","ð¤ð ¼ð¦ð ½ð ¶å¹ä»äº"],["8abb","äª´ð¢©¦ð¡èªé£µð ¶æ¹ã§¾ð¢µè·å¡æ¼ã¹"],["8ac9","ðªð ¸ð¢«ð¢³"],["8ace","ð¡ð£§ã¦ã¨ð¨ã¸ð¥¹ð¢åð ¼±ð¢²²ð© ã¼æ°½ð¤¸»"],["8adf","ð§´ð¢ºð¢ðªð¨³ð ¹ºð °´ð¦ ç¾ð¡ð¢ ð¢¤¹ã»ð¥£ð ºð ¾ð ºªã¾ð ¼°ð µð¡ð ¹"],["8af6","ð º«ð ®©ð µð¡ð¡½ã¿¹ð¢æ²ð ¾­"],["8b40","ð£´ð§¹ð¢¯ð µ¾ð µ¿ð¢±ð¢±ã¨ð ºð¡ð ¼®ðª²ð¦­ð¨³ð¨¶ð¨³éªåèå¹"],["8b55","ð©»é°¦éª¶ð§ð¢·®çè­è¬å°ð¦²è´ãåð¨½é¶ð »ºð ¸ð ¹·ð »»ãð¤·«ãð ³å¯ð¢µð¡ð ¸ð ¹¸ð¡¸ð¡ð¨ð¡ð ¹¹ð¤¹ð¢¶¤å©ð¡ð¡ð¡µð¡¶åð ¸"],["8ba1","ð§ð¨ð ¾µð ¹»ð¥¾ãð ¾¶ð¡ð¥ðª½ð¤§ð¡ ºð¤·ð¨¼å¢å¨ãð¥½ç®²å­¨ä ä¬¬é¼§ä§§é°é®ð¥­´ð£½å»ã²åä¸¨å¤ð¡¯ð¯¡¸éð ä¹äº»ã¾å°£å½å¿ã£ºææµæ­ºæ°µæ°ºç¬ç«ä¸¬ç­ð¤£©ç½ç¤»ç³¹ç½ð¦ªã"],["8bde","ð¦èèð¦ð¦¥åè¡¤è§ð§¢²è® è´éé¸é¿é¨ð¨¸é¦é¡µé£é£é¥£ð© é±¼é¸é»æ­¯ï¤ä¸·ð éæ·é¢"],["8c40","å»æ·¾ð©±³é¾¦ã·è¢ð¤ç·å³µä¬ ð¥ãð¥´°æ¢ð¨¨²è¾§é¶çæçºð£ðªã²ð¡¦ä¬ç£¤çå®ð¨äæ©£ðªºä£èð ©¯ç¨ªð©¥ð¨«ªéçå¤ð¢¾é´çð¨§£é¾§çäº£ä¿°å¼ä¸¯ä¼é¾¨å´ç¶å¢å£ð¡¶¶åºåºå¿ð¢æ"],["8ca1","ð£¹æ¤æ©ð£±£æ³¿"],["8ca7","çð¤çã»ð¤¨å¬ç¹è®ð¥²¤ð¥çªç¯¬ç³ç¹¬è¸èé¾©è¢é¾ªèº¹é¾«è¿èé§ é¡é¾¬ð¨¶¹ð¡¿ä±ä¢å¨"],["8cc9","é¡¨æ«ä¶å½"],["8cce","èð¤¥»è¿ð§ä²ð¦µ´åµ»ð¦¬ð¦¾¾é¾­é¾®å®é¾¯æ§ç¹æ¹ç§ã¶äð£ð¢ää¶"],["8ce6","å³ð£¬è«¹å±¸ã´ð£åµ¸é¾²çäð¤¬ð¡¸£ä±·ã¥¸ãð ¤ð¦±è«ä¾´ð ¹å¦¿è¬é¡ð©£ºå¼»"],["8d40","ð ®"],["8d42","ð¢ð¨¥­ää»ð©¹ã¼é¾³ðªµä¸ãä·ð¦±ä¼ð¨²ð§¿ä­ã£ð¥ä¡ää¶ä±»äµ¶äªã¿ð¤¬ã¡ää½ä­å´¾åµåµã·¼ã å¶¤å¶¹ã  ã ¸å¹åº½å¼¥å¾ã¤ã¤ã¤¿ã¥ææ½å³¥ã¦æ·æ¹æã¦¸æ¬ææ¥æã§¸å±"],["8da1","ã¨æ¢æ»ææã©æå´å¡é¾ãªæãª½æ¿æã«²æã¬¢æã­æ¤æ ã­æ¡æ¢ã­²ã­±ã­»æ¤æ¥çæ¥¤æ¦æ¦ã®¼æ§ã¯æ©¥æ©´æ©±æªã¯¬æªã¯²æª«æªµæ«æ«¶æ®æ¯æ¯ªæ±µæ²ªã³æ´æ´æ´¦æ¶ã³¯æ¶¤æ¶±æ¸æ¸æ¸©æºð¨§æº»æ»¢æ»é½¿æ»¨æ»©æ¼¤æ¼´ãµð£½æ¾æ¾¾ãµªãµµç·å²ã¶ç¬ã¶ççç¯ç¿çð ¥äã±ð »"],["8e40","ð£»å¾ð¦»ç¾ð¥ ãæ¦¢ð¨¯©å­´ç©ð¥£¡ð©ç©¥ç©½ð¥¦¬çª»çª°ç«ç«çð¦äç«ç«ç«ªä¯å²ð¥°ç¬ç­ç¬©ð¥ð¥³¾ç®¢ç­¯èð¥®´ð¦±¿ç¯è¡ç®ç®¸ð¥´ ã¶­ð¥±¥èç¯ºç°ç°µð¥³ç±ç²ð¤¢ç²¦æ½ð¤¸ç³ç³ç³¦ç±´ç³³ç³µç³"],["8ea1","ç¹§äð¦¹çµð¦»çç¶ç¶«çµç¶³ç·ð¤ð¦©ç·¤ã´ç·µð¡¹ç·¥ð¨­ç¸ð¦¡ð¦ç¹®çºä«é¬ç¸§ç½ç½ç½ç¤¶ð¦é§¡ç¾ð¦ç¾£ð¡¡ð ¨äð£¦äð¨ºç¿ºð¦èèèè¨è¯ðªð¦³è»è¼è¡ð¢ä¦ð¦¦ð£·£ð¦¨æ¥è§ð¨©èèå¢°ð¢¶æ±¿ð¦ð¤¾¸æ§ð¡èð¡¡æ©ð¤©¥ð¤ªäºè©ð ¬ð¦©ð£µ¾ä¿¹ð¡½è¢è¢ð¦¬ð¤¦§ð£°ð¡³ð£·¸èªæ¤ð¯¦ä"],["8f40","èèèð ¸ð¡´ãð£½ð£è»è¢èð£ºð¦¶£ð¦¬ð¦®ð£ã¶¿èå¬èäð¦¶¥è¬èèã¾ð¦»æ©èãð¦¹ð¢»¯èð¥¯¤è±ã·ä¤æª§èð£²µç¥è¨ð¦®ð¦¹·ð¦¹èèèä èè¤ð¥²äð¥³äè´å«²ð¦ºä§è³äæ¿è"],["8fa1","ð¨¥ð¨»èð§èð¡ð§ð¯¦²äªè¨ãð¡¢¢å·ð§è¾è±ðª¸è®ð¢°§è±èè å¡è¬æ¡äè¡è¡ð§ ð£¶¹ð§¤è¡è¢äè¢´è¢µæè£ç·ð§è¦è¦è¦¦è¦©è¦§è¦¼ð¨¨¥è§§ð§¤¤ð§ª½èªçé¾èªð§©ç«©ð§¬ºð£¾äð§¬¸ç¼è¬è¬ð¥°ð¥¥è¬¿è­è­èª©ð¤©ºè®è®èª¯ð¡äè¡è²ð§µð§¶ð¯§ã¥ð§µè³ð§¶ð§¶½è´è´ð¡¤è³çè´ð¤³ã»èµ·"],["9040","è¶©ð¨ð¡ð¤¦ã­¼ð¨¼ð§ç«§èº­èº¶è»éè¼è¼­ð¨¥ð¨è¾¥éðªð ©è¾³ä¤ªð¨§ð¨½ð£¶»å»¸ð£¢è¿¹ðªð¨¼ð¨ð¢¥ã¦ð¦»é·ð¨¼ð§ª¾é¡ð¨¬ð¨é¨ð¨éð¨¦é®é½é§ã«°é©éç²¬ð¨¤³ð¡ºéæ²éé¢ð¥¹é¹ð¨«ð£²ð¨¬ð¥"],["90a1","ð ´±é¬é«ð¨«¡ð¨¯«çå«ð¨«¢ð¨«¥ä¥¥éð¨¯¬ð¨°¹ð¨¯¿é³éèº¼éé¦é¦é æ¿¶ä¹ð¢ºð¨ð¡¼ð£¸®ä§æ°é»éä¬é£ð¦»æé¶ç£µð¨« é½åä¦¡ð¦²¸ð ´ð¦ð©¯ð©¥ð¤«ð¡¤ð£é±èé¶ä¨ä½äð¤«©çµå­ééð©éå­ð©«éé¥åð£·ð£¼ééé±é¾ééé ð¥¬é®çð©³é¿éµð©ð§¥ºä«é ´é ³é¡é¡¦ã¬ð§µãµð °ð¤"],["9140","ð¥é£é¢·é£é£ä«¿ð¦´§ð¡å°é£¡é£¦é£¬é¸é¤¹ð¤¨©ä­²ð©¡ð©¤é§µé¨é¨»é¨é©ð¥¥ãð©±ð©¯é« é«¢ð©¬é«´ä°é¬é¬­ð¨å´é¬´ð¦¦¨ã£ð£½é­é­ð©´¾å©ð¡¡£é®ð¤é°é¯¿é°ð©¹¨é·ð©¾·ðªðª«ðª¡ðª£ðªéµ¾é¶ðª´é¸æ¢"],["91a1","é·ð¢ðªðª ð¡¤»ðª³é´¹ðª¹ðª´éºéºéºéº¢ä´´éºªéº¯ð¤¤é»ã­ ã§¥ã´ä¼²ã¾ð¨°«é¼é¼ä®é¤ð¦¶¢é¼é¼é¼¹ååé½é¦¸ð©é²è¿é½¢é½©ç«é¾çä®¾ð¤¥µð¤¦»ç·ð¤§¸ð¤ð¤©çð¨¯ð¡£ºç¦ð¨¥¾ð¨¸¶é©é³ð¨©é¬ééð¨¥¬ð¤¹çã»«ç²ç©çð¤³ð¤¸ç¾ð¡¯ç£ð¡¢¾ð£ã»ð¡¢ð¥¯ð¡¸ã¢ð¡»ð¡ ¹ã¡ð¡´ð¡£ð¥½ã£ð¡åð¤¨¥ð¡¾ð¡¨"],["9240","ð¡ð¡¶èð£¦èèð¤¦ð§¥ð£¸±ð¥ð£»»ð§ä´ð£®ð©¦ð¦¼¦æ¹ã³ã°ã·§å¡¬ð¡¤¢æ äð£¿ð¤¡ð¤ð¤ð¦°¡ååð¦±åð ¿ð ®¨ð ¸éð¨¬éä»¸å«ã ð¤¶äº¼ð ¥ð ¿ä½ä¾ð¥å©¨ð «ð ã¦ð ð ãµä¼©ð ð¨º³ð µè«ð äº"],["92a1","ååä¾¢ä¼ð¤¨ð£ºä½å®å¬åä¿ä¿¥åå¼ååååæ¹¶ð£ð£¸¹ð£º¿æµ²ð¡¢ð£ºå¨åð  äð £ð ð èµºð¨ªð åå¤ð ¡³å¡é®äºçð¤ð ° ð¤¦¬ð¡¤æ§ð ¸ç¹ã»ççççä®ð¤ª¼ð¤åãçð¤å´ð åð ¯åéé´é¦ååå¿ã¾å£åªð¨©ð¡ºð¡¯ð¡å¨¬å¦¸éå©¾å«å¨ð¥¥ð¡§³ð¡¡¡ð¤ãµæ´çå¨¡ð¥º"],["9340","åªð¨¯ð é çð¡çä¥²éð¨§»é½ã å°å²å¹å¹ð¡¦ð¡¥¼ð£«®å»å­ð¡¤ð¡¤ãð¡¢ ãð¡¾ãèªð¨©ð¡¶ºð£²ð¨¦¨å¼å¼ð¡¤§ð¡«å©«ð¡»å­èð§½è¡ æ¾ð¢¡ ð¢«å¿ãº¸ð¢¯ð¢¾ð©ð¦½³æð ¾ð ð¢æææµð¢²ð¢´ð¤ð©"],["93a1","æ±ð¤¥ð¢­ªã¨©ð¢¬¢ð£ð©£ªð¢¹¸æ·ðªæ¶æ±æð¤§£ð¢µ§æ¤ð¢²¡æ»æ«æ¥²ã¯´ð£ð£­ð¤¦ð£«åð£ ð¡£ð©¿æð£ð£³ã« äð¥ð¨¬¢ð¥ð¡¼ð¥ð¥¥ç£®ð£ð¡ ªð£´ã¤ð£ð£ð¤æð¦´¤æ«ä®æ°ð§¡°ð¡·«æ£ð£ð£¡æð¥¡²ã£ð£ ºð£¼ã®ð£¢ð£¾çã®æð¤ªæ¢¶æ ã¯æª¾ã¡£ð£ð¤æ¨³æ©æ«æ¬ð¡¤ææ¢æ©ã¯æ©ºæ­ð£¿ð£²é é²ð¨¯ªð¨«"],["9440","éð¨ð¨§é§æ¶¥æ¼ð¤§¬æµ§ð£½¿ã¶æ¸ð¤¼å¨½æ¸å¡æ´¤ç¡ç»ð¤ð¤¶ç±çççð¤ð¤¥å¹ð¤ª¤ð «çºð£»¸ð£ð¤©ð¤¤ð¥¿¡ã¼ãº±ð¤«ð¨°£ð£¼µæ§ã»³çç¼éç·äð¦·ªäçã½£ð¤³ð¤´ã½çç³ðªã¬ç¨ð¨«ð¤¦«ð¤¦ã«»"],["94a1","ã·ð¤©ã»¿ð¤§ð¤£³éºå²éð¨«£ð¡¡¤åð¥¡ð¥§ç¸ð£²ççç»ð¤ð£ã©ð¤£°ç¸çãº¿ð¤ªºð¤«äð¤ªð¦®éð¥ç ç¢ç¢ç£çç¥ð§ð¥£äç¦èç¦¥æ¨­ð£»ºç¨ºç§´ä®ð¡¦ä²éµç§±ð µð¤¦ð ð£¶ºð¡®ãå«ã°ãªð ð °ç«¢å©ð¢µð¥ª¯ð¥ªå¨ð ç£°å¨ªð¥¯ç«¾ä¹ç±ç±­äð¥®³ð¥º¼ð¥º¦ç³ð¤§¹ð¡°ç²ç±¼ç²®æª²ç·ç¸ç·ç½ð¦¡"],["9540","ð¦ð§­ç¶ð¥ºäªð¦­µð ¤æð ð£åð¦ð¦¸ð¤¥¢ç¿ç¬§ð  ¬ð¥«©ð¥µç¬ð¥¸é§¦èé©£æ¨ð£¿ã§¢ð¤§·ð¦­é¨ð¦ èð§§ð¦³äªè·äèèèð¦´é£ð¦©è¢è¥ð¦©èð¦¶§èð§åªä¿ð¡¡å¬«ð¡¢¡å«¤ð¡£è ð¯¦¼ð£¶è ­ð§¢å¨"],["95a1","è¡®ä½è¢è¢¿è£¦è¥¥è¥ð¥è¥ð§ð§ð¨¯µð¨¯ð¨®ð¨§¹ãº­è£äµäã²è¨½è¨ð©å½é«ð¤æç©çð¡¡éµ­è²è³©ð§·å¦çå§°ä®ãè¸ªèº§ð¤°è¼°è½ä´æ±æ¾»ð¢¡ä¢æ½¹æºð¡é¯©ãµð¤¤¯é»éå±ä¤é»éð¨©ä¢ð¨«¼é§ð¨°ð¨°»è¥è¨«éé§ééð¨´´çã»ð¤£¿ð¤©ð¤ªã»§ð£¥éð¨»§ð¨¹¦ð¨¹¥ã»ð¤§­ð¤©¸ð£¿®çç«ã»¼éð©°"],["9640","æ¡ä¨ð©ð¥éé¨ð¨¦ð¨°¦ð¨¬¯ð¦¾éºå¬è­©ä¤¼ç¹ð¤éé±é¤¸ð ¼¦å·ð¨¯ð¤ª²é ð©é¶ð©é¥äð¨­ð¤©§ð¨­¤é£ð¨©ã¼éªä¤¥èé¤»é¥ð§¬ã·½é¦ä­¯é¦ªé©ð¨­¥ð¥£æªé¨¡å«¾é¨¯ð©£±ä®ð©¥é¦¼ä®½ä®é½å¡²ð¡å ¢ð¤¦¸"],["96a1","ð¡¨ç¡ð¢ð£¶¸æ£ãµ½éã¤§æð¢ð¢¥«æé±é±é±»é°µé°é­¿é¯ð©¸­é®ðªµðª¾é´¡ä²®ð¤é¸ä²°é´ðª´ðª­ðª³ð©¤¯é¶¥è½ð¦¸ð¦¿ð¦®è¼ä³ð¦¶¤ð¦ºð¦·°è è®ð¦¸ð£ð¦¤ç§¢ð£ð£ä¤­ð¤§ãµ¢éé¾éð ¿ç¢¹é·éä¿¤ãé¤ð¥ç ½ç¡ç¢¶ç¡ð¡ð£ð¤¥ãä½²æ¿æ¿ççåð¤µå»å£³åé´åç´ã¯ð¤¬ç«ð¦±ð¤¾å¬¨ð¡µð¨©"],["9740","æå«å¨ä¼ð¤ã¬ä­»ð¨§¼é»é¸ð¡£ð ¼è²ð¦³ð¡ð¤ºð¢°¦ð¤å¦ð£¶·ð¦ç¶¨ð¦ð¦¤ð¤¦¹ð¤¦ð¨§ºé¥ç¢ã»©ç´ð¨­£ð¡¢ã»¡ð¤ª³æ«ç³ç»ã»ð¤¨¾ð¤ªð¡ð¤©¦ð §ð¡¤ð¤§¥çð¤¤ç¥ð¤¥¶éç¦éð ¾é±ð¨«ð¨¨éð¨¯§ð¥ä¤µð¨ªç«"],["97a1","ð¤¥ð ³¿å¤ð ð ¯«ð ²¸åç§ð¡ºç·¾ð¡ð¤©ð¡¡ä®éãð¨«ð¤¦­å¦°ð¡¢¿ð¡¢ð§åª¡ã¢ð£µã°éå©¹ð¨ªð¡¡¢é´ã³ð ª´äªã¦å´ãµ©ãµð¡çµä»ð¨æ¸ð©¤ä«æµð§¹ç§æ²¯ã³ð£¿­ð£¸­æ¸æ¼ãµ¯ð µçã¼ãäã»ä¡±å§é®ä¤¾è½ð¨°ð¦¯å åãð¡ç¾ð¤¢ð¤©±ð¢¿£ð¡°ð¢½æ¢¹æ¥§ð¡ð£¥ð§¯´ð£ð¨ªð£ð£ºð¤²æ¨ð£­ð¦²·è¾ää"],["9840","ð¦´¦ð¦µð¦²ð¦¿æ¼ð§è½ð¡ºè­ð¦²ð§ð¡å¦åªð¡³å©¡å©±ð¡¤ð¤¼ã­å§¯ð¡¼ãçéæð¤¥å©®å¨«ð¤æ¨«ð£»¹ð§¶ð¤ð¤çð¤ð¨§¡ä¾°ð¦´¨å³ð¤ð§¹ð¤½æ¨ð¤ð¡ç¦ç³ð¤©ã¶¥æ³ð¯ ¥ð¤©ç¹¥å§«å´¯ã·³å½ð¤©ð¡ç¶¤è¦"],["98a1","åð£«ºð£ð å¾ð £ð ã¿¥ð¡¾ðª¶çð©åµ°çç³ð¨©ð© ä¿ç¿§ççð§«´ç¸ç¹ð¥¶ççãº©ð§¬é¬çµð¤£²ç¡è¶ã»çã»æ²¢å½çççã»¢ã»°ã»´ã»ºçã¼ã½çç­ç²çã½¼ççã¿çã¿ç´ã¿çºð¤½çå£è¦å¡©äçä¹æ¡äãçäªä¯å±ç¾çå£²ç ç¹ç ä¨ç ¹ç¡ç¡ç¡¦èð¥µç¤³æ ç¤²ä"],["9940","äç¦ç¦è¾»ç¨è¾¼ä§çªä²çª¼è¹äç«ç«ää¸¡ç­¢ç­¬ç­»ç°ç°ä äºç±»ç²äç²¸äç³­è¾çð ³ç·ç·ç·ç·½ç¾®ç¾´çäè è¥ç¬¹è®è±èã·å´ç è·è©ä­èçªèèç èäã¬¹èèè"],["99a1","äå ºè¼èä¥èä­è¥å¯èè¤èäè¦è¶èèè¿ä°èé©æ¦èçµè¤æ£èäè¾è¡è¸èè¸èä»è¯è°è ä·è²èè²è¯éèääè¢®è£¿è¤¤è¥è¦ð§¥§è¨©è¨¸èªèª´è±è³è³²è´äå¡è·ä­ä»®è¸ºååè¹±åµèº°ä ·è»è»¢è»¤è»­è»²è¾·è¿è¿è¿é³é§ä¢­é£ éä¤é¨éé«é±é®é¿"],["9a40","é£é«é³é´é½ééé­ä¥ä¥éº¿éåéé­é¾ä¥ªéé¹é­é¢ä¦§é´é³ä§¥æ ä¨¤éä¨µé²éåä«¤æ¨é¢¹ä¬é£±å¡é¤é¤å´é¤é¤·é¥é¥é¥¢ä­°é§ä®é¨¼é¬çªé­©é®é¯é¯±é¯´ä±­é° ã¯ð¡¯éµé°º"],["9aa1","é»¾åé¶é¶½é·é·¼é¶è¾¶é¹»éº¬éº±éº½é»éé»¢é»±é»¸ç«é½ð ð ·ð  æ¤éå¦¬ð å¡éã¹ð ð ð ¶ð¡ºåç³ð «ð «ð ®¿åªð¯ »ð ¯åð ¯»ð °»ð ±ð ±¥ð ±¼æ§ð ²åºð ²µð ³ð ³­ð µ¯ð ¶²ð ·æ¥é°¯è¥ð ¸ð ¸ð »ð ¾ð ¼­ð ¹³å° ð ¾¼å¸ð¡ð¡ð¡¶æð¡»ð¡ð¡ãð¡¿ð¡ð¡¯ð¡»å¤è­ð¡£ð¡µð¡¶è®ð¡·ð¡ð¡ð¡ä¹¸ç»ð¡ ­ð¡¥ª"],["9b40","ð¡¨­ð¡©ð¡°ªð¡±°ð¡²¬ð¡»æð¡»ð¡¼çæ¡ð¢æ§©ãð¢¼ð¢ð¢ºð¢ªð¢¡±ð¢¥è½ð¢¥§ð¢¦ð¢«è¦¥ð¢«¨è¾ ð¢¬é¸ð¢¬¿é¡éª½ð¢±"],["9b62","ð¢²ð¢²·ð¥¯¨ð¢´ð¢´ð¢¶·ð¢¶ð¢¹ð¢½´ð¢¿ð£³ð£¦ð£ð£å¾±ææ¿ð§©¹ð£§ð£³çð¤¦ºçð£ð£çºð å¢µæ"],["9ba1","æ¤ð£ª§ð§ð¥¿¢ð£¸ð£º¹ð§¾ð¢ä£äª¸ð¤ð¨ªð¤®ð¤ð¤»ð¤´ð¤ð¤©ð åð å¦ð¡º¨ã®¾ð£³¿ð¤ð¤åð¤´ã¦ð¤¯ð¨¨ð©§ã¢ð¢è­ð¨­é§ð¤ ð¤£»ð¤¨çð¤«ð ±¸å¥¥ð¤º¥ð¤¾ð ¹è»ð¥¬åå¿ç±ð¥ð¥ð£½ð¤ª§å¼ð¥ð¥®ð¦­éã³ð¥¿ð§²ð¥äð¥¢ð¥¦ð¥ð¤¤¿ð¥¡å¦ã»ð£æð¥¤ä¼ð¨¥ð¥ª®ð¥®ð¥°ð¡¶å¡çæ¾¶ð¦ð§°éð¦²ð¤¾è­¢ð¦ð¦"],["9c40","åµð¦¯·è¼¶ð¦ð¡¤è«ªð¤§¶ð¦ð£¿¯ð¦ä¯ð¦¿ð¦µð¢é¥ð¥¡æå¨§ð¯£ä¾»å¹ð¤¡ð¦¼ä¹ªð¤¤´éæ¶ð¦²½ãè¥·ð¦ð¦¡®ð¦ð¦¡çð¦£ç­ð©ð ¨ð¦¤¦éð¦¤¹ç©é·°ð¦§ºé¨¦ð¦¨­ãð¦©ð ¡ç¦ð¦¨´ð¦­å´¬ð£èð¦®äð¦²¤ç»è¡¥ð¦¶®å¢¶"],["9ca1","ãð¢ð§ð§ã±ð§ð§éð¢ºð§é°ð§¦ð¤§æ°¹éð§ð »¸è §è£µð¢¤¦ð¨³ð¡±æº¸ð¤¨ªð¡  ã¦¤ã¹å°ç§£ä¿æ¶ð©²­ð©¢¤è¥ð§ð§¡åäð¡ã¦¡ð£¯ð¨¨ð¡ç­è¦ð§§ð©¨å©§ä²·ð§¯ð¨¦«ð§§½ð§¨ð§¬ð§µ¦ð¤ºç­ç¥¾ð¨æ¾µðªæ¨ð¨å¢ð¦¸é¿æ ¶éð¨¯ð¨£ð¦¦µð¡­ð£¯ð¨å¶ð¨°°ð¨åé £ð¨¥å¶«ð¤¦æ¾æ§åð¤ª¥ð£¾ã°æ¶ð¨ð¨´ð¨®ð¡¾¡ð¨"],["9d40","ð¨ð¨¯ð¨ð¨ð¨¯ð¨ãð¨¨ð¨ªä£ºæ¦ð¨¥ç éð¨¦¸ä²ð¨§§äð¨§¨ð¨­ð¨¯å§¸ð¨°è¼ð¨¿ð©¬ç­ð©ð©¼ã··ð©ð¤«è¿çåð©§ð©©ð©°ð©¸ð©²ð©£ð©¥ð©¥ªð©§ð©¨¨ð©¬ð©µð©¶çºð©»¸ð©¼£ä²¤éðªç¢ðª¿ä¶éðªä¶ð ²è¾¾å"],["9da1","è¾ºð¢°è¾¹ð¤ªäç¹¿æ½æª±ä»ªã¤ð¨¬¬ð§¢ãºèºð¡µð¨¤ð¨­¬ð¨®ð§¨¾ð¦¯ã·«ð§ð£²·ð¥µð¥¥äºð¥ºð¦å¿ð ¹­è¸å­­ð£ºð¤²ææð¡¶ð¡¡»æ°å­ð¥±åð¥ã·ð©¶ä±½å¢åç½ð¥»å¥µð£µè°ä¸ð ¿ªð µð£ºèéµè´ç»é±çç¹éå²èè·å¥è²èè½åªç¥¢ååð ºãåå±æ±ð¨¢ã­ç´å°åºåå²ð ±ð ²å»ð¥ð ¹¶ð¢±¢"],["9e40","ð º¢éº«çµåð¡µæé­åè³ç¶é¶æ¼æ¹æ¾å©ð¢­é±²ð¢º³åãð ¶§å§åååç¦è¸­ð¦¢ç±è¶è èè£è¶èð¡ä¬çð¤å®èð¦¢å»ð¢´ð§´¯ð¤£ð§µ³ð¦»ð§¶é°ð¡éð£³¼ðª©ð º¬ð »¹ç¦ð¡²¢äð¤¿ð§¿¹ð ¿«äº"],["9ea1","é±æð¢¶ ä£³ð¤ ð©µ¼ð ¿¬ð ¸æ¢ð§£ð ¿­"],["9ead","ð¦ð¡ç£çºéµä¸ä¸ã·å¬æ²²å§ã¬ã§å½ã¥ð¤å¢ð¤­®è­ååªð¥ªð ¥¹"],["9ec5","ã©ð¢¥ç´ð©º¬ä´é¯­ð£³¾ð©¼°ä±ð¤¾©ð©ð©¿èð£¶¶ð§²ð¦³ð£ æ®ç´¥ð£»·ð£¸¬ã¨ªéåã¹´ãºä©ð çå«°ð º¶ç¡ºð§¼®å¢§ä¿å¼é®åµ´çðª´éºä³¡ç¹ã»æð£ð¤²"],["9ef5","åð¡©å§ð¤¥£ð©¸å´ð§®ã­æ±éµ¼"],["9f40","ç±é¬¹åð¡¬å±æð©ð¦µð§¤è­ð ´¨ð¦´¢ð¤«¢ð µ±"],["9f4f","å¾ð¡¼å¶éð¡·éºéç¬é¬å³ç®£æ¨æµé«¿ç¯é¬ªç±¾é¬®ç±ç²é°ç¯¼é¬é¼é°ð¤¤¾é½å³å¯ä¿½éºä¿²å ã¸åå§åå¦·å¸éé¶«è½å©é´é¥éºå¬æ°"],["9fa1","æ¤¬åé°é´ä°»éæ¦å¦çð¡­é§å³"],["9fae","ééé"],["9fb2","éð¨ºæ¿ð¦´£æ«åéçºæð ¼çç±°ð¥°¡ð£³½"],["9fc1","ð¤¤çé®ä¸ªð ³è¾è¡"],["9fc9","å±æ§å­åºåå·µä»æ°±ð ²ä¼¹åååè¶ã¾å¼ã³"],["9fdb","æ­é¼é¾¥é®é ®é¢´éªºéº¨éºçºç¬"],["9fe7","æ¯ºè ç½¸"],["9feb","å ðªè¹·é½"],["9ff0","è·è¹é¸è¸æð¨½è¸¨è¹µç«ð¤©·ç¨¾ç£æ³ªè©§ç"],["a040","ð¨©é¼¦æ³èçðª²ç¡ð¯¡è´ç¢ç±è¬­çç±è³«ð¤ª»è¯å¾ºè¢ ä·"],["a055","ð¡ »ð¦¸"],["a058","è©¾ð¢"],["a05b","æ½ç§é«éµé®é®èµ"],["a063","è è³·ç¬é¡é®°ãç²ä°ç±é¥ð¦æä°éºæ½"],["a073","åæ¯æ¦æ¹æã©æ¢åªð£µæ¤æ ã"],["a0a1","åµð¨¯è¿ð¨¸¹"],["a0a6","åð¡µç¤å²é¸ð ¼»ä¥"],["a0ae","ç¾"],["a0b0","ç³ð¥¼ç³ç¨­è¦è£çµçç²è¦èæè¢ð§èç°èç¤è¦ð¦çð¦»è©èèèè©è²­è­ç«ç¸èãµæ¦²è¶¦"],["a0d4","è¦©ç¨æ¶¹èð¤ç§ã·ç¶æ¤æã³ç¢æ·"],["a0e2","ç½±ð¨¬­çæ©ä­¾å ã°ð£³ð¥»ð§ð¥±ð¡¥ð¡¾ð©¤ð¦·ð§­å³ð¦­ð¨¨ð£·ð ®ð¦¡ð¤¼ä¢å¬ð¦é½éº¦ð¦«"],["a3c0","â",31,"â¡"],["c6a1","â ",9,"â´",9,"â°",9,"ä¸¶ä¸¿äºäº ååå«å¹å¸å©å¶å¤å®å·â¼³å¹¿å»´å½å½¡æ´æ çç¶è¾µé¶Â¨Ëã½ã¾ãããä»ãããã¼ï¼»ï¼½â½ã",23],["c740","ã",58,"ã¡ã¢ã£ã¤"],["c7a1","ã¥",81,"Ð",5,"ÐÐ",4],["c840","Ð",26,"ÑÐ¶",25,"â§â¸â¹ãð ä¹ð åä"],["c8a1","é¾°åé¾±ð§"],["c8cd","ï¿¢ï¿¤ï¼ï¼ã±ââ¡ããâºâºâºâºâºâºâºâºâºâºâºâº¥âº§âºªâº¬âº®âº¶âº¼âº¾â»â»â»â»â»â»â»â»â»£"],["c8f5","ÊÉÉÉÉµÅÃ¸ÅÊÉª"],["f9fe","ï¿­"],["fa40","ð éð ð£¿èäµç¯åµãð¤¥ð¨§¤éð¡§è®ð£³ç ¼ææð¤¤³ð¨¦ªð  ð¦®³ð¡ä¾«ð¢­åð¦´©ð§ªð£ð¤ª±ð¢å©ð ¾å¾¤ð ð æ»ð å½åãºåé¡¬ãèð¤¦¤ð å ð£´åªð ¯¿ð¢¼ð ¥ð¢°ð ð£³ð¡¦å®è½ð ³ð£²å²å¸"],["faa1","é´´åååã³åð¤ª¦å³å¢åå­èæ¤¾ð£­å½»åå¦å¼åµååå¹åç°èå èð¦¬åð¨«åæ»ð£¾ð ¥ð£¿¬å³åð ¯¢æ³ð¡¦æ çæãºªã£ð¡¨çä¢å­å´ð¨«å¾å¿ð¡ð¡ç¦åð¨ªå å«å®ç§ð¥²ã½çååæ±ä¹å¾åãª«ð ®å ð£¿«ð¢¶£å¶ð ±·åç¹å«ææµå­ð¦­ð µ´ååå¤ä¦ð¡ð »ã¶´ð µ"],["fb40","ð¨¦¼ð¢åä³­å¯çåå©åð¡£ð¤ºäð¤µæ³ð¡´å·æð£æ¤æ­ååç£±å±éå¾åå¯å­ð¨­¦ã£ð¡åð¤¥æ±®çåã±ð¦±¾å¦ð¡å ð¡ð¤£å ¦ð¤¯µå¡å¢ªã¡å£ å£ð¡¼å£»å¯¿åðªð¤¸éã¡å¤æ¢¦ãæ¹"],["fba1","ð¡¾å¨¤åð¡èå§ð µð¦²ð¦´ªð¡å§ð¡»ð¡²ð¦¶¦æµ±ð¡ ¨ð¡å§¹ð¦¹åª«å©£ã¦ð¤¦©å©·ãåªç¥å«ð¦¾¡ð¢ã¶ð¡¤ã²ð¡¸åºåå­¶æå­¼ð§¨ää¡ð å¯æ ð¡¨´ð¥§ð ¥å¯³å®ä´å°ð¡­å°çå°ð¡²¥ð¦¬¨å±ä£å²å³©å³¯å¶ð¡·¹ð¡¸·å´å´åµð¡º¤å²ºå·è¼ã ­ð¤¤ð¢ð¢³èã ¶ã¯å¸®æªå¹µå¹ºð¤¼ð ³å¦äº·å»å¨ð¡±å¸å»´ð¨"],["fc40","å»¹å»»ã¢ å»¼æ ¾éå¼ð ð¯¢ã«ä¢®ð¡ºå¼ºð¦¢ð¢å½ð¢±å½£é½ð¦¹®å½²éð¨¨¶å¾§å¶¶ãµð¥ð¡½ªð§¸ð¢¨éð ð¨¨©æ±æð¡¡·ã¥£ã·ã¹åð¢´ç¥±ã¹ææ¤æ³ð¤¦ð¤¦ð§©ç¤å¡åª æ¤è¤æð¯¢¦ð¦»æå´ð æå®ªð£¾·"],["fca1","ð¢¡æð¨®ð©¥æã¤²ð¢¦ð¢£æ£æææð æð¡°æð¢¸æ¬ð¤§ã¨æ¸æ¸ð¡ð¡¼ææ¾ð¢¸¶é ð¤ð¥æ¡æ¥é»ã©¦æºã©ææ¼ð¤¨¨ð¤¨£ææ­æð£¾æµð¤¥ä¬·æäð¡ ©æ æ£å¿ð£æð£·ð£¸æð£¤ð£¥æð ¹µæ§ð¥¦æ³æ´ð¡¸½ð£±ð¨´ð£ð¥çð¢£·é¦¤æð¤ð¤¨¡ã¬«æ§ºð£ææ§æ¢ð¤ð©­æä©æ ¢æ¹é¼æ ð£¦ð¦¶ æ¡"],["fd40","ð£¯æ§¡æ¨ð¨«æ¥³æ£ð£æ¤æ¤ã´²ã¨ð£¼ã®æ¬æ¥¡ð¨©ä¼æ¤¶æ¦ã®¡ð è£åæ§¹ð£ð¢ªæ©ð£æªã¯³æ±æ«ð©ã°æ¬ð ¤£ææ¬µæ­´ð¢æºµð£«ð µð¡¥ãå¡ð£­æ¯¡ð£»¼æ¯æ°·ð¢ð¤£±ð¦­æ±è¦æ±¹ð£¶¼äð£¶½ð¤¤ð¤¤ð¤¤"],["fda1","ð£³ã¥ã³«ð ´²é®ð£¹ð¢ç¾æ ·ð¦´¥ð¦¶¡ð¦·«æ¶æµæ¹¼æ¼ð¤¥¿ð¤ð¦¹²è³ð¦½´åæ²æ¸è®ð¨¬¡æ¸¯ð£¸¯çð£¾ç§æ¹åªð£æ¿¸ãæ¾ð£¸°æ»ºð¡ð¤½äé°æ½æ½ãµæ½´ð©°ã´»æ¾ð¤æ¿ð¤ð¤ð¤¹ð£¿°ð£¾´ð¤¿åð¤ð¤ð¤ð¦çç¾ç§çççççäã·¨ç´çð¤·ç«çåªçç®å²ð¤¥çé¢ð¤ç¬ð¤ð¤¨§ð¤¨¢çºð¨¯¨ç½ç"],["fe40","éçå¤éç¤éð¥ç®çð¤¥´æ¢½ççã¹ð£æ æ¼½ççªç«ð¤ £ð¨ «ä£­ð¨ ç¨ç®ççªð °ºð¦¨®ççð¤¢ð¡§ð¤¨¤æ£ãð¤¦·ð¤¦ð¤§»ç·çæ¤ð¤¨¦ç¹ð ã»çð¢¢­ç ð¨º²çç¤ç¶è¹ç¬ã°ç´é±æ¨¬çä¥ð¤ª"],["fea1","ð¤ð¤©¹ð¨®å­ð¨°ð¡¢çð¡¦çç©çð¨»ð¡©å¯ð¨º¬éççç§ç®ð¤¾ã¼ð¤´çççç´çç¬ççç¯ç¶ð¦µçè¯ã¸ð¦¤ð¦¤ç¡ç¥ç·çð¦¾è¢ð¥ð¥½ð¡¸çç¦çæ¯ð¥ çð£¬ç¯ð¨¥¤ð¨¥¨ð¡ç´ç ð¡¶ð¤¨æ£ç¢¯ç£ç£é¥ç¤®ð¥ ç£ç¤´ç¢±ð§è¾¸è¢ð¨¬«ð¦ð¢ç¦è¤æ¤ç¦ð¥¡ç¦ð§¬¹ç¤¼ç¦©æ¸ªð§¦ãº¨ç§ð©ç§"]]},function(e,t,i){var o=i(12).Buffer,s=i(30).Transform;function r(e,t){this.conv=e,(t=t||{}).decodeStrings=!1,s.call(this,t)}function n(e,t){this.conv=e,(t=t||{}).encoding=this.encoding="utf8",s.call(this,t)}e.exports=function(e){e.encodeStream=function(t,i){return new r(e.getEncoder(t,i),i)},e.decodeStream=function(t,i){return new n(e.getDecoder(t,i),i)},e.supportsStreams=!0,e.IconvLiteEncoderStream=r,e.IconvLiteDecoderStream=n,e._collect=n.prototype.collect},r.prototype=Object.create(s.prototype,{constructor:{value:r}}),r.prototype._transform=function(e,t,i){if("string"!=typeof e)return i(new Error("Iconv encoding stream needs strings as its input."));try{var o=this.conv.write(e);o&&o.length&&this.push(o),i()}catch(e){i(e)}},r.prototype._flush=function(e){try{var t=this.conv.end();t&&t.length&&this.push(t),e()}catch(t){e(t)}},r.prototype.collect=function(e){var t=[];return this.on("error",e),this.on("data",function(e){t.push(e)}),this.on("end",function(){e(null,o.concat(t))}),this},n.prototype=Object.create(s.prototype,{constructor:{value:n}}),n.prototype._transform=function(e,t,i){if(!o.isBuffer(e))return i(new Error("Iconv decoding stream needs buffers as its input."));try{var s=this.conv.write(e);s&&s.length&&this.push(s,this.encoding),i()}catch(e){i(e)}},n.prototype._flush=function(e){try{var t=this.conv.end();t&&t.length&&this.push(t,this.encoding),e()}catch(t){e(t)}},n.prototype.collect=function(e){var t="";return this.on("error",e),this.on("data",function(e){t+=e}),this.on("end",function(){e(null,t)}),this}},function(e,t,i){var o=i(12).Buffer;e.exports=function(e){var t=void 0;e.supportsNodeEncodingsExtension=!(o.from||new o(0)instanceof Uint8Array),e.extendNodeEncodings=function(){if(!t){if(t={},!e.supportsNodeEncodingsExtension)return console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node"),void console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");var s={hex:!0,utf8:!0,"utf-8":!0,ascii:!0,binary:!0,base64:!0,ucs2:!0,"ucs-2":!0,utf16le:!0,"utf-16le":!0};o.isNativeEncoding=function(e){return e&&s[e.toLowerCase()]};var r=i(12).SlowBuffer;if(t.SlowBufferToString=r.prototype.toString,r.prototype.toString=function(i,s,r){return i=String(i||"utf8").toLowerCase(),o.isNativeEncoding(i)?t.SlowBufferToString.call(this,i,s,r):(void 0===s&&(s=0),void 0===r&&(r=this.length),e.decode(this.slice(s,r),i))},t.SlowBufferWrite=r.prototype.write,r.prototype.write=function(i,s,r,n){if(isFinite(s))isFinite(r)||(n=r,r=void 0);else{var a=n;n=s,s=r,r=a}s=+s||0;var c=this.length-s;if(r?(r=+r)>c&&(r=c):r=c,n=String(n||"utf8").toLowerCase(),o.isNativeEncoding(n))return t.SlowBufferWrite.call(this,i,s,r,n);if(i.length>0&&(r<0||s<0))throw new RangeError("attempt to write beyond buffer bounds");var l=e.encode(i,n);return l.length<r&&(r=l.length),l.copy(this,s,0,r),r},t.BufferIsEncoding=o.isEncoding,o.isEncoding=function(t){return o.isNativeEncoding(t)||e.encodingExists(t)},t.BufferByteLength=o.byteLength,o.byteLength=r.byteLength=function(i,s){return s=String(s||"utf8").toLowerCase(),o.isNativeEncoding(s)?t.BufferByteLength.call(this,i,s):e.encode(i,s).length},t.BufferToString=o.prototype.toString,o.prototype.toString=function(i,s,r){return i=String(i||"utf8").toLowerCase(),o.isNativeEncoding(i)?t.BufferToString.call(this,i,s,r):(void 0===s&&(s=0),void 0===r&&(r=this.length),e.decode(this.slice(s,r),i))},t.BufferWrite=o.prototype.write,o.prototype.write=function(i,s,r,n){var a=s,c=r,l=n;if(isFinite(s))isFinite(r)||(n=r,r=void 0);else{var h=n;n=s,s=r,r=h}if(n=String(n||"utf8").toLowerCase(),o.isNativeEncoding(n))return t.BufferWrite.call(this,i,a,c,l);s=+s||0;var d=this.length-s;if(r?(r=+r)>d&&(r=d):r=d,i.length>0&&(r<0||s<0))throw new RangeError("attempt to write beyond buffer bounds");var m=e.encode(i,n);return m.length<r&&(r=m.length),m.copy(this,s,0,r),r},e.supportsStreams){var n=i(30).Readable;t.ReadableSetEncoding=n.prototype.setEncoding,n.prototype.setEncoding=function(t,i){this._readableState.decoder=e.getDecoder(t,i),this._readableState.encoding=t},n.prototype.collect=e._collect}}},e.undoExtendNodeEncodings=function(){if(e.supportsNodeEncodingsExtension){if(!t)throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");delete o.isNativeEncoding;var s=i(12).SlowBuffer;if(s.prototype.toString=t.SlowBufferToString,s.prototype.write=t.SlowBufferWrite,o.isEncoding=t.BufferIsEncoding,o.byteLength=t.BufferByteLength,o.prototype.toString=t.BufferToString,o.prototype.write=t.BufferWrite,e.supportsStreams){var r=i(30).Readable;r.prototype.setEncoding=t.ReadableSetEncoding,delete r.prototype.collect}t=void 0}}}},function(e){e.exports={100:"ð¯",1234:"ð¢","+1":"ðï¸","-1":"ðï¸","8ball":"ð±",":alembic:":"â",":alien:":"ð½",":ambulance:":"ð",":apple:":"ð",":arrow_down:":"â¬ï¸",":arrow_up:":"â¬ï¸",":art:":"ð¨",":beers:":"ð»",":bento:":"ð±",":bookmark:":"ð",":boom:":"ð¥",":bug:":"ð",":building_construction:":"ð",":bulb:":"ð¡",":busts_in_silhouette:":"ð¥",":camera_flash:":"ð¸",":card_file_box:":"ð",":chart_with_upwards_trend:":"ð",":checkered_flag:":"ð",":children_crossing:":"ð¸",":clown_face:":"ð¤¡",":construction:":"ð§",":construction_worker:":"ð·",":egg:":"ð¥",":fire:":"ð¥",":globe_with_meridians:":"ð",":green_apple:":"ð",":green_heart:":"ð",":hankey:":"ð©",":heavy_minus_sign:":"â",":heavy_plus_sign:":"â",":iphone:":"ð±",":label:":"ð·ï¸",":lipstick:":"ð",":lock:":"ð",":loud_sound:":"ð",":mag:":"ð",":memo:":"ð",":mute:":"ð",":ok_hand:":"ð",":package:":"ð¦",":page_facing_up:":"ð",":pencil2:":"âï¸",":penguin:":"ð§",":pushpin:":"ð",":recycle:":"â»ï¸",":rewind:":"âª",":robot:":"ð¤",":rocket:":"ð",":rotating_light:":"ð¨",":see_no_evil:":"ð",":sparkles:":"â¨",":speech_balloon:":"ð¬",":tada:":"ð",":truck:":"ð",":twisted_rightwards_arrows:":"ð",":whale:":"ð³",":wheel_of_dharma:":"â¸ï¸",":wheelchair:":"â¿ï¸",":white_check_mark:":"â",":wrench:":"ð§",":zap:":"â¡ï¸",a_blood:"ð°ï¸",ab_blood:"ð",abacus:"ð§®",abc:"ð¤",abcd:"ð¡",admission:"ðï¸",adult:"ð§",aerial_tramway:"ð¡",airplane:"âï¸",airplane_arriving:"ð¬",airplane_departure:"ð«",alarm_clock:"â°",alembic:"âï¸",alien:"ð½ï¸",alien_monster:"ð¾",ambulance:"ðï¸",amphora:"ðº",amused:"ð",anchor:"âï¸",android:"ð±",anger:"ð¢",angry:"ð ",angry_imp:"ð¿",anguished:"ð§",annoyed:"ð¤",ant:"ð",antenna_bars:"ð¶",anxious:"ð",apathetic:"ð",apple:"ð",aquarius:"âï¸",aries:"âï¸",arrow_down:"â¬ï¸",arrow_heading_down:"â¤µï¸",arrow_heading_up:"â¤´ï¸",arrow_left:"â¬ï¸",arrow_left_hook:"â©ï¸",arrow_left_right:"âï¸",arrow_lower_left:"âï¸",arrow_lower_right:"âï¸",arrow_right:"â¡ï¸",arrow_right_hook:"âªï¸",arrow_up:"â¬ï¸",arrow_up_down:"âï¸",arrow_upper_left:"âï¸",arrow_upper_right:"âï¸",art:"ð¨",asterisk:"*ï¸â£",astonished:"ð²",athletic_shoe:"ð",atm:"ð§",atom:"âï¸",avocado:"ð¥",b_blood:"ð±ï¸",baby:"ð¶",baby_angel:"ð¼",baby_bottle:"ð¼",baby_chick:"ð¤",baby_symbol:"ð¼ï¸",back:"ð",backhand_point_up:"ðï¸",backpack:"ð",bacon:"ð¥",badger:"ð¦¡",badminton:"ð¸",bagel:"ð¥¯",baggage_claim:"ð",bald_man:"ð¨âð¦²",bald_woman:"ð©âð¦²",balloon:"ð",ballot_box:"ð³ï¸",bamboo:"ð",banana:"ð",bangbang:"â¼ï¸",bank:"ð¦",bar_chart:"ð",barber:"ð",baseball:"â¾ï¸",basket:"ð§º",basketball:"ð",bat:"ð¦",bath:"ð",bathroom:"ð»",bathtub:"ð",battery:"ð",beach:"ðï¸",beach_umbrella:"â±ï¸",bear_face:"ð»",bearded_person:"ð§",bed:"ðï¸",bee:"ð",beer:"ðº",beers:"ð»",beetle:"ð",bell:"ð",bellhop:"ðï¸",bento:"ð±",bike:"ð²ï¸",bikini:"ð",billed_cap:"ð§¢",biohazard:"â£ï¸",bird:"ð¦ï¸",birthday:"ð",black_circle:"â«ï¸",black_flag:"ð´",black_heart:"ð¤",black_joker:"ð",black_nib:"âï¸",black_square_button:"ð²",blissful:"ð",blond_man:"ð±ââï¸",blond_person:"ð±",blond_woman:"ð±ââï¸",blossom:"ð¼",blouse:"ð",blowfish:"ð¡",blue_book:"ð",blue_car:"ð",blue_circle:"ðµ",blue_heart:"ð",blush:"ð",boar:"ð",bomb:"ð£ï¸",bone:"ð¦´",book:"ð",bookmark:"ð",bookmark_tabs:"ð",books:"ðï¸",boom:"ð¥",bored:"ð¦",bouquet:"ð",bow:"ð¹",bowl_spoon:"ð¥£",bowling:"ð³",boxing_glove:"ð¥",boy:"ð¦",brain:"ð§ ",bread:"ð",breast_feeding:"ð¤±",brick:"ð§±",bride_veil:"ð°",bridge_at_night:"ð",briefcase:"ð¼",bright:"ð",broccoli:"ð¥¦",broken_heart:"ð",broom:"ð§¹",bug:"ð",bulb:"ð¡",bullettrain:"ð",bullettrain_side:"ð",burrito:"ð¯",bus:"ð",bus_stop:"ð",bust_silhouette:"ð¤",busts_silhouette:"ð¥",butterfly:"ð¦",cactus:"ðµ",cake:"ð°",calendar:"ð",calendar_spiral:"ðï¸",call_me:"ð¤",camel:"ðª",camera:"ð·ï¸",camera_flash:"ð¸",camping:"ðï¸",cancer:"âï¸",candle:"ð¯ï¸",candy:"ð¬",canned_food:"ð¥«",canoe:"ð¶",capricorn:"âï¸",card_box:"ðï¸",card_index:"ð",carousel_horse:"ð ",carp_streamer:"ð",carrot:"ð¥",castle:"ð°",cat:"ðï¸",cat_face:"ð±",cd:"ð¿ï¸",celebrating:"ð¥³",censored:"ð¤¬",chains:"âï¸",champagne:"ð¾",champagne_glass:"ð¥",chart_down:"ð",chart_up:"ð",check_mark:"âï¸",checked_ballot:"âï¸",checkered_flag:"ð",cheerless:"ð",cheese:"ð§",cherries:"ð",cherry_blossom:"ð¸",chess_pawn:"âï¸",chestnut:"ð°",chicken:"ð",child:"ð§",children_crossing:"ð¸",chipmunk:"ð¿ï¸",chocolate_bar:"ð«",chopsticks:"ð¥¢",christmas_tree:"ð",church:"âªï¸",cigarette:"ð¬",cinema:"ð¦",circus_tent:"ðª",cityscape:"ðï¸",cl:"ð",clamp:"ðï¸",clap:"ð",clapper:"ð¬ï¸",classical_building:"ðï¸",clipboard:"ðï¸",clock:"ð°ï¸",clock1:"ðï¸",clock10:"ðï¸",clock1030:"ð¥ï¸",clock11:"ðï¸",clock1130:"ð¦ï¸",clock12:"ðï¸",clock1230:"ð§ï¸",clock130:"ðï¸",clock2:"ðï¸",clock230:"ðï¸",clock3:"ðï¸",clock330:"ðï¸",clock4:"ðï¸",clock430:"ðï¸",clock5:"ðï¸",clock530:"ð ï¸",clock6:"ðï¸",clock630:"ð¡ï¸",clock7:"ðï¸",clock730:"ð¢ï¸",clock8:"ðï¸",clock830:"ð£ï¸",clock9:"ðï¸",clock930:"ð¤ï¸",clockwise:"ð",closed_book:"ð",closed_umbrella:"ð",cloud:"âï¸",cloudy:"ð¥ï¸",clown:"ð¤¡",clubs:"â£ï¸",clutch_bag:"ð",coat:"ð§¥",cocktail:"ð¸ï¸",cocky:"ð",coconut:"ð¥¥",coffee:"âï¸",coffin:"â°ï¸",collision:"ð¥",comet:"âï¸",compass:"ð§­",compression:"ðï¸",computer:"ð¥ï¸",computer_mouse:"ð±ï¸",confetti_ball:"ð",confident:"ð",confounded:"ð",confused:"ð",construction:"ð§",construction_site:"ðï¸",construction_worker:"ð·",contempt:"ð¤¨",control_knobs:"ðï¸",convenience_store:"ðª",cookie:"ðª",cooking:"ð³",cool:"ð",copyright:"Â©ï¸",corn:"ð½",couch:"ðï¸",counter_clockwise:"ð",couple:"ð",couple_heart:"ð",couple_mm:"ð¨ââ¤ï¸âð¨",couple_mw:"ð©ââ¤ï¸âð¨",couple_wm:"ð©ââ¤ï¸âð¨",couple_ww:"ð©ââ¤ï¸âð©",cow:"ð",cow_face:"ð®",cowboy:"ð¤ ",coy:"ð",crab:"ð¦",crayon:"ðï¸",crazy:"ð¤ª",credit_card:"ð³ï¸",crescent_moon:"ð",cricket:"ð¦",cricket_game:"ð",crocodile:"ð",croissant:"ð¥",cross:"âï¸",cross_mark:"â",cross_mark_button:"â",crossbones:"â ï¸",crossed_flags:"ð",crossed_swords:"âï¸",crown:"ð",cruise_ship:"ð³ï¸",cry:"ð¢",crying_cat:"ð¿",crystal_ball:"ð®",cucumber:"ð¥",cup_straw:"ð¥¤",cupcake:"ð§",cupid:"ð",curious:"ð¤",curling_stone:"ð¥",curly_haired_man:"ð¨âð¦±",curly_haired_woman:"ð©âð¦±",curly_loop:"â°",currency_exchange:"ð±",curry:"ð",custard:"ð®",customs:"ð",cut_of_meat:"ð¥©",cyclone:"ð",dagger:"ð¡ï¸",dancer:"ð",dango:"ð¡",dart:"ð¯",dash:"ð¨",date:"ð",deciduous_tree:"ð³",decorative_notebook:"ð",deer:"ð¦",department_store:"ð¬",desert:"ðï¸",desktop:"ð¥ï¸",detective:"ðµï¸",diamond_dot:"ð ",diamonds:"â¦ï¸",dim:"ð",disappointed:"ð",disbelief:"ð",disk:"ð¿ï¸",distressed:"ð­",dividers:"ðï¸",division:"â",dizzy:"ðµ",dizzy_star:"ð«",dna:"ð§¬",do_not_litter:"ð¯",dog:"ðï¸",dog_face:"ð¶",dollar:"ðµ",dollar_sign:"ð²",dolls:"ð",dolphin:"ð¬",door:"ðª",double_curly_loop:"â¿",double_exclamation:"â¼ï¸",double_helix:"ð§¬",doughnut:"ð©",dove:"ðï¸",down_button:"ð½",down_red_triangle:"ð»",dragon:"ð",dragon_face:"ð²",dress:"ð",dress_shoe:"ð",drooling:"ð¤¤",droplet:"ð§",drum:"ð¥",duck:"ð¦",dumpling:"ð¥",dusk:"ð",dvd:"ð",eagle:"ð¦",ear:"ðï¸",ear_of_rice:"ð¾",earth_africa:"ðï¸",earth_americas:"ðï¸",earth_asia:"ðï¸",ecstatic:"ð",egg:"ð¥",eggplant:"ð",eight:"8ï¸â£",eight_pointed_star:"â´ï¸",eight_spoked_asterisk:"â³ï¸",eject:"âï¸",electric_plug:"ð",elephant:"ð",elf:"ð§",email:"ð§",embarassed:"ð",end:"ð",england:"ð´ó §ó ¢ó ¥ó ®ó §ó ¿",enraged:"ð¡",entertained:"ð¤£",envelope:"âï¸",envelope_arrow:"ð©",euro:"ð¶",european_castle:"ð°",evergreen_tree:"ð²",exclamation:"âï¸",exclamation_question:"âï¸",exhausted:"ð´",exploding_head:"ð¤¯",expressionless:"ð",eye:"ðï¸",eye_bubble:"ðï¸âð¨ï¸",eyes:"ð",facetious:"ð",factory:"ð­ï¸",fairy:"ð§",fallen_leaf:"ð",family:"ðªï¸",family_mb:"ð¨âð¦",family_mbb:"ð¨âð¦âð¦",family_mg:"ð¨âð§",family_mgb:"ð¨âð§âð¦",family_mgg:"ð¨âð§âð§",family_mmb:"ð¨âð¨âð¦",family_mmbb:"ð¨âð¨âð¦âð¦",family_mmg:"ð¨âð¨âð§",family_mmgb:"ð¨âð¨âð§âð¦",family_mmgg:"ð¨âð¨âð§âð§",family_mwb:"ð¨âð©âð¦",family_mwbb:"ð¨âð©âð¦âð¦",family_mwg:"ð¨âð©âð§",family_mwgb:"ð¨âð©âð§âð¦",family_mwgg:"ð¨âð©âð§âð§",family_wb:"ð©âð¦",family_wbb:"ð©âð¦âð¦",family_wg:"ð©âð§",family_wgb:"ð©âð§âð¦",family_wgg:"ð©âð§âð§",family_wwb:"ð©âð©âð¦",family_wwbb:"ð©âð©âð¦âð¦",family_wwg:"ð©âð©âð§",family_wwgb:"ð©âð©âð§âð¦",family_wwgg:"ð©âð©âð§âð§",fast_down_button:"â¬",fast_forward:"â©ï¸",fast_up_button:"â«",fax:"ð ",fearful:"ð¨",feet:"ð¾",female:"âï¸",female_sign:"âï¸",ferris_wheel:"ð¡",ferry:"â´ï¸",field_hockey:"ð",file_cabinet:"ðï¸",file_folder:"ð",film_frames:"ðï¸",fingers_crossed:"ð¤",fire:"ð¥",fire_engine:"ð",fire_extinguisher:"ð§¯",firecracker:"ð§¨",fireworks:"ð",first_place:"ð¥",first_quarter_moon:"ð",first_quarter_moon_face:"ð",fish:"ðï¸",fish_cake:"ð¥",fishing_pole:"ð£",fist:"â",five:"5ï¸â£",flag_ac:"ð¦ð¨",flag_ad:"ð¦ð©",flag_ae:"ð¦ðª",flag_af:"ð¦ð«",flag_ag:"ð¦ð¬",flag_ai:"ð¦ð®",flag_al:"ð¦ð±",flag_am:"ð¦ð²",flag_ao:"ð¦ð´",flag_aq:"ð¦ð¶",flag_ar:"ð¦ð·",flag_as:"ð¦ð¸",flag_at:"ð¦ð¹",flag_au:"ð¦ðº",flag_aw:"ð¦ð¼",flag_ax:"ð¦ð½",flag_az:"ð¦ð¿",flag_ba:"ð§ð¦",flag_bb:"ð§ð§",flag_bd:"ð§ð©",flag_be:"ð§ðª",flag_bf:"ð§ð«",flag_bg:"ð§ð¬",flag_bh:"ð§ð­",flag_bi:"ð§ð®",flag_bj:"ð§ð¯",flag_bl:"ð§ð±",flag_bm:"ð§ð²",flag_bn:"ð§ð³",flag_bo:"ð§ð´",flag_bq:"ð§ð¶",flag_br:"ð§ð·",flag_bs:"ð§ð¸",flag_bt:"ð§ð¹",flag_bv:"ð§ð»",flag_bw:"ð§ð¼",flag_by:"ð§ð¾",flag_bz:"ð§ð¿",flag_ca:"ð¨ð¦",flag_cc:"ð¨ð¨",flag_cd:"ð¨ð©",flag_cf:"ð¨ð«",flag_cg:"ð¨ð¬",flag_ch:"ð¨ð­",flag_ci:"ð¨ð®",flag_ck:"ð¨ð°",flag_cl:"ð¨ð±",flag_cm:"ð¨ð²",flag_cn:"ð¨ð³",flag_co:"ð¨ð´",flag_cp:"ð¨ðµ",flag_cr:"ð¨ð·",flag_cu:"ð¨ðº",flag_cv:"ð¨ð»",flag_cw:"ð¨ð¼",flag_cx:"ð¨ð½",flag_cy:"ð¨ð¾",flag_cz:"ð¨ð¿",flag_de:"ð©ðª",flag_dg:"ð©ð¬",flag_dj:"ð©ð¯",flag_dk:"ð©ð°",flag_dm:"ð©ð²",flag_do:"ð©ð´",flag_dz:"ð©ð¿",flag_ea:"ðªð¦",flag_ec:"ðªð¨",flag_ee:"ðªðª",flag_eg:"ðªð¬",flag_eh:"ðªð­",flag_er:"ðªð·",flag_es:"ðªð¸",flag_et:"ðªð¹",flag_eu:"ðªðº",flag_fi:"ð«ð®",flag_fj:"ð«ð¯",flag_fk:"ð«ð°",flag_fm:"ð«ð²",flag_fo:"ð«ð´",flag_fr:"ð«ð·",flag_ga:"ð¬ð¦",flag_gb:"ð¬ð§",flag_gbeng:"ð´ó §ó ¢ó ¥ó ®ó §ó ¿",flag_gbsct:"ð´ó §ó ¢ó ³ó £ó ´ó ¿",flag_gbwls:"ð´ó §ó ¢ó ·ó ¬ó ³ó ¿",flag_gd:"ð¬ð©",flag_ge:"ð¬ðª",flag_gf:"ð¬ð«",flag_gg:"ð¬ð¬",flag_gh:"ð¬ð­",flag_gi:"ð¬ð®",flag_gl:"ð¬ð±",flag_gm:"ð¬ð²",flag_gn:"ð¬ð³",flag_gp:"ð¬ðµ",flag_gq:"ð¬ð¶",flag_gr:"ð¬ð·",flag_gs:"ð¬ð¸",flag_gt:"ð¬ð¹",flag_gu:"ð¬ðº",flag_gw:"ð¬ð¼",flag_gy:"ð¬ð¾",flag_hk:"ð­ð°",flag_hm:"ð­ð²",flag_hn:"ð­ð³",flag_hr:"ð­ð·",flag_ht:"ð­ð¹",flag_hu:"ð­ðº",flag_ic:"ð®ð¨",flag_id:"ð®ð©",flag_ie:"ð®ðª",flag_il:"ð®ð±",flag_im:"ð®ð²",flag_in:"ð®ð³",flag_io:"ð®ð´",flag_iq:"ð®ð¶",flag_ir:"ð®ð·",flag_is:"ð®ð¸",flag_it:"ð®ð¹",flag_je:"ð¯ðª",flag_jm:"ð¯ð²",flag_jo:"ð¯ð´",flag_jp:"ð¯ðµ",flag_ke:"ð°ðª",flag_kg:"ð°ð¬",flag_kh:"ð°ð­",flag_ki:"ð°ð®",flag_km:"ð°ð²",flag_kn:"ð°ð³",flag_kp:"ð°ðµ",flag_kr:"ð°ð·",flag_kw:"ð°ð¼",flag_ky:"ð°ð¾",flag_kz:"ð°ð¿",flag_la:"ð±ð¦",flag_lb:"ð±ð§",flag_lc:"ð±ð¨",flag_li:"ð±ð®",flag_lk:"ð±ð°",flag_lr:"ð±ð·",flag_ls:"ð±ð¸",flag_lt:"ð±ð¹",flag_lu:"ð±ðº",flag_lv:"ð±ð»",flag_ly:"ð±ð¾",flag_ma:"ð²ð¦",flag_mc:"ð²ð¨",flag_md:"ð²ð©",flag_me:"ð²ðª",flag_mf:"ð²ð«",flag_mg:"ð²ð¬",flag_mh:"ð²ð­",flag_mk:"ð²ð°",flag_ml:"ð²ð±",flag_mm:"ð²ð²",flag_mn:"ð²ð³",flag_mo:"ð²ð´",flag_mp:"ð²ðµ",flag_mq:"ð²ð¶",flag_mr:"ð²ð·",flag_ms:"ð²ð¸",flag_mt:"ð²ð¹",flag_mu:"ð²ðº",flag_mv:"ð²ð»",flag_mw:"ð²ð¼",flag_mx:"ð²ð½",flag_my:"ð²ð¾",flag_mz:"ð²ð¿",flag_na:"ð³ð¦",flag_nc:"ð³ð¨",flag_ne:"ð³ðª",flag_nf:"ð³ð«",flag_ng:"ð³ð¬",flag_ni:"ð³ð®",flag_nl:"ð³ð±",flag_no:"ð³ð´",flag_np:"ð³ðµ",flag_nr:"ð³ð·",flag_nu:"ð³ðº",flag_nz:"ð³ð¿",flag_om:"ð´ð²",flag_pa:"ðµð¦",flag_pe:"ðµðª",flag_pf:"ðµð«",flag_pg:"ðµð¬",flag_ph:"ðµð­",flag_pk:"ðµð°",flag_pl:"ðµð±",flag_pm:"ðµð²",flag_pn:"ðµð³",flag_pr:"ðµð·",flag_ps:"ðµð¸",flag_pt:"ðµð¹",flag_pw:"ðµð¼",flag_py:"ðµð¾",flag_qa:"ð¶ð¦",flag_re:"ð·ðª",flag_ro:"ð·ð´",flag_rs:"ð·ð¸",flag_ru:"ð·ðº",flag_rw:"ð·ð¼",flag_sa:"ð¸ð¦",flag_sb:"ð¸ð§",flag_sc:"ð¸ð¨",flag_sd:"ð¸ð©",flag_se:"ð¸ðª",flag_sg:"ð¸ð¬",flag_sh:"ð¸ð­",flag_si:"ð¸ð®",flag_sj:"ð¸ð¯",flag_sk:"ð¸ð°",flag_sl:"ð¸ð±",flag_sm:"ð¸ð²",flag_sn:"ð¸ð³",flag_so:"ð¸ð´",flag_sr:"ð¸ð·",flag_ss:"ð¸ð¸",flag_st:"ð¸ð¹",flag_sv:"ð¸ð»",flag_sx:"ð¸ð½",flag_sy:"ð¸ð¾",flag_sz:"ð¸ð¿",flag_ta:"ð¹ð¦",flag_tc:"ð¹ð¨",flag_td:"ð¹ð©",flag_tf:"ð¹ð«",flag_tg:"ð¹ð¬",flag_th:"ð¹ð­",flag_tj:"ð¹ð¯",flag_tk:"ð¹ð°",flag_tl:"ð¹ð±",flag_tm:"ð¹ð²",flag_tn:"ð¹ð³",flag_to:"ð¹ð´",flag_tr:"ð¹ð·",flag_tt:"ð¹ð¹",flag_tv:"ð¹ð»",flag_tw:"ð¹ð¼",flag_tz:"ð¹ð¿",flag_ua:"ðºð¦",flag_ug:"ðºð¬",flag_um:"ðºð²",flag_un:"ðºð³",flag_us:"ðºð¸",flag_uy:"ðºð¾",flag_uz:"ðºð¿",flag_va:"ð»ð¦",flag_vc:"ð»ð¨",flag_ve:"ð»ðª",flag_vg:"ð»ð¬",flag_vi:"ð»ð®",flag_vn:"ð»ð³",flag_vu:"ð»ðº",flag_wf:"ð¼ð«",flag_ws:"ð¼ð¸",flag_xk:"ð½ð°",flag_ye:"ð¾ðª",flag_yt:"ð¾ð¹",flag_za:"ð¿ð¦",flag_zm:"ð¿ð²",flag_zw:"ð¿ð¼",flashlight:"ð¦",flat_shoe:"ð¥¿","fleur-de-lis":"âï¸",flirty:"ð",floppy_disk:"ð¾",flower_cards:"ð´",flushed:"ð³",flying_disc:"ð¥",flying_saucer:"ð¸",fog:"ð«ï¸",foggy:"ð",foot:"ð¦¶",football:"ð",footprints:"ð£",fork_knife_plate:"ð½ï¸",fortune_cookie:"ð¥ ",fountain:"â²ï¸",fountain_pen:"ðï¸",four:"4ï¸â£",four_leaf_clover:"ð",fox_face:"ð¦",frame_photo:"ð¼ï¸",free:"ð",freezing:"ð¥¶",french_bread:"ð¥",fried_shrimp:"ð¤",fries:"ð",frightened:"ð±",frog_face:"ð¸",frowning:"â¹ï¸",frustrated:"ð°",fuel_pump:"â½ï¸",full_moon:"ðï¸",full_moon_face:"ð",game_die:"ð²",gasp:"ð¤­",gear:"âï¸",gem:"ð",gemini:"âï¸",genie:"ð§",germ:"ð¦ ",ghost:"ð»",gi:"ð¥",gift:"ð",giraffe:"ð¦",girl:"ð§",glad:"ð",glasses:"ðï¸",gleeful:"ð",globe:"ð",gloves:"ð§¤",glowing_star:"ð",goal:"ð¥",goat:"ð",goblin:"ðº",goggles:"ð¥½",golf:"â³ï¸",gorilla:"ð¦",graduation_cap:"ðï¸",grapes:"ð",green_apple:"ð",green_book:"ð",green_heart:"ð",grimaced:"ð¬",grin:"ð",grinning_cat:"ð¸",guard:"ð",guitar:"ð¸",gun:"ð«",haha:"ð",halo:"ð",hamburger:"ð",hammer:"ð¨",hammer_pick:"âï¸",hammer_wrench:"ð ï¸",hamster_face:"ð¹",handbag:"ð",handshake:"ð¤",happy:"ð",happy_kiss:"ð",hash:"#ï¸â£",hatched_chick:"ð¥",hatching_chick:"ð£",headphones:"ð§ï¸",hear_no_evil:"ð",heart:"â¤ï¸",heart_decoration:"ð",heart_exclamation:"â£ï¸",heart_ribbon:"ð",heartbeat:"ð",heartpulse:"ð",hearts:"â¥ï¸",hedgehog:"ð¦",helicopter:"ð",helmet_cross:"âï¸",herb:"ð¿",hero:"ð¦¸",hibiscus:"ðº",high_brightness:"ð",high_heel:"ð ",high_voltage:"â¡ï¸",hiking_boot:"ð¥¾",hippo:"ð¦",hockey:"ð",holding_hands_mm:"ð¬",holding_hands_mw:"ð«",holding_hands_wm:"ð«",holding_hands_ww:"ð­",hole:"ð³ï¸",homes:"ðï¸",honey_pot:"ð¯",hopeful:"ð¥",horse:"ð",horse_face:"ð´",horse_racing:"ð",hospital:"ð¥",hot_pepper:"ð¶ï¸",hotdog:"ð­",hotel:"ð¨",hotsprings:"â¨ï¸",hourglass:"âï¸",hourglass_flowing:"â³ï¸",house:"ð ï¸",house_abandoned:"ðï¸",house_garden:"ð¡",hrmph:"ð¤",hugging:"ð¤",hushed:"ð¯",ice_cream:"ð¨",ice_skate:"â¸ï¸",icecream:"ð¦",id:"ð",ill:"ð·",imp:"ð",in_bed:"ð",inbox_tray:"ð¥ï¸",incoming_envelope:"ð¨",indifferent:"ðï¸",infinity:"â¾ï¸",info:"â¹ï¸",injured:"ð¤",innocent:"ð",interrobang:"âï¸",iphone:"ð±",island:"ðï¸",ja_acceptable:"ð",ja_application:"ð¸",ja_bargain:"ð",ja_beginner:"ð°",ja_chart:"ð¹",ja_congratulations:"ãï¸",ja_discount:"ð¹",ja_free_of_charge:"ðï¸",ja_here:"ð",ja_monthly_amount:"ð·ï¸",ja_no_vacancy:"ðµ",ja_not_free_of_carge:"ð¶",ja_open_for_business:"ðº",ja_passing_grade:"ð´",ja_post_office:"ð£",ja_prohibited:"ð²",ja_reserved:"ð¯ï¸",ja_secret:"ãï¸",ja_service_charge:"ðï¸",ja_vacancy:"ð³",jack_o_lantern:"ð",japan:"ð¾",japanese_castle:"ð¯",jeans:"ð",jigsaw:"ð§©",jolly_roger:"ð´ââ ï¸",joyful:"ð",joyful_cat:"ð¹",joystick:"ð¹ï¸",kaaba:"ð",kangaroo:"ð¦",key:"ð",keyboard:"â¨ï¸",kimono:"ð",kiss:"ð",kiss_lips:"ð",kiss_mm:"ð¨ââ¤ï¸âðâð¨",kiss_mw:"ð©ââ¤ï¸âðâð¨",kiss_wm:"ð©ââ¤ï¸âðâð¨",kiss_ww:"ð©ââ¤ï¸âðâð©",kissing_cat:"ð½",kiwi:"ð¥",knife:"ðª",koala_face:"ð¨",koko:"ð",lab_coat:"ð¥¼",label:"ð·ï¸",lacrosse:"ð¥",laptop:"ð»ï¸",large_black_square:"â¬ï¸",large_blue_diamond:"ð·",large_orange_diamond:"ð¶",large_white_square:"â¬ï¸",last_quarter_moon:"ð",last_quarter_moon_face:"ðï¸",laugh:"ð",leafy_green:"ð¥¬",leaves:"ð",ledger:"ð",left_facing_fist:"ð¤",left_luggage:"ð",left_speech:"ð¨ï¸",leg:"ð¦µ",lemon:"ð",leo:"âï¸",leopard:"ð",level_slider:"ðï¸",levitate:"ð´ï¸",libra:"âï¸",light_bulb:"ð¡",light_rail:"ð",lightning:"ð©ï¸",link:"ð",lion_face:"ð¦",lips:"ð",lipstick:"ð",litter_bin:"ð®",lizard:"ð¦",llama:"ð¦",lmao:"ð",lobster:"ð¦",lock:"ðï¸",locked_key:"ð",locked_pen:"ð",lol:"ð",lollipop:"ð­",lorry:"ð",lotion:"ð§´",loud_sound:"ð",loudspeaker:"ð¢",love:"ð¥°",love_hotel:"ð©",love_letter:"ð",love_you_gesture:"ð¤",lovestruck:"ð",lovestruck_cat:"ð»",loving_kiss:"ð",low_brightness:"ð",low_sound:"ðï¸",luggage:"ð§³",lying:"ð¤¥",m:"âï¸",mag:"ðï¸",mag_right:"ð",mage:"ð§",magnet:"ð§²",mahjong:"ðï¸",mailbox:"ð«ï¸",mailbox_closed:"ðªï¸",mailbox_mail:"ð¬ï¸",mailbox_no_mail:"ð­ï¸",male:"âï¸",male_sign:"âï¸",man:"ð¨",man_artist:"ð¨âð¨",man_astronaut:"ð¨âð",man_biking:"ð´ââï¸",man_bouncing_ball:"â¹ï¸ââï¸",man_bowing:"ðââï¸",man_cartwheeling:"ð¤¸ââï¸",man_chinese_cap:"ð²",man_climbing:"ð§ââï¸",man_construction_worker:"ð·ââï¸",man_cook:"ð¨âð³",man_dancing:"ðº",man_detective:"ðµï¸ââï¸",man_elf:"ð§ââï¸",man_facepalming:"ð¤¦ââï¸",man_factory_worker:"ð¨âð­",man_fairy:"ð§ââï¸",man_farmer:"ð¨âð¾",man_firefighter:"ð¨âð",man_frowning:"ðââï¸",man_genie:"ð§ââï¸",man_gesturing_no:"ðââï¸",man_gesturing_ok:"ðââï¸",man_getting_face_massage:"ðââï¸",man_getting_haircut:"ðââï¸",man_golfing:"ðï¸ââï¸",man_guard:"ðââï¸",man_handball:"ð¤¾ââï¸",man_health_worker:"ð¨ââï¸",man_hero:"ð¦¸ââï¸",man_judge:"ð¨ââï¸",man_juggling:"ð¤¹ââï¸",man_lifting_weights:"ðï¸ââï¸",man_lotus_position:"ð§ââï¸",man_mage:"ð§ââï¸",man_mechanic:"ð¨âð§",man_mountain_biking:"ðµââï¸",man_office_worker:"ð¨âð¼",man_pilot:"ð¨ââï¸",man_police_officer:"ð®ââï¸",man_pouting:"ðââï¸",man_raising_hand:"ðââï¸",man_rowing_boat:"ð£ââï¸",man_running:"ðââï¸",man_scientist:"ð¨âð¬",man_shrugging:"ð¤·ââï¸",man_singer:"ð¨âð¤",man_steamy_room:"ð§ââï¸",man_student:"ð¨âð",man_surfing:"ðââï¸",man_swimming:"ðââï¸",man_teacher:"ð¨âð«",man_technologist:"ð¨âð»",man_tipping_hand:"ðââï¸",man_turban:"ð³ââï¸",man_tuxedo:"ð¤µ",man_vampire:"ð§ââï¸",man_villain:"ð¦¹ââï¸",man_walking:"ð¶ââï¸",man_water_polo:"ð¤½ââï¸",man_zombie:"ð§ââï¸",mango:"ð¥­",mans_shoe:"ð",map:"ðºï¸",maple_leaf:"ð",martial_arts_uniform:"ð¥",mask:"ð·",meat_on_bone:"ð",medal:"ð",medical:"âï¸",medium_black_square:"â¼ï¸",medium_small_black_square:"â¾ï¸",medium_small_white_square:"â½ï¸",medium_white_square:"â»ï¸",megaphone:"ð£",melon:"ð",memo:"ð",men_bunny_ears_partying:"ð¯ââï¸",men_wrestling:"ð¤¼ââï¸",menorah:"ð",mens:"ð¹ï¸",mermaid:"ð§ââï¸",merman:"ð§ââï¸",merperson:"ð§",metal:"ð¤",metro:"ðï¸",microbe:"ð¦ ",microphone:"ð¤",microscope:"ð¬",middle_finger:"ð",military_medal:"ðï¸",milk:"ð¥",milky_way:"ð",minibus:"ð",minidisc:"ð½",minus:"â",mischievous:"ð",moai:"ð¿",mobile:"ð±",mobile_calling:"ð²",mobile_phone_off:"ð´",money_mouth:"ð¤",money_wings:"ð¸",moneybag:"ð°ï¸",monkey:"ð",monkey_face:"ðµ",monocle:"ð§",monorail:"ð",moon_cake:"ð¥®",moon_ceremony:"ð",mosque:"ð",mosquito:"ð¦",motor_scooter:"ðµ",motorboat:"ð¥ï¸",motorcycle:"ðï¸",motorway:"ð£ï¸",mount_fuji:"ð»",mountain:"â°ï¸",mountain_cableway:"ð ",mountain_railway:"ð",mouse:"ð",mouse_face:"ð­",movie_camera:"ð¥",mrs_claus:"ð¤¶",multiplication:"âï¸",muscle:"ðª",mushroom:"ð",musical_keyboard:"ð¹",musical_note:"ðµ",musical_notes:"ð¶",musical_score:"ð¼",mute:"ð",nail_care:"ð",name_badge:"ð",nauseated:"ð¤¢",nazar_amulet:"ð§¿",necktie:"ð",nerd:"ð¤",neutral:"ðï¸",new:"ð",new_moon:"ð",new_moon_face:"ð",newspaper:"ð°",next_track:"â­ï¸",ng:"ð",night_stars:"ð",nine:"9ï¸â£",no:"ðï¸",no_bell:"ð",no_bicycles:"ð³",no_entry:"âï¸",no_entry_sign:"ð«",no_mobile_phones:"ðµ",no_mouth:"ð¶",no_pedestrians:"ð·",no_smoking:"ð­ï¸",no_sound:"ð",non_potable_water:"ð±",nose:"ð",notebook:"ð",notepad_spiral:"ðï¸",nut_and_bolt:"ð©",o:"â­ï¸",o_blood:"ð¾ï¸",ocean:"ð",octagonal_sign:"ð",octopus:"ð",oden:"ð¢",office:"ð¢",ogre:"ð¹",oil_drum:"ð¢ï¸",ok:"ð",ok_hand:"ð",old_key:"ðï¸",older_adult:"ð§",older_man:"ð´",older_woman:"ðµ",om_symbol:"ðï¸",on:"ð",oncoming_automobile:"ðï¸",oncoming_bus:"ðï¸",oncoming_police_car:"ðï¸",oncoming_taxi:"ð",one:"1ï¸â£",open_file_folder:"ð",open_hands:"ð",ophiuchus:"â",orange_book:"ð",orange_heart:"ð§¡",orthodox_cross:"â¦ï¸",outbox_tray:"ð¤ï¸",overcast:"ð¤ï¸",overheating:"ð¥µ",owl:"ð¦",ox:"ð",p:"ð¿ï¸",package:"ð¦ï¸",page_curl:"ð",page_facing_up:"ð",pager:"ðï¸",paintbrush:"ðï¸",palette:"ð¨",palm_tree:"ð´",palms_up:"ð¤²",pancakes:"ð¥",panda_face:"ð¼",paperclip:"ð",paperclips:"ðï¸",park:"ðï¸",parrot:"ð¦",part_alternation_mark:"ã½ï¸",partly_sunny:"âï¸",party:"ð",partying:"ð¥³",passport_control:"ð",pause:"â¸ï¸",peace:"â®ï¸",peach:"ð",peacock:"ð¦",peanuts:"ð¥",pear:"ð",pen:"ðï¸",pencil:"âï¸",penguin:"ð§",pensive:"ð",people_bunny_ears_partying:"ð¯",people_wrestling:"ð¤¼",performing_arts:"ð­ï¸",persevered:"ð£",person_biking:"ð´",person_bouncing_ball:"â¹ï¸",person_bowing:"ð",person_cartwheel:"ð¤¸",person_climbing:"ð§",person_facepalming:"ð¤¦",person_fencing:"ð¤º",person_frowning:"ð",person_gesturing_no:"ð",person_gesturing_ok:"ð",person_getting_haircut:"ð",person_getting_massage:"ð",person_golfing:"ðï¸",person_handball:"ð¤¾",person_juggling:"ð¤¹",person_lifting_weights:"ðï¸",person_lotus_position:"ð§",person_mountain_biking:"ðµ",person_pouting:"ð",person_raising_hand:"ð",person_rowing_boat:"ð£",person_running:"ð",person_shrugging:"ð¤·",person_steamy_room:"ð§",person_surfing:"ðï¸",person_swimming:"ðï¸",person_tipping_hand:"ð",person_turban:"ð³",person_walking:"ð¶",person_water_polo:"ð¤½",petri_dish:"ð§«",pick:"âï¸",pie:"ð¥§",pig:"ð",pig_face:"ð·",pig_nose:"ð½",pill:"ð",pine_decor:"ð",pineapple:"ð",ping_pong:"ð",pirate_flag:"ð´ââ ï¸",pisces:"âï¸",pistol:"ð«",pizza:"ð",place_of_worship:"ð",play:"â¶ï¸",play_pause:"â¯ï¸",playful:"ð",pleading:"ð¥º",pleased:"ð",plus:"â",point_down:"ðï¸",point_left:"ðï¸",point_right:"ðï¸",point_up:"âï¸",police_car:"ð",police_light:"ð¨",police_officer:"ð®",poodle:"ð©",poop:"ð©",popcorn:"ð¿",post_office:"ð¤",postal_horn:"ð¯",postbox:"ð®",potable_water:"ð°",potato:"ð¥",pouch:"ð",poultry_leg:"ð",pound:"ð·",pout:"ð¡",pouting_cat:"ð¾",pray:"ð",prayer_beads:"ð¿",pregnant_woman:"ð¤°",pretentious:"ð¤",pretzel:"ð¥¨",previous_track:"â®ï¸",prince:"ð¤´",princess:"ð¸",printer:"ð¨ï¸",projector:"ð½ï¸",punch:"ð",purple_heart:"ð",purse:"ð",pushpin:"ð",puzzle_piece:"ð§©",question:"âï¸",rabbit:"ð",rabbit_face:"ð°",raccoon:"ð¦",race_car:"ðï¸",radio:"ð»ï¸",radio_button:"ð",radioactive:"â¢ï¸",railway_car:"ð",railway_track:"ð¤ï¸",rain:"ð§ï¸",rainbow:"ð",rainbow_flag:"ð³ï¸âð",raised_backhand:"ð¤",raised_hand:"â",raised_hands:"ð",ram:"ð",ramen:"ð",rat:"ð",receipt:"ð§¾",record:"âºï¸",recycle:"â»ï¸",red_car:"ð",red_circle:"ð´",red_envelope:"ð§§",red_haired_man:"ð¨âð¦°",red_haired_woman:"ð©âð¦°",red_lantern:"ð®",registered:"Â®ï¸",relaxed:"âºï¸",relieved:"ð",reminder_ribbon:"ðï¸",repeat:"ð",repeat_single:"ð",restroom:"ð»",reverse:"âï¸",revolving_hearts:"ð",rewind:"âªï¸",rhino:"ð¦",ribbon:"ð",rice:"ð",rice_ball:"ð",rice_cracker:"ð",rice_scene:"ð",right_anger_speech:"ð¯ï¸",right_bicep:"ðª",right_facing_fist:"ð¤",ring:"ð",robot:"ð¤",rocket:"ð",rofl:"ð¤£",rolled_newspaper:"ðï¸",roller_coaster:"ð¢",rooster:"ð",rose:"ð¹",rosette:"ðµï¸",rotating_light:"ð¨",round_pushpin:"ð",rugby:"ð",running_shirt:"ð½",sad:"â¹ï¸",safety_pin:"ð§·",sagittarius:"âï¸",sailboat:"âµï¸",sake:"ð¶",salad:"ð¥",salt:"ð§",sandwich:"ð¥ª",santa:"ð",satellite:"ð°ï¸",satellite_antenna:"ð¡",sauropod:"ð¦",savour:"ð",saxophone:"ð·",scales:"âï¸",scarf:"ð§£",school:"ð«",scissors:"âï¸",scooter:"ð´",scorpion:"ð¦",scorpius:"âï¸",scotland:"ð´ó §ó ¢ó ³ó £ó ´ó ¿",scream:"ð±",scroll:"ð",seat:"ðº",second_place:"ð¥",see_no_evil:"ð",seedling:"ð±",selfie:"ð¤³",seven:"7ï¸â£",shallow_pan_of_food:"ð¥",shamed:"ð",shamrock:"âï¸",shark:"ð¦",shaved_ice:"ð§",sheep:"ð",shell:"ð",shield:"ð¡ï¸",shinto_shrine:"â©ï¸",ship:"ð¢",shirt:"ð",shocked:"ð¤¯",shooting_star:"ð ",shopping_bags:"ðï¸",shopping_cart:"ð",shower:"ð¿",shrimp:"ð¦",shuffle:"ð",shushing:"ð¤«",sick:"ð¤",signal_strength:"ð¶",silenced:"ð¤",six:"6ï¸â£",six_pointed_star:"ð¯",skateboard:"ð¹",ski:"ð¿",skier:"â·ï¸",skull:"ð",sled:"ð·",sleeping:"ð´",sleepy:"ðª",slot_machine:"ð°",small_airplane:"ð©ï¸",small_black_square:"âªï¸",small_blue_diamond:"ð¹",small_orange_diamond:"ð¸",small_white_square:"â«ï¸",smile:"ð",smiling_cat:"ðº",smirk:"ð",smirking_cat:"ð¼",smoking:"ð¬",snail:"ð",snake:"ð",sneaker:"ð",sneezing:"ð¤§",snow:"ð¨ï¸",snowboarder:"ðï¸",snowflake:"âï¸",snowman:"âï¸",snowy_mountain:"ðï¸",snowy_snowman:"âï¸",soap:"ð§¼",sob:"ð­",soccer:"â½ï¸",socks:"ð§¦",softball:"ð¥",soon:"ð",sos:"ð",sound:"ð",space_invader:"ð¾",spades:"â ï¸",spaghetti:"ð",sparkle:"âï¸",sparkler:"ð",sparkles:"â¨",sparkling_heart:"ð",speak_no_evil:"ð",speaker:"ðï¸",speaking_head:"ð£ï¸",speech:"ð¬",speedboat:"ð¤",spider:"ð·ï¸",spider_web:"ð¸ï¸",splayed_hand:"ðï¸",sponge:"ð§½",spool:"ð§µ",spoon:"ð¥",spouting_whale:"ð³",squid:"ð¦",stadium:"ðï¸",star:"â­ï¸",star2:"ð",star3:"ð ",star_and_crescent:"âªï¸",star_of_david:"â¡ï¸",starstruck:"ð¤©",station:"ð",statue_of_liberty:"ð½",steam_locomotive:"ð",stew:"ð²",stop:"â¹ï¸",stop_sign:"ð",stopwatch:"â±ï¸",storm:"âï¸",straight_ruler:"ð",strawberry:"ð",studio_microphone:"ðï¸",stuffed_flatbread:"ð¥",sun:"âï¸",sun_face:"ð",sunflower:"ð»",sunglasses:"ð¶ï¸",sunrise:"ð",sunrise_over_mountains:"ð",sunset:"ð",sunshower:"ð¦ï¸",superhero:"ð¦¸",supervillain:"ð¦¹",surprised:"ð®",sushi:"ð£",suspension_railway:"ð",swan:"ð¦¢",sweat_drops:"ð¦",sweet_potato:"ð ",symbols:"ð£",synagogue:"ð",syringe:"ð",taco:"ð®",tada:"ð",takeout_box:"ð¥¡",tanabata_tree:"ð",tangerine:"ð",taurus:"âï¸",taxi:"ð",tea:"ðµ",teddy_bear:"ð§¸",telephone:"âï¸",telephone_receiver:"ð",telescope:"ð­",ten:"ð",tennis:"ð¾",tent:"âºï¸",test_tube:"ð§ª",thermometer:"ð¡ï¸",thinking:"ð¤",third_place:"ð¥",thought:"ð­",three:"3ï¸â£",thumbsdown:"ðï¸",thumbsup:"ðï¸",ticket:"ð«",tickets:"ðï¸",tie:"ð",tiger:"ð",tiger_face:"ð¯",timer:"â²ï¸",tired:"ð«",tm:"â¢ï¸",toilet:"ð½",toilet_paper:"ð§»",tokyo_tower:"ð¼",tomato:"ð",tongue:"ð",tongue_out:"ð",toolbox:"ð§°",tools:"ð ï¸",tooth:"ð¦·",top:"ð",top_hat:"ð©",torn_calendar:"ð",tornado:"ðªï¸",trackball:"ð²ï¸",tractor:"ð",traffic_light:"ð¥",train:"ð",tram:"ð",tram_car:"ð",trashcan:"ðï¸",trex:"ð¦",triangle_flag:"ð©",triangular_ruler:"ð",trident:"ð±",trolleybus:"ð",trophy:"ðï¸",tropical_drink:"ð¹",tropical_fish:"ð ",truck:"ð",trumpet:"ðº",tulip:"ð·",tumbler_glass:"ð¥",turkey:"ð¦",turtle:"ð¢",tv:"ðºï¸",two:"2ï¸â£",two_hearts:"ð",two_hump_camel:"ð«",umbrella:"âï¸",umbrella_rain:"âï¸",unamused:"ð",underage:"ð",unicorn_face:"ð¦",unlock:"ðï¸",up:"ð",up_button:"ð¼",up_red_triangle:"ðº",upper_abcd:"ð ",upset:"ð¢",upside_down:"ð",urn:"â±ï¸",usa:"ðºð¸",utensils:"ð´",vacant:"ð¶",vampire:"ð§",vertical_traffic_light:"ð¦",vhs:"ð¼",vibration_mode:"ð³",victory:"âï¸",video_camera:"ð¹ï¸",video_game:"ð®ï¸",villain:"ð¦¹",violin:"ð»",virgo:"âï¸",volcano:"ð",volleyball:"ð",vomiting:"ð¤®",vs:"ð",vulcan:"ð",wales:"ð´ó §ó ¢ó ·ó ¬ó ³ó ¿",waning_crescent_moon:"ð",waning_gibbous_moon:"ð",warning:"â ï¸",wastebasket:"ðï¸",watch:"âï¸",water_buffalo:"ð",watermelon:"ð",wave:"ð",wavy_dash:"ã°ï¸",waxing_crescent_moon:"ð",waxing_gibbous_moon:"ð",wc:"ð¾",weary:"ð©",weary_cat:"ð",wedding:"ð",whale:"ð",wheel_of_dharma:"â¸ï¸",wheelchair:"â¿ï¸",white_check_mark:"â",white_circle:"âªï¸",white_exclamation:"â",white_flag:"ð³ï¸",white_flower:"ð®",white_haired_man:"ð¨âð¦³",white_haired_woman:"ð©âð¦³",white_question:"â",white_square_button:"ð³",wilted_rose:"ð¥",wind_chime:"ð",wind_face:"ð¬ï¸",wine_glass:"ð·",wink:"ð",wolf_face:"ðº",woman:"ð©",woman_artist:"ð©âð¨",woman_astronaut:"ð©âð",woman_biking:"ð´ââï¸",woman_bouncing_ball:"â¹ï¸ââï¸",woman_bowing:"ðââï¸",woman_cartwheeling:"ð¤¸ââï¸",woman_climbing:"ð§ââï¸",woman_construction_worker:"ð·ââï¸",woman_cook:"ð©âð³",woman_dancing:"ð",woman_detective:"ðµï¸ââï¸",woman_elf:"ð§ââï¸",woman_facepalming:"ð¤¦ââï¸",woman_factory_worker:"ð©âð­",woman_fairy:"ð§ââï¸",woman_farmer:"ð©âð¾",woman_firefighter:"ð©âð",woman_frowning:"ðââï¸",woman_genie:"ð§ââï¸",woman_gesturing_no:"ðââï¸",woman_gesturing_ok:"ðââï¸",woman_getting_face_massage:"ðââï¸",woman_getting_haircut:"ðââï¸",woman_golfing:"ðï¸ââï¸",woman_guard:"ðââï¸",woman_handball:"ð¤¾ââï¸",woman_headscarf:"ð§",woman_health_worker:"ð©ââï¸",woman_hero:"ð¦¸ââï¸",woman_judge:"ð©ââï¸",woman_juggling:"ð¤¹ââï¸",woman_lifting_weights:"ðï¸ââï¸",woman_lotus_position:"ð§ââï¸",woman_mage:"ð§ââï¸",woman_mechanic:"ð©âð§",woman_mountain_biking:"ðµââï¸",woman_office_worker:"ð©âð¼",woman_pilot:"ð©ââï¸",woman_police_officer:"ð®ââï¸",woman_pouting:"ðââï¸",woman_raising_hand:"ðââï¸",woman_rowing_boat:"ð£ââï¸",woman_running:"ðââï¸",woman_scientist:"ð©âð¬",woman_shrugging:"ð¤·ââï¸",woman_singer:"ð©âð¤",woman_steamy_room:"ð§ââï¸",woman_student:"ð©âð",woman_surfing:"ðââï¸",woman_swimming:"ðââï¸",woman_teacher:"ð©âð«",woman_technologist:"ð©âð»",woman_tipping_hand:"ðââï¸",woman_turban:"ð³ââï¸",woman_vampire:"ð§ââï¸",woman_villain:"ð¦¹ââï¸",woman_walking:"ð¶ââï¸",woman_water_polo:"ð¤½ââï¸",woman_zombie:"ð§ââï¸",womans_boot:"ð¢",womans_clothes:"ð",womans_hat:"ð",womans_sandal:"ð¡",women_bunny_ears_partying:"ð¯ââï¸",women_wrestling:"ð¤¼ââï¸",womens:"ðºï¸",woozy:"ð¥´",worried:"ð",wrench:"ð§",writing_hand:"âï¸",wtf:"ð§",x:"â",xmas_tree:"ð",yarn:"ð§¶",yellow_heart:"ð",yen:"ð´",yes:"ðï¸",yin_yang:"â¯ï¸",yum:"ð",zap:"â¡ï¸",zebra:"ð¦",zero:"0ï¸â£",zipper_mouth:"ð¤",zombie:"ð§",zzz:"ð¤"}},function(e,t,i){i.r(t);function o(e,t){var i={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(i[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(o=Object.getOwnPropertySymbols(e);s<o.length;s++)t.indexOf(o[s])<0&&(i[o[s]]=e[o[s]])}return i}function s(e,t,i,o){var s,r=arguments.length,n=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,i,o);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(n=(r<3?s(n):r>3?s(t,i,n):s(t,i))||n);return r>3&&n&&Object.defineProperty(t,i,n),n}var r=i(0);class Comparer{}const n=new class TextDocumentComparer extends Comparer{equals(e,t){return e===t}},a=new class TextEditorComparer extends Comparer{equals(e,t,i={useId:!1,usePosition:!1}){return e===t||void 0!==e&&void 0!==t&&(!i.usePosition||e.viewColumn===t.viewColumn)&&(!i.useId||e.document&&t.document?n.equals(e.document,t.document):e.id===t.id)}},c=new class UriComparer extends Comparer{equals(e,t){return e===t||void 0!==e&&void 0!==t&&e.scheme===t.scheme&&e.fsPath===t.fsPath}};var l,h,d,m,u,g,p,f,v,_,w,b,C;!function(e){e.File="file",e.Window="window"}(l||(l={})),function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleFileBlame="gitlens.toggleFileBlame"}(h||(h={})),function(e){e.Document="document",e.Containers="containers",e.Blocks="blocks"}(d||(d={})),function(e){e.Bitbucket="Bitbucket",e.BitbucketServer="BitbucketServer",e.Custom="Custom",e.GitHub="GitHub",e.GitLab="GitLab"}(m||(m={})),function(e){e.Absolute="absolute",e.Relative="relative"}(u||(u={})),function(e){e.Blame="blame",e.Heatmap="heatmap",e.RecentChanges="recentChanges"}(g||(g={})),function(e){e.Faces="wavatar",e.Geometric="identicon",e.Monster="monsterid",e.MysteryPerson="mp",e.Retro="retro",e.Robot="robohash"}(p||(p={})),function(e){e.Gutter="gutter",e.Line="line",e.Overview="overview"}(f||(f={})),function(e){e.Alternate="alternate",e.Chorded="chorded",e.None="none"}(v||(v={})),function(e){e.Silent="silent",e.Errors="errors",e.Verbose="verbose",e.Debug="debug"}(_||(_={})),function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithWorking="gitlens.diffWithWorking",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame"}(w||(w={})),function(e){e.List="list",e.Tree="tree"}(b||(b={})),function(e){e.Auto="auto",e.List="list",e.Tree="tree"}(C||(C={}));const y="gitlens",k="GitLens",S=`eamodio.${y}`,P="GitLens";var x,F,$,D,T;function N(e,t){return r.commands.executeCommand(x.SetContext,e,t)}function R(e){const t=r.window.activeTextEditor;return null!=t&&t.document===e}function U(e){const t=e.document.uri.scheme;return t!==$.Output&&t!==$.DebugConsole}!function(e){e.CloseActiveEditor="workbench.action.closeActiveEditor",e.CloseAllEditors="workbench.action.closeAllEditors",e.CursorMove="cursorMove",e.Diff="vscode.diff",e.EditorScroll="editorScroll",e.ExecuteDocumentSymbolProvider="vscode.executeDocumentSymbolProvider",e.ExecuteCodeLensProvider="vscode.executeCodeLensProvider",e.FocusFilesExplorer="workbench.files.action.focusFilesExplorer",e.Open="vscode.open",e.OpenFolder="vscode.openFolder",e.NextEditor="workbench.action.nextEditor",e.PreviewHtml="vscode.previewHtml",e.RevealLine="revealLine",e.SetContext="setContext",e.ShowExplorerActivity="workbench.view.explorer",e.ShowReferences="editor.action.showReferences"}(x||(x={})),function(e){e.ActiveFileStatus="gitlens:activeFileStatus",e.AnnotationStatus="gitlens:annotationStatus",e.CanToggleCodeLens="gitlens:canToggleCodeLens",e.Enabled="gitlens:enabled",e.HasRemotes="gitlens:hasRemotes",e.Key="gitlens:key",e.Readonly="gitlens:readonly",e.ViewsCanCompare="gitlens:views:canCompare",e.ViewsCanCompareFile="gitlens:views:canCompare:file",e.ViewsCompareKeepResults="gitlens:views:compare:keepResults",e.ViewsHideSupportGitLens="gitlens:views:supportGitLens:hide",e.ViewsFileHistoryEditorFollowing="gitlens:views:fileHistory:editorFollowing",e.ViewsLineHistoryEditorFollowing="gitlens:views:lineHistory:editorFollowing",e.ViewsRepositoriesAutoRefresh="gitlens:views:repositories:autoRefresh",e.ViewsSearchKeepResults="gitlens:views:search:keepResults"}(F||(F={})),function(e){e.DebugConsole="debug",e.File="file",e.Git="git",e.GitLens="gitlens",e.Output="output",e.Vsls="vsls"}($||($={})),function(e){e.AngleBracketLeftHeavy="â°",e.AngleBracketRightHeavy="â±",e.ArrowBack="â©",e.ArrowDown="â",e.ArrowDropRight="â¤·",e.ArrowHeadRight="â¤",e.ArrowLeft="â",e.ArrowLeftDouble="â",e.ArrowLeftRight="â",e.ArrowLeftRightDouble="â",e.ArrowLeftRightDoubleStrike="â",e.ArrowLeftRightLong="â·",e.ArrowRight="â",e.ArrowRightDouble="â",e.ArrowRightHollow="â¨",e.ArrowUp="â",e.ArrowUpRight="â",e.ArrowsHalfLeftRight="â",e.ArrowsHalfRightLeft="â",e.ArrowsLeftRight="â",e.ArrowsRightLeft="â",e.Asterisk="â",e.Check="â",e.Dash="â",e.Dot="â¢",e.Ellipsis="â¦",e.EnDash="â",e.MiddleEllipsis="â¯",e.MuchGreaterThan="âª",e.MuchLessThan="â",e.Pencil="â",e.Space="Â ",e.SpaceThin="â",e.SpaceThinnest="â",e.SquareWithBottomShadow="â",e.SquareWithTopShadow="â",e.ZeroWidthSpace="â"}(D||(D={})),function(e){e.GitLensVersion="gitlensVersion"}(T||(T={}));const L={".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"};var B;!function(e){e.ViewsCompareKeepResults="gitlens:views:compare:keepResults",e.ViewsRepositoriesAutoRefresh="gitlens:views:repositories:autoRefresh",e.ViewsSearchKeepResults="gitlens:views:search:keepResults"}(B||(B={}));var O,E,G=i(1);!function(e){e.entries=function*(e){for(const t in e)yield[t,e[t]]},e.flatten=function(e,t="",i=!1){const o=Object.create(null);return function e(t,i,o,s=!1){if(Object(o)!==o)t[i]=s?null==o?null:"string"==typeof o?o:JSON.stringify(o):o;else if(Array.isArray(o)){const r=o.length;for(let n=0;n<r;n++)e(t,`${i}[${n}]`,o[n],s);0===r&&(t[i]=null)}else{let r=!0;for(const n in o)r=!1,e(t,i?`${i}.${n}`:n,o[n],s);r&&i&&(t[i]=null)}}(o,t,e,i),o},e.paths=function e(t,i){const o=[];for(const s in t){const r=t[s];"object"==typeof r?o.push(...e(r,void 0===i?s:`${i}.${s}`)):o.push(void 0===i?s:`${i}.${s}`)}return o},e.values=function*(e){for(const t in e)yield e[t]}}(O||(O={})),function(e){function t(e,i,o=!0){if(void 0===e.children)return e;const s=[...O.values(e.children)];for(const e of s)t(e,i,!1);if(!o&&1===s.length){const t=s[0];void 0===t.value&&(e.name=i(e.name,t.name),e.relativePath=t.relativePath,e.children=t.children)}return e}e.countUniques=function(e,t){const i=Object.create(null);for(const o of e){const e=t(o);i[e]=(i[e]||0)+1}return i},e.filterMap=function(e,t){return e.reduce((e,i)=>{const o=t(i);return null!=o&&e.push(o),e},[])},e.filterMapAsync=async function(e,t){return e.reduce(async(e,i)=>{const o=await t(i);return null!=o&&e.push(o),e},[])},e.groupBy=function(e,t){return e.reduce((e,i)=>{const o=t(i);return e[o]=e[o]||[],e[o].push(i),e},Object.create(null))},e.groupByMap=function(e,t){return e.reduce((e,i)=>{const o=t(i),s=e.get(o)||[];return e.set(o,s),s.push(i),e},new Map)},e.groupByFilterMap=function(e,t,i){return e.reduce((e,o)=>{const s=i(o);if(null!=s){const i=t(o),r=e.get(i)||[];e.set(i,r),r.push(s)}return e},new Map)},e.makeHierarchical=function(e,i,o,s=!1){const r={name:"",relativePath:"",children:Object.create(null),descendants:[]},n=e.reduce((e,t)=>{let s=e,r="";for(const e of i(t)){r=o(r,e),void 0===s.children&&(s.children=Object.create(null));let i=s.children[e];void 0===i&&(s.children[e]=i={name:e,relativePath:r,children:void 0,descendants:void 0}),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(t),s=i}return s.value=t,e},r);return s?t(n,o,!0):n},e.compactHierarchy=t,e.uniqueBy=function(e,t,i){const o=Object.create(null);return e.filter(e=>{const s=t(e);return!o[s]&&(o[s]=t,!i||i(e))})}}(E||(E={}));var I=i(31);const A=i(13);A.distanceInWords=function(){const e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"a few seconds",other:"less than {{count}} minutes"},xMinutes:{one:"a minute",other:"{{count}} minutes"},aboutXHours:{one:"an hour",other:"{{count}} hours"},xHours:{one:"an hour",other:"{{count}} hours"},xDays:{one:"a day",other:"{{count}} days"},aboutXMonths:{one:"a month",other:"{{count}} months"},xMonths:{one:"a month",other:"{{count}} months"},aboutXYears:{one:"a year",other:"{{count}} years"},xYears:{one:"a year",other:"{{count}} years"},overXYears:{one:"a year",other:"{{count}} years"},almostXYears:{one:"a year",other:"{{count}} years"}};return{localize:function(t,i,o){o=o||{},12===i&&"xMonths"===t&&(t="aboutXYears",i=1);const s=e[t];let r;return r="string"==typeof s?s:1===i?s.one:s.other.replace("{{count}}",i.toString()),o.addSuffix?o.comparison>0?"in "+r:r+" ago":r}}}();const M={addSuffix:!0,locale:A};var Q;!function(e){function t(e){const t=new Date("number"==typeof e?e:e.getTime());return t.setHours(0,0,0,0),t}e.MillisecondsPerMinute=6e4,e.MillisecondsPerHour=36e5,e.MillisecondsPerDay=864e5,e.dateDaysFromNow=function(i,o=Date.now()){const s=t(o),r=t(i),n=s.getTime()-s.getTimezoneOffset()*e.MillisecondsPerMinute,a=r.getTime()-r.getTimezoneOffset()*e.MillisecondsPerMinute;return Math.round((n-a)/e.MillisecondsPerDay)},e.startOfDay=t,e.toFormatter=function(e){return{fromNow:()=>Object(I.distanceInWordsToNow)(e,M),format:t=>Object(I.format)(e,t)}}}(Q||(Q={}));var W=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},H="object"==typeof global&&global&&global.Object===Object&&global,V="object"==typeof self&&self&&self.Object===Object&&self,j=H||V||Function("return this")(),z=function(){return j.Date.now()},q=j.Symbol,Y=Object.prototype,K=Y.hasOwnProperty,X=Y.toString,Z=q?q.toStringTag:void 0;var J=function(e){var t=K.call(e,Z),i=e[Z];try{e[Z]=void 0;var o=!0}catch(e){}var s=X.call(e);return o&&(t?e[Z]=i:delete e[Z]),s},ee=Object.prototype.toString;var te=function(e){return ee.call(e)},ie="[object Null]",oe="[object Undefined]",se=q?q.toStringTag:void 0;var re=function(e){return null==e?void 0===e?oe:ie:se&&se in Object(e)?J(e):te(e)};var ne=function(e){return null!=e&&"object"==typeof e},ae="[object Symbol]";var ce=function(e){return"symbol"==typeof e||ne(e)&&re(e)==ae},le=NaN,he=/^\s+|\s+$/g,de=/^[-+]0x[0-9a-f]+$/i,me=/^0b[01]+$/i,ue=/^0o[0-7]+$/i,ge=parseInt;var pe=function(e){if("number"==typeof e)return e;if(ce(e))return le;if(W(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=W(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(he,"");var i=me.test(e);return i||ue.test(e)?ge(e.slice(2),i?2:8):de.test(e)?le:+e},fe="Expected a function",ve=Math.max,_e=Math.min;var we=function(e,t,i){var o,s,r,n,a,c,l=0,h=!1,d=!1,m=!0;if("function"!=typeof e)throw new TypeError(fe);function u(t){var i=o,r=s;return o=s=void 0,l=t,n=e.apply(r,i)}function g(e){var i=e-c;return void 0===c||i>=t||i<0||d&&e-l>=r}function p(){var e=z();if(g(e))return f(e);a=setTimeout(p,function(e){var i=t-(e-c);return d?_e(i,r-(e-l)):i}(e))}function f(e){return a=void 0,m&&o?u(e):(o=s=void 0,n)}function v(){var e=z(),i=g(e);if(o=arguments,s=this,c=e,i){if(void 0===a)return function(e){return l=e,a=setTimeout(p,t),h?u(e):n}(c);if(d)return a=setTimeout(p,t),u(c)}return void 0===a&&(a=setTimeout(p,t)),n}return t=pe(t)||0,W(i)&&(h=!!i.leading,r=(d="maxWait"in i)?ve(pe(i.maxWait)||0,t):r,m="trailing"in i?!!i.trailing:m),v.cancel=function(){void 0!==a&&clearTimeout(a),l=0,o=c=s=a=void 0},v.flush=function(){return void 0===a?n:f(z())},v},be=1/0,Ce=1.7976931348623157e308;var ye=function(e){return e?(e=pe(e))===be||e===-be?(e<0?-1:1)*Ce:e==e?e:0:0===e?e:0};var ke=function(e){var t=ye(e),i=t%1;return t==t?i?t-i:t:0},Se="Expected a function";var Pe=function(e,t){var i;if("function"!=typeof t)throw new TypeError(Se);return e=ke(e),function(){return--e>0&&(i=t.apply(this,arguments)),e<=1&&(t=void 0),i}};var xe,Fe=function(e){return Pe(2,e)};function $e(){return(e,t,i)=>{let o;if("function"==typeof i.value?o=i.value:"function"==typeof i.get&&(o=i.get),null==o)throw new Error("Not supported");const s=`$gate$${t}`;i.value=function(...e){this.hasOwnProperty(s)||Object.defineProperty(this,s,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let t=this[s];if(void 0===t){const i=o.apply(this,e);if(null==i||!xe.isPromise(i))return i;this[s]=t=i.then(e=>(this[s]=void 0,e))}return t}}}!function(e){e.cachedOnce=function(e,t){let i=t;return(...t)=>{if(void 0!==i){const e=Promise.resolve(i);return i=void 0,e}return e(...t)}},e.cancellable=function(e,t){return new Promise((i,o)=>{t.onCancellationRequested(()=>i(void 0)),e.then(i,o)})},e.debounce=function(e,t,i){const s=Object.assign({track:!1},i||{}),{track:r}=s,n=o(s,["track"]);if(!0!==r)return we(e,t,n);let a=!1;const c=we(function(...t){return a=!1,e.apply(this,t)},t,i),l=function(...e){return a=!0,c.apply(this,e)};return l.pending=function(){return a},l.cancel=function(){return c.cancel.apply(c)},l.flush=function(...e){return c.flush.apply(c,e)},l};const t=",",i="",s="=",r="{",n="(",a=")",c=/\(([\s\S]*)\)/,l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,h=/\s?=.*$/;async function d(e){await new Promise(t=>setTimeout(t,e))}e.getParameters=function(e){if("function"!=typeof e)throw new Error("Not supported");if(0===e.length)return[];let o=Function.prototype.toString.call(e),d=(o=(o=o.replace(l,i)||o).slice(0,o.indexOf(r))).indexOf(n),m=o.indexOf(a);d=d>=0?d+1:0,m=m>0?m:o.indexOf(s);const u=(o=`(${o=o.slice(d,m)})`).match(c);return null!=u?u[1].split(t).map(e=>e.trim().replace(h,i)):[]},e.isPromise=function(e){return("object"==typeof e||"function"==typeof e)&&"function"==typeof e.then},e.once=function(e){return Fe(e)},e.propOf=function(e,t){const i=(e,t)=>{const o=void 0===i.value?t:`${i.value}.${t}`;return i.value=o,Object.assign(o=>i(e[t],o),{value:o})};return i(e,t)},e.interval=function(e,t){let i;const o={dispose:()=>{void 0!==i&&(clearInterval(i),i=void 0)}};return i=setInterval(e,t),o},e.wait=d,e.waitUntil=async function(e,t){const i=Math.round(t/100);let o=0;for(;;){if(e())return!0;if(o>i)return!1;await d(100),o++}}}(xe||(xe={}));var De,Te=i(32);!function(e){e.getDurationMilliseconds=function(e){const[t,i]=process.hrtime(e);return 1e3*t+Math.floor(i/1e6)};const t=/\\/g,i=/\/$/g,o=/\$\{(\W*)?([^|]*?)(?:\|(\d+)(\-|\?)?)?(\W*)?\}/g,s=/\$\{(?:\W*)?(\w*?)(?:[\W\d]*)\}/g;function r(e,t,i="Â ",o){const s=t-(o||d(e));return s<=0?e:i.repeat(s)+e}function n(e,t,i="Â ",o){const s=t-(o||d(e));return s<=0?e:e+i.repeat(s)}e.getTokensFromTemplate=function(e){const t=[];let i=o.exec(e);for(;null!=i;){const[,s,r,n,a,c]=i;t.push({key:r,options:{collapseWhitespace:"?"===a,padDirection:"-"===a?"left":"right",prefix:s,suffix:c,truncateTo:null==n?void 0:parseInt(n,10)}}),i=o.exec(e)}return t},e.interpolate=function(e,t){return e?void 0===t?e.replace(s,""):(e=e.replace(s,"$${this.$1}"),new Function(`return \`${e}\`;`).call(t)):e},e.lines=function*(e){let t=0;for(;t<e.length;){let i=e.indexOf("\n",t);-1===i&&(i=e.length),yield e.substring(t,i),t=i+1}},e.md5=function(e,t="base64"){return Object(Te.createHash)("md5").update(e).digest(t)},e.normalizePath=function(e,o={stripTrailingSlash:!0}){if(null==e||0===e.length)return e;let s=e.replace(t,"/");const{addLeadingSlash:r,stripTrailingSlash:n}=Object.assign({stripTrailingSlash:!0},o);return n&&(s=s.replace(i,"")),r&&47!==s.charCodeAt(0)&&(s=`/${s}`),s},e.pad=function(e,t=0,i=0,o="Â "){return 0===t&&0===i?e:`${0===t?"":o.repeat(t)}${e}${0===i?"":o.repeat(i)}`},e.padLeft=r,e.padLeftOrTruncate=function(e,t,i,o){return(o=o||d(e))<t?r(e,t,i,o):o>t?c(e,t,void 0,o):e},e.padRight=n,e.padOrTruncate=function(e,t,i,o){const s=t<0;return t=Math.abs(t),(o=o||d(e))<t?s?r(e,t,i,o):n(e,t,i,o):o>t?c(e,t,void 0,o):e},e.padRightOrTruncate=function(e,t,i,o){return(o=o||d(e))<t?n(e,t,i,o):o>t?c(e,t):e},e.pluralize=function(e,t,i){return void 0===i?`${t} ${e}${1===t?"":"s"}`:`${0===t?i.zero||t:i.number||t} ${1===t?e:i.plural||`${e}${i.suffix||"s"}`}`};const a=/[\\\/:*?"<>|\x00-\x1f\x80-\x9f]/g;function c(e,t,i="â¦",o){if(!e)return e;if((o=o||d(e))<=t)return e;if(o===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(o/e.length)),r=d(e.substring(0,s));for(;r<t;)r+=d(e[s++]);return r>=t&&s--,`${e.substring(0,s)}${i}`}e.sanitizeForFileSystem=function(e,t="_"){return e?e.replace(a,t):e},e.sha1=function(e,t="base64"){return Object(Te.createHash)("sha1").update(e).digest(t)},e.truncate=c;const l=/[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))/g,h=/[^\x20-\x7F\u00a0\u2026]/;function d(e){if(null==e||0===e.length)return 0;if(!h.test(e))return e.length;e=e.replace(l,"");let t=0,i=0,o=0;const s=[...e];for(let e=0;e<s.length;e++){const r=s[e].codePointAt(0);if(!(r<=31||r>=127&&r<=159)&&!(r>=768&&r<=879))if(r>=128512&&r<=128591||r>=127744&&r<=128511||r>=128640&&r<=128767||r>=9728&&r<=9983||r>=9984&&r<=10175||r>=65024&&r<=65039||r>=129280&&r<=129535||r>=65024&&r<=65039||r>=8400&&r<=8447){if(r>=127995&&r<=127999)continue;i++,t+=2}else 8205!==r?(r>65535&&e++,t+=m(r)?2:1):(o++,t-=2)}const r=i-o;return r>1&&(t+=r-1),t}function m(e){return e>=4352&&(e<=4447||9001===e||9002===e||11904<=e&&e<=12871&&12351!==e||12880<=e&&e<=19903||19968<=e&&e<=42182||43360<=e&&e<=43388||44032<=e&&e<=55203||63744<=e&&e<=64255||65040<=e&&e<=65049||65072<=e&&e<=65131||65281<=e&&e<=65376||65504<=e&&e<=65510||110592<=e&&e<=110593||127488<=e&&e<=127569||131072<=e&&e<=262141)}e.getWidth=d}(De||(De={}));const Ne=new Map;let Re=0;function Ue(e){Ne.delete(e)}const Le=Symbol("logInstanceNameFn");function Be(e={timed:!0}){return Oe(Object.assign({debug:!0},e))}function Oe(e={timed:!0}){const t=(e=Object.assign({timed:!0},e)).debug?logger_Logger.debug.bind(logger_Logger):logger_Logger.log.bind(logger_Logger);return(i,o,s)=>{let r;if("function"==typeof s.value?r=s.value:"function"==typeof s.get&&(r=s.get),null==r)throw new Error("Not supported");const n=xe.getParameters(r);s.value=function(...s){const a=(Re===Number.MAX_SAFE_INTEGER&&(Re=0),++Re);if(logger_Logger.level!==_.Debug&&(logger_Logger.level!==_.Verbose||e.debug)||"function"==typeof e.condition&&!e.condition(...s))return r.apply(this,s);let c;null!=this?(c=logger_Logger.toLoggableName(this),null!=this.constructor&&this.constructor[Le]&&(c=i.constructor[Le](this,c))):c="";let{correlate:l}=e;!l&&e.timed&&(l=!0);let h,d=`${l?`[${a.toString(16)}] `:""}${c?`${c}.`:""}${o}`;null!=e.prefix&&(d=e.prefix({id:a,instance:this,instanceName:c,name:o,prefix:d},...s)),l&&function(e,t){Ne.set(e,t)}(a,h={correlationId:a,prefix:d});const m=null!=e.enter?e.enter(...s):"";let u;if(!1===e.args||0===s.length)u="",e.singleLine||t(`${d}${m}`);else{const i="object"==typeof e.args?e.args:void 0;let o,r;u=s.map((t,s)=>{const a=n[s];if(void 0!==(o=void 0!==i?i[s]:void 0)){if(!1===(r=o(t)))return}else r=logger_Logger.toLoggable(t,e.sanitize);return a?`${a}=${r}`:r}).filter(Boolean).join(", "),e.singleLine||(e.debug?t(`${d}${m}`,u):logger_Logger.logWithDebugParams(`${d}${m}`,u))}if(e.timed||null!=e.exit){const i=e.timed?process.hrtime():void 0,o=t=>{const o=void 0!==i?` â¢ ${De.getDurationMilliseconds(i)} ms`:"";e.singleLine?logger_Logger.error(t,`${d}${m}`,`failed${void 0!==h&&h.exitDetails?h.exitDetails:""}${o}`,u):logger_Logger.error(t,d,`failed${void 0!==h&&h.exitDetails?h.exitDetails:""}${o}`),l&&Ue(a)};let n;try{n=r.apply(this,s)}catch(e){throw o(e),e}const c=o=>{const s=void 0!==i?` â¢ ${De.getDurationMilliseconds(i)} ms`:"";let r;if(null!=e.exit)try{r=e.exit(o)}catch(e){r=`@log.exit error: ${e}`}else r="completed";e.singleLine?e.debug?t(`${d}${m} ${r}${void 0!==h&&h.exitDetails?h.exitDetails:""}${s}`,u):logger_Logger.logWithDebugParams(`${d}${m} ${r}${void 0!==h&&h.exitDetails?h.exitDetails:""}${s}`,u):t(`${d} ${r}${void 0!==h&&h.exitDetails?h.exitDetails:""}${s}`),l&&Ue(a)};if(null!=n&&xe.isPromise(n)){n.then(c).catch(o)}else c(n);return n}return r.apply(this,s)}}}var Ee,Ge;!function(e){function t(e,t){for(const i of e)if(t(i))return!0;return!1}e.count=function(e,t){let i,o=0;for(;!(i=e.next()).done;)(void 0===t||t(i.value))&&o++;return o},e.every=function(e,t){for(const i of e)if(!t(i))return!1;return!0},e.filter=function*(e,t){if(void 0===t)for(const t of e)null!=t&&(yield t);else for(const i of e)t(i)&&(yield i)},e.filterMap=function*(e,t){for(const i of e){const e=t(i);null!=e&&(yield e)}},e.forEach=function(e,t){let i=0;for(const o of e)t(o,i),i++},e.find=function(e,t){for(const i of e)if(t(i))return i;return null},e.first=function(e){return e[Symbol.iterator]().next().value},e.flatMap=function*(e,t){for(const i of e)yield*t(i)},e.has=function(e,i){return t(e,e=>e===i)},e.isIterable=function(e){return"function"==typeof e[Symbol.iterator]},e.join=function(e,t){let i="";const o=e[Symbol.iterator]();let s=o.next();if(s.done)return i;for(;;){const e=s.value.toString();if((s=o.next()).done){i+=e;break}i+=`${e}${t}`}return i},e.last=function(e){let t=null;for(t of e);return t},e.map=function*(e,t){for(const i of e)yield t(i)},e.next=function(e){return e.next().value},e.skip=function*(e,t){let i=0;for(const o of e)i>=t&&(yield o),i++},e.some=t,e.take=function*(e,t){if(t>0){let i=0;for(const o of e)if(yield o,++i>=t)break}},e.union=function*(...e){for(const t of e)for(const e of t)yield e}}(Ee||(Ee={}));class StringIterator{constructor(){this._value="",this._pos=0}reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}class PathIterator{reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){const t=this._value.charCodeAt(this._to);if(47===t||92===t){if(!e)break;this._from++}else e=!1}return this}cmp(e){let t=0;const i=e.length;let o=this._from;for(;t<i&&o<this._to;){const i=e.charCodeAt(t)-this._value.charCodeAt(o);if(0!==i)return i;t+=1,o+=1}return i===this._to-this._from?0:t<i?-1:1}value(){return this._value.substring(this._from,this._to)}}class TernarySearchTreeNode{isEmpty(){return!(this.left||this.mid||this.right||this.value)}}class searchTree_TernarySearchTree{constructor(e){this._iter=e}static forPaths(){return new searchTree_TernarySearchTree(new PathIterator)}static forStrings(){return new searchTree_TernarySearchTree(new StringIterator)}clear(){this._root=void 0}set(e,t){const i=this._iter.reset(e);let o;for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=i.value()),o=this._root;;){const e=i.cmp(o.segment);if(e>0)o.left||(o.left=new TernarySearchTreeNode,o.left.segment=i.value()),o=o.left;else if(e<0)o.right||(o.right=new TernarySearchTreeNode,o.right.segment=i.value()),o=o.right;else{if(!i.hasNext())break;i.next(),o.mid||(o.mid=new TernarySearchTreeNode,o.mid.segment=i.value()),o=o.mid}}const s=o.value;return o.value=t,o.key=e,s}get(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext())break;t.next(),i=i.mid}}return i?i.value:void 0}delete(e){const t=this._iter.reset(e),i=[];let o=this._root;for(;o;){const e=t.cmp(o.segment);if(e>0)i.push([1,o]),o=o.left;else if(e<0)i.push([-1,o]),o=o.right;else{if(!t.hasNext()){for(o.value=void 0;i.length>0&&o.isEmpty();){const[e,t]=i.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case-1:t.right=void 0}o=t}break}t.next(),i.push([0,o]),o=o.mid}}}findSubstr(e){const t=this._iter.reset(e);let i,o=this._root;for(;o;){const e=t.cmp(o.segment);if(e>0)o=o.left;else if(e<0)o=o.right;else{if(!t.hasNext())break;t.next(),i=o.value||i,o=o.mid}}return o&&o.value||i}findSuperstr(e,t=!1){const i=this._iter.reset(e);let o=this._root;for(;o;){const e=i.cmp(o.segment);if(e>0)o=o.left;else if(e<0)o=o.right;else{if(!i.hasNext())return o.mid?(o=o.mid,{[Symbol.iterator]:()=>this._nodeIterator(o,t)}):void 0;i.next(),o=o.mid}}}_nodeIterator(e,t=!1){const i={done:!1,value:void 0};let o,s;return{next:()=>(s||(s=[],o=0,this._forEach(e,e=>s.push(e),t)),o>=s.length?(i.done=!0,i.value=void 0):(i.done=!1,i.value=s[o++]),i)}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:Ee.count(this.entries(),void 0===e?void 0:([t])=>e(t))}entries(){return this._iterator(this._root)}values(){return Ee.map(this.entries(),([e])=>e)}highlander(){if(void 0===this._root||this._root.isEmpty())return;const e=this.entries();let t,i,o=0;for(;!(t=e.next()).done;)if(i=t.value,++o>1)return;return i}some(e){return void 0!==this._root&&!this._root.isEmpty()&&Ee.some(this.entries(),([t])=>e(t))}*_iterator(e){void 0!==e&&(yield*this._iterator(e.left),e.value&&(yield[e.value,e.key]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}}!function(e){function t(e,t,i,o){return{major:"string"==typeof e?parseInt(e,10):e,minor:"string"==typeof t?parseInt(t,10):t,patch:"string"==typeof i?parseInt(i,10):i,pre:o}}e.compare=function(e,t){return e.major>t.major?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?e.pre.localeCompare(t.pre):0},e.from=t,e.fromString=function(e){const[i,o]=e.split("-"),[s,r,n]=i.split(".");return t(s,r,n,o)}}(Ge||(Ge={}));const Ie=`[${k}]`,Ae=/\bgitlens\b/i;class logger_Logger{static configure(e,t){this.customLoggableFn=t,e.subscriptions.push(io.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(io.initializingChangeEvent)}static onConfigurationChanged(e){const t=io.name("outputLevel").value;io.changed(e,t)&&(this.level=io.get(t),this.level===_.Silent?void 0!==this.output&&(this.output.dispose(),this.output=void 0):this.output=this.output||r.window.createOutputChannel(k))}static debug(e,...t){if(this.level!==_.Debug&&!logger_Logger.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),void 0!==e&&(i=`${e.prefix} ${i||""}`)),logger_Logger.isDebugging&&console.log(this.timestamp,Ie,i||"",...t),void 0!==this.output&&this.level===_.Debug&&this.output.appendLine(`${this.timestamp} ${i||""}${this.toLoggableParams(!0,t)}`)}static error(e,t,...i){if(this.level===_.Silent&&!logger_Logger.isDebugging)return;let o;if(void 0===t||"string"==typeof t?o=t:(o=i.shift(),void 0!==t&&(o=`${t.prefix} ${o||""}`)),void 0===o){const t=e.stack;if(t){const e=/.*\s*?at\s(.+?)\s/.exec(t);null!=e&&(o=e[1])}}logger_Logger.isDebugging&&console.error(this.timestamp,Ie,o||"",...i,e),void 0!==this.output&&this.level!==_.Silent&&this.output.appendLine(`${this.timestamp} ${o||""}${this.toLoggableParams(!1,i)}\n${e}`)}static getCorrelationContext(){return Ne.get(Re)}static log(e,...t){if(this.level!==_.Verbose&&this.level!==_.Debug&&!logger_Logger.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),void 0!==e&&(i=`${e.prefix} ${i||""}`)),logger_Logger.isDebugging&&console.log(this.timestamp,Ie,i||"",...t),void 0===this.output||this.level!==_.Verbose&&this.level!==_.Debug||this.output.appendLine(`${this.timestamp} ${i||""}${this.toLoggableParams(!1,t)}`)}static logWithDebugParams(e,...t){if(this.level!==_.Verbose&&this.level!==_.Debug&&!logger_Logger.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),void 0!==e&&(i=`${e.prefix} ${i||""}`)),logger_Logger.isDebugging&&console.log(this.timestamp,Ie,i||"",...t),void 0===this.output||this.level!==_.Verbose&&this.level!==_.Debug||this.output.appendLine(`${this.timestamp} ${i||""}${this.toLoggableParams(!0,t)}`)}static warn(e,...t){if(this.level===_.Silent&&!logger_Logger.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),void 0!==e&&(i=`${e.prefix} ${i||""}`)),logger_Logger.isDebugging&&console.warn(this.timestamp,Ie,i||"",...t),void 0!==this.output&&this.level!==_.Silent&&this.output.appendLine(`${this.timestamp} ${i||""}${this.toLoggableParams(!1,t)}`)}static showOutputChannel(){void 0!==this.output&&this.output.show()}static toLoggable(e,t){if("object"!=typeof e)return String(e);if(void 0!==this.customLoggableFn){const t=this.customLoggableFn(e);if(null!=t)return t}if(e instanceof r.Uri)return`Uri(${e.toString(!0)})`;try{return JSON.stringify(e,t)}catch(e){return"<error>"}}static toLoggableName(e){let t;if("function"==typeof e){if(null==e.prototype||null==e.prototype.constructor)return e.name;t=e.prototype.constructor.name}else t=null!=e.constructor?e.constructor.name:"";const i=t.indexOf("_");return-1===i?t:t.substr(i+1)}static get timestamp(){const e=new Date;return`[${e.toISOString().replace(/T/," ").replace(/\..+/,"")}:${("00"+e.getUTCMilliseconds()).slice(-3)}]`}static logGitCommand(e,t){this.level===_.Debug&&(void 0===this.gitOutput&&(this.gitOutput=r.window.createOutputChannel(`${k} (Git)`)),this.gitOutput.appendLine(`${this.timestamp} ${e}${null!=t?`\n\n${t.toString()}`:""}`))}static toLoggableParams(e,t){if(0===t.length||e&&this.level!==_.Debug&&!logger_Logger.isDebugging)return"";return` â ${t.map(e=>this.toLoggable(e)).join(", ")}`||""}static get isDebugging(){if(void 0===this._isDebugging){const e=process.env;this._isDebugging=!(!e||!e.VSCODE_DEBUGGING_EXTENSION)&&Ae.test(e.VSCODE_DEBUGGING_EXTENSION)}return this._isDebugging}}var Me;logger_Logger.level=_.Silent,function(e){e.Computing="computing",e.Computed="computed"}(Me||(Me={}));class annotationProvider_AnnotationProviderBase{constructor(e,t,i,o){this.editor=e,this.trackedDocument=t,this.decoration=i,this.highlightDecoration=o,this.correlationKey=annotationProvider_AnnotationProviderBase.getCorrelationKey(this.editor),this.document=this.editor.document,this.disposable=r.Disposable.from(r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}static getCorrelationKey(e){return void 0!==e?e.id:""}dispose(){this.clear(),this.disposable&&this.disposable.dispose()}async onTextEditorSelectionChanged(e){if(n.equals(this.document,e.textEditor&&e.textEditor.document))return this.selection(e.selections[0].active.line)}get editorId(){return void 0===this.editor||void 0===this.editor.document?"":this.editor.id}get editorUri(){if(void 0!==this.editor&&void 0!==this.editor.document)return this.editor.document.uri}clear(){if(this.status=void 0,void 0!==this.editor){if(void 0!==this.decoration)try{this.editor.setDecorations(this.decoration,[])}catch(e){}if(void 0!==this.additionalDecorations&&this.additionalDecorations.length>0){for(const e of this.additionalDecorations)try{this.editor.setDecorations(e.decoration,[])}catch(e){}this.additionalDecorations=void 0}if(void 0!==this.highlightDecoration)try{this.editor.setDecorations(this.highlightDecoration,[])}catch(e){}}}reset(e){void 0===this._resetDebounced&&(this._resetDebounced=xe.debounce(this.onReset,250)),this._resetDebounced(e)}async onReset(e){void 0!==e&&(this.clear(),this.decoration=e.decoration,this.highlightDecoration=e.highlightDecoration),await this.provideAnnotation(void 0===this.editor?void 0:this.editor.selection.active.line)}async restore(e){if(!1!==this.editor._disposed){if(this.status=Me.Computing,e===r.window.activeTextEditor&&await N(F.AnnotationStatus,this.status),this.editor=e,this.correlationKey=annotationProvider_AnnotationProviderBase.getCorrelationKey(e),this.document=e.document,void 0!==this.decorations&&this.decorations.length&&(this.editor.setDecorations(this.decoration,this.decorations),void 0!==this.additionalDecorations&&this.additionalDecorations.length))for(const e of this.additionalDecorations)this.editor.setDecorations(e.decoration,e.ranges);this.status=Me.Computed,e===r.window.activeTextEditor&&(await N(F.AnnotationStatus,this.status),await this.selection(e.selection.active.line))}}async provideAnnotation(e){return this.status=Me.Computing,await this.onProvideAnnotation(e)?(this.status=Me.Computed,!0):(this.status=void 0,!1)}}var Qe,We=i(3);!function(e){e.CommitHasNoPreviousCommitWarning="suppressCommitHasNoPreviousCommitWarning",e.CommitNotFoundWarning="suppressCommitNotFoundWarning",e.FileNotUnderSourceControlWarning="suppressFileNotUnderSourceControlWarning",e.GitDisabledWarning="suppressGitDisabledWarning",e.GitVersionWarning="suppressGitVersionWarning",e.LineUncommittedWarning="suppressLineUncommittedWarning",e.NoRepositoryWarning="suppressNoRepositoryWarning",e.SupportGitLensNotification="suppressSupportGitLensNotification"}(Qe||(Qe={}));class messages_Messages{static showCommitHasNoPreviousCommitWarningMessage(e){return void 0===e?messages_Messages.showMessage("info","Commit has no previous commit.",Qe.CommitHasNoPreviousCommitWarning):messages_Messages.showMessage("info",`Commit ${e.shortSha} (${e.author}, ${e.formattedDate}) has no previous commit.`,Qe.CommitHasNoPreviousCommitWarning)}static showCommitNotFoundWarningMessage(e){return messages_Messages.showMessage("warn",`${e}. The commit could not be found.`,Qe.CommitNotFoundWarning)}static async showGenericErrorMessage(e){const t=await messages_Messages.showMessage("error",`${e}. See output channel for more details`,void 0,null,...[{title:"Open Output Channel"}]);return void 0!==t&&logger_Logger.showOutputChannel(),t}static showFileNotUnderSourceControlWarningMessage(e){return messages_Messages.showMessage("warn",`${e}. The file is probably not under source control.`,Qe.FileNotUnderSourceControlWarning)}static showGitDisabledErrorMessage(){return messages_Messages.showMessage("error","GitLens requires Git to be enabled. Please re-enable Git â set `git.enabled` to true and reload",Qe.GitDisabledWarning)}static showGitVersionUnsupportedErrorMessage(e){return messages_Messages.showMessage("error",`GitLens requires a newer version of Git (>= 2.2.0) than is currently installed (${e}). Please install a more recent version of Git.`,Qe.GitVersionWarning)}static showLineUncommittedWarningMessage(e){return messages_Messages.showMessage("warn",`${e}. The line has uncommitted changes.`,Qe.LineUncommittedWarning)}static showNoRepositoryWarningMessage(e){return messages_Messages.showMessage("warn",`${e}. No repository could be found.`,Qe.NoRepositoryWarning)}static async showSupportGitLensMessage(){const e=[{title:"Become a Sponsor"},{title:"Donate via PayPal"},{title:"Donate via Cash App"}],t=await messages_Messages.showMessage("info","While GitLens is offered to everyone for free, if you find it useful, please consider [supporting](https://gitlens.amod.io/#support-gitlens) it. Thank you! â¤",void 0,null,...e);if(null!=t){let i;t===e[0]?i=r.Uri.parse("https://www.patreon.com/eamodio"):t===e[1]?i=r.Uri.parse("https://www.paypal.me/eamodio"):t===e[2]&&(i=r.Uri.parse("https://cash.me/$eamodio")),void 0!==i&&(await N(F.ViewsHideSupportGitLens,!0),await this.suppressedMessage(Qe.SupportGitLensNotification),await r.commands.executeCommand(x.Open,i))}}static async showWhatsNewMessage(e){const t=[{title:"What's New"},{title:"Release Notes"},{title:"â¤"}],i=await messages_Messages.showMessage("info",`GitLens has been updated to v${e} â check out what's new!`,void 0,null,...t);null!=i&&(i===t[0]?await r.commands.executeCommand(Mi.ShowWelcomePage):i===t[1]?await r.commands.executeCommand(x.Open,r.Uri.parse("https://github.com/eamodio/vscode-gitlens/blob/master/CHANGELOG.md")):i===t[2]&&await r.commands.executeCommand(x.Open,r.Uri.parse("https://gitlens.amod.io/#support-gitlens")))}static async showMessage(e,t,i,o={title:"Don't Show Again"},...s){if(logger_Logger.log(`ShowMessage(${e}, '${t}', ${i}, ${o})`),void 0!==i&&io.get(io.name("advanced")("messages")(i).value))return void logger_Logger.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) skipped`);void 0!==i&&null!==o&&s.push(o);let n=void 0;switch(e){case"info":n=await r.window.showInformationMessage(t,...s);break;case"warn":n=await r.window.showWarningMessage(t,...s);break;case"error":n=await r.window.showErrorMessage(t,...s)}return(void 0===i||null!==o)&&n!==o||(logger_Logger.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) don't show again requested`),await this.suppressedMessage(i),n!==o)?(logger_Logger.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) returned ${n?n.title:n}`),n):void 0}static suppressedMessage(e){const t=io.name("advanced")("messages").value,i=io.get(t);i[e]=!0;for(const[e,t]of Object.entries(i))!0!==t&&(i[e]=void 0);return io.update(t,i,r.ConfigurationTarget.Global)}}class trackedDocument_TrackedDocument{constructor(e,t,i,o){this._document=e,this.key=t,this.dirty=i,this._eventDelegates=o,this._onDidBlameStateChange=new r.EventEmitter,this._disposed=!1,this._forceDirtyStateChangeOnNextDocumentChange=!1,this._hasRemotes=!1,this._isDirtyIdle=!1,this._isTracked=!1,this._blameFailed=!1,this._repo=this.initialize(e.uri)}get onDidBlameStateChange(){return this._onDidBlameStateChange.event}dispose(){this._disposed=!0,this.reset("dispose"),this._disposable&&this._disposable.dispose()}async initialize(e){if(void 0===container_Container.git&&!await xe.waitUntil(()=>void 0!==container_Container.git,2e3))throw logger_Logger.log(`TrackedDocument.initialize(${e.toString(!0)})`,"Timed out waiting for the GitService to start"),new Error("TrackedDocument timed out waiting for the GitService to start");if(this._uri=await gitUri_GitUri.fromUri(e),this._disposed)return;const t=await container_Container.git.getRepository(this._uri);return this._disposed?void 0:(void 0!==t&&(this._disposable=t.onDidChange(this.onRepositoryChanged,this)),await this.update({initializing:!0,repo:t}),t)}onRepositoryChanged(e){e.changed(Ft.Repository)&&(this.reset("repository"),this.update())}get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}get hasRemotes(){return this._hasRemotes}get isBlameable(){return!this._blameFailed&&this._isTracked}get isDirtyIdle(){return this._isDirtyIdle}set isDirtyIdle(e){this._isDirtyIdle=e}get isRevision(){return void 0!==this._uri&&Boolean(this._uri.sha)}get isTracked(){return this._isTracked}get lineCount(){return this._document.lineCount}get uri(){return this._uri}activate(){N(F.ActiveFileStatus,this.getStatus())}async ensureInitialized(){await this._repo}is(e){return e===this._document}reset(e){this._blameFailed=!1,this._isDirtyIdle=!1,void 0!==this.state&&(this.state=void 0,logger_Logger.log(`Reset state for '${this.key}', reason=${e}`))}setBlameFailure(){const e=this.isBlameable;this._blameFailed=!0,e&&R(this._document)&&this.update({forceBlameChange:!0})}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}async update(e={}){if(this._disposed||void 0===this._uri)return this._hasRemotes=!1,void(this._isTracked=!1);this._isDirtyIdle=!1;const t=function(e){const t=r.window.activeTextEditor;return null!=t&&t.document===e?t:void 0}(this._document),i=e.forceBlameChange?void 0:this.isBlameable;this._isTracked=await container_Container.git.isTracked(this._uri);let o=void 0;if(this._isTracked&&void 0===(o=e.repo)&&(o=await this._repo),this._hasRemotes=void 0!==o&&await o.hasRemotes(),void 0!==t){const o=this.isBlameable;if(N(F.ActiveFileStatus,this.getStatus()),!e.initializing&&i!==o){const e={editor:t,document:this,blameable:o};this._onDidBlameStateChange.fire(e),this._eventDelegates.onDidBlameStateChange(e)}}}getStatus(){let e="";return this.isTracked&&(e+="tracked|"),this.isBlameable&&(e+="blameable|"),this.isRevision&&(e+="revision|"),this.hasRemotes&&(e+="remotes|"),e||void 0}}class documentTracker_DocumentTracker{constructor(){this._onDidChangeBlameState=new r.EventEmitter,this._onDidChangeDirtyState=new r.EventEmitter,this._onDidTriggerDirtyIdle=new r.EventEmitter,this._documentMap=new Map,this._disposable=r.Disposable.from(io.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),r.workspace.onDidChangeTextDocument(xe.debounce(this.onTextDocumentChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),r.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this)),this.onConfigurationChanged(io.initializingChangeEvent)}get onDidChangeBlameState(){return this._onDidChangeBlameState.event}get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}dispose(){this._disposable&&this._disposable.dispose(),this.clear()}initialize(){this.onActiveTextEditorChanged(r.window.activeTextEditor)}onConfigurationChanged(e){if(!io.initializing(e)&&(io.changed(e,io.name("blame")("ignoreWhitespace").value,null)||io.changed(e,io.name("advanced")("caching")("enabled").value)))for(const e of this._documentMap.values())e.reset("config");const t=io.name("advanced")("blame")("delayAfterEdit").value;io.changed(e,t)&&(this._dirtyIdleTriggerDelay=io.get(t),this._dirtyIdleTriggeredDebounced=void 0)}onActiveTextEditorChanged(e){if(void 0!==e&&!U(e))return;if(void 0!==this._timer&&(clearTimeout(this._timer),this._timer=void 0),void 0===e)return void(this._timer=setTimeout(()=>{this._timer=void 0,N(F.ActiveFileStatus,void 0)},250));const t=this._documentMap.get(e.document);void 0===t?this.addCore(e.document):t.activate()}onTextDocumentChanged(e){const{scheme:t}=e.document.uri;if(t!==$.File&&t!==$.Vsls)return;let i=this._documentMap.get(e.document);void 0===i&&(i=this.addCore(e.document)),i.reset("document");const o=e.document.isDirty,s=r.window.activeTextEditor;void 0!==this._dirtyIdleTriggeredDebounced&&(o?this._dirtyIdleTriggeredDebounced({editor:s,document:i}):this._dirtyIdleTriggeredDebounced.cancel()),(i.forceDirtyStateChangeOnNextDocumentChange||i.dirty!==o)&&(i.resetForceDirtyStateChangeOnNextDocumentChange(),i.dirty=o,void 0!==s&&s.document===e.document&&this.fireDocumentDirtyStateChanged({editor:s,document:i,dirty:i.dirty}))}onTextDocumentClosed(e){const t=this._documentMap.get(e);void 0!==t&&(t.dispose(),this._documentMap.delete(e),this._documentMap.delete(t.key))}onTextDocumentSaved(e){const t=this._documentMap.get(e);void 0===t?R(e)&&this.addCore(e):t.update({forceBlameChange:!0})}add(e){return this._add(e)}clear(){for(const e of this._documentMap.values())e.dispose();this._documentMap.clear()}get(e){return this._get(e)}async getOrAdd(e){let t=await this._get(e);return void 0===t&&(t=await this._add(e)),t}has(e){return("string"==typeof e||e instanceof r.Uri)&&(e=gitUri_GitUri.toKey(e)),this._documentMap.has(e)}async _add(e){if(e instanceof gitUri_GitUri)try{e=await r.workspace.openTextDocument(e.documentUri({useVersionedPath:!0}))}catch(t){const i=t.toString();if(i.includes("File seems to be binary and cannot be opened as text"))e=new BinaryTextDocument(e);else{if(!i.includes("File not found"))throw t;e=new MissingRevisionTextDocument(e)}}else e instanceof r.Uri&&(e=await r.workspace.openTextDocument(e));const t=await this.addCore(e);return await t.ensureInitialized(),t}async _get(e){e instanceof gitUri_GitUri?e=gitUri_GitUri.toKey(e.documentUri({useVersionedPath:!0})):("string"==typeof e||e instanceof r.Uri)&&(e=gitUri_GitUri.toKey(e));const t=this._documentMap.get(e);if(void 0!==t)return await t.ensureInitialized(),t}addCore(e){const t=gitUri_GitUri.toKey(e.uri),i=new trackedDocument_TrackedDocument(e,t,!1,{onDidBlameStateChange:e=>this._onDidChangeBlameState.fire(e)});return this._documentMap.set(e,i),this._documentMap.set(t,i),i}fireDocumentDirtyStateChanged(e){if(e.dirty)return setImmediate(async()=>{void 0!==this._dirtyStateChangedDebounced&&this._dirtyStateChangedDebounced.cancel(),r.window.activeTextEditor===e.editor&&(await e.document.ensureInitialized(),this._onDidChangeDirtyState.fire(e))}),void(this._dirtyIdleTriggerDelay>0&&(void 0===this._dirtyIdleTriggeredDebounced&&(this._dirtyIdleTriggeredDebounced=xe.debounce(async e=>{void 0!==this._dirtyIdleTriggeredDebounced&&this._dirtyIdleTriggeredDebounced.pending()||(await e.document.ensureInitialized(),e.document.isDirtyIdle=!0,this._onDidTriggerDirtyIdle.fire(e))},this._dirtyIdleTriggerDelay,{track:!0})),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document})));void 0===this._dirtyStateChangedDebounced&&(this._dirtyStateChangedDebounced=xe.debounce(async e=>{r.window.activeTextEditor===e.editor&&(await e.document.ensureInitialized(),this._onDidChangeDirtyState.fire(e))},250)),this._dirtyStateChangedDebounced(e)}}class documentTracker_EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri({useVersionedPath:!0}),this.eol=r.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}getText(e){throw new Error("Method not supported.")}getWordRangeAtPosition(e,t){throw new Error("Method not supported.")}lineAt(e){throw new Error("Method not supported.")}offsetAt(e){throw new Error("Method not supported.")}positionAt(e){throw new Error("Method not supported.")}save(){throw new Error("Method not supported.")}validatePosition(e){throw new Error("Method not supported.")}validateRange(e){throw new Error("Method not supported.")}}class BinaryTextDocument extends documentTracker_EmptyTextDocument{}class MissingRevisionTextDocument extends documentTracker_EmptyTextDocument{}class GitDocumentState{constructor(e){this.key=e,this.cache=new Map}get(e){return this.cache.get(e)}set(e,t){this.cache.set(e,t)}}class gitDocumentTracker_GitDocumentTracker extends documentTracker_DocumentTracker{}var He=i(19),Ve=i(18),je=i(70);const ze="win32"===process.platform;function qe(e){if(e.match(/[\\\/]/))return e;const t=G.join(".",e);try{if(We.statSync(t))return t}catch(e){}const i=process.env.PATH.split(ze?";":":");for(const t of i){const i=G.join(t,e);try{if(We.statSync(i))return i}catch(e){}}return e}class RunError extends Error{constructor(e,...t){super(...t),this.exitCode=e,Error.captureStackTrace(this,RunError)}}function Ye(e,t,i,s={}){const r=Object.assign({maxBuffer:104857600},s),{stdin:n,stdinEncoding:a}=r,c=o(r,["stdin","stdinEncoding"]);return new Promise((o,s)=>{const r=Object(je.execFile)(e,t,c,(r,n,a)=>{null==r?(a&&logger_Logger.warn(`Warning(${e} ${t.join(" ")}): ${a}`),o("utf8"===i||"binary"===i||"buffer"===i?n:Ve.decode(Buffer.from(n,"binary"),i))):s(new RunError(r.code?Number(r.code):0,"stdout maxBuffer exceeded"===r.message?`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${c.maxBuffer} bytes`:a||n))});n&&r.stdin.end(n,a||"utf8")})}async function Ke(e){const t=await Ye(e,["--version"],"utf8");return e&&"git"!==e||(e=function e(t,i){if(!ze)return{cmd:qe(t),args:i};if(!We.existsSync(t)){const o=[".exe",".bat",".cmd",".ps1"];for(const s of o){const o=qe(`${t}${s}`);if(We.existsSync(o))return e(o,i)}}if(t.match(/\.ps1$/i))return{cmd:G.join(process.env.SYSTEMROOT,"System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",t].concat(i)};if(t.match(/\.(bat|cmd)$/i))return{cmd:G.join(process.env.SYSTEMROOT,"System32","cmd.exe"),args:["/C",t,...i]};if(t.match(/\.(js)$/i))return{cmd:process.execPath,args:[t].concat(i)};return{cmd:t,args:i}}(e,["--version"]).cmd),{path:e,version:(i=t.trim(),i.replace(/^git version /,""))};var i}function Xe(e){return e?Ke(G.join(e,"Git","cmd","git.exe")):Promise.reject(new Error("Unable to find git"))}async function Ze(e){try{return await Ke(e||"git")}catch(e){try{switch(process.platform){case"darwin":return await async function(){try{let e=await Ye("which",["git"],"utf8");if("/usr/bin/git"!==(e=e.replace(/^\s+|\s+$/g,"")))return Ke(e);try{return await Ye("xcode-select",["-p"],"utf8"),Ke(e)}catch(t){return 2===t.code?Promise.reject(new Error("Unable to find git")):Ke(e)}}catch(e){return Promise.reject(new Error("Unable to find git"))}}();case"win32":return await Xe(process.env.ProgramW6432).then(null,()=>Xe(process.env["ProgramFiles(x86)"])).then(null,()=>Xe(process.env.ProgramFiles)).then(null,()=>Ke("git"));default:return Promise.reject("Unable to find git")}}catch(e){return Promise.reject(new Error("Unable to find git"))}}}const Je=/ /g;class formatter_Formatter{constructor(e,t){this.collapsableWhitespace=0,this.reset(e,t)}reset(e,t){this._item=e,void 0===t&&void 0!==this._options||(void 0===t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:mma"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}_padOrTruncate(e,t){if(null==e||0===e.length)return e;void 0===t&&(t={collapseWhitespace:!1,padDirection:"left",prefix:void 0,suffix:void 0,truncateTo:void 0});let i=t.truncateTo;if(void 0===i)this.collapsableWhitespace=0;else{i+=this.collapsableWhitespace,this.collapsableWhitespace=0;const o=De.getWidth(e),s=i-o;s>0?(t.collapseWhitespace&&(this.collapsableWhitespace=s),"left"===t.padDirection?e=De.padLeft(e,i,void 0,o):(t.collapseWhitespace&&(i-=s),e=De.padRight(e,i,void 0,o))):s<0&&(e=De.truncate(e,i,void 0,o))}return(t.prefix||t.suffix)&&(e=`${t.prefix||""}${e}${t.suffix||""}`),e}static fromTemplateCore(e,t,i,o){if(t=t.replace(Je,"Â "),e instanceof formatter_Formatter)return De.interpolate(t,e);let s=void 0;if(null==(s=null==o||"string"==typeof o?{dateFormat:o}:o).tokenOptions){const e=De.getTokensFromTemplate(t).reduce((e,t)=>(e[t.key]=t.options,e),{});s.tokenOptions=e}return void 0===this._formatter?this._formatter=new e(i,s):this._formatter.reset(i,s),De.interpolate(t,this._formatter)}}formatter_Formatter._formatter=void 0;const et=i(190),tt=/:([-+_a-z0-9]+):/g;class commitFormatter_CommitFormatter extends formatter_Formatter{get _ago(){return this._item.fromNow()}get _date(){return this._item.formatDate(this._options.dateFormat)}get _agoOrDate(){return(void 0!==this._options.dateStyle?this._options.dateStyle:container_Container.config.defaultDateStyle)===u.Absolute?this._date:this._ago}get ago(){return this._padOrTruncate(this._ago,this._options.tokenOptions.ago)}get agoOrDate(){return this._padOrTruncate(this._agoOrDate,this._options.tokenOptions.agoOrDate)}get author(){const e=this._item.author;return this._padOrTruncate(e,this._options.tokenOptions.author)}get authorAgo(){const e=`${this._item.author}, ${this._ago}`;return this._padOrTruncate(e,this._options.tokenOptions.authorAgo)}get authorAgoOrDate(){const e=`${this._item.author}, ${this._agoOrDate}`;return this._padOrTruncate(e,this._options.tokenOptions.authorAgoOrDate)}get changes(){return this._item instanceof logCommit_GitLogCommit&&this._item.type!==at.File?this._padOrTruncate(this._item.getFormattedDiffStatus(),this._options.tokenOptions.changes):this._padOrTruncate("",this._options.tokenOptions.changes)}get changesShort(){return this._item instanceof logCommit_GitLogCommit&&this._item.type!==at.File?this._padOrTruncate(this._item.getFormattedDiffStatus({compact:!0,separator:""}),this._options.tokenOptions.changesShort):this._padOrTruncate("",this._options.tokenOptions.changesShort)}get date(){return this._padOrTruncate(this._date,this._options.tokenOptions.date)}get id(){return this._padOrTruncate(this._item.shortSha||"",this._options.tokenOptions.id)}get message(){let e;if(this._item.isStagedUncommitted)e="Staged changes";else if(this._item.isUncommitted)e="Uncommitted changes";else{if(this._options.truncateMessageAtNewLine){const t=this._item.message.indexOf("\n");e=-1===t?this._item.message:`${this._item.message.substring(0,t)}${D.Space}${D.Ellipsis}`}else e=this._item.message;e=e.replace(tt,(e,t)=>et[t]||e)}return this._padOrTruncate(e,this._options.tokenOptions.message)}get sha(){return this.id}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}const it="",ot="/";class gitUri_GitUri extends r.Uri{constructor(e,t){if(null==e)return void super();if(e.scheme===$.GitLens){const t=JSON.parse(e.query),i=e.path.indexOf(t.path);return i+t.path.length<e.path.length&&(t.path=e.path.substr(i)),super({scheme:e.scheme,authority:e.authority,path:t.path,query:JSON.stringify(t),fragment:e.fragment}),this.repoPath=t.repoPath,void(!gitService_GitService.isStagedUncommitted(t.ref)&&gitService_GitService.isUncommitted(t.ref)||(this.sha=t.ref))}if(void 0===t)return void super(e);if("string"==typeof t)return super(e),void(this.repoPath=t);const[i,o]=gitUri_GitUri.ensureValidUNCPath(e.authority,gitUri_GitUri.resolve(t.fileName||e.fsPath,t.repoPath));let s;switch(e.scheme){case"https":case"http":case"file":s=o?o[0]!==ot?`/${o}`:o:ot;break;default:s=o}super({scheme:e.scheme,authority:i,path:s,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,this.versionedPath=t.versionedPath,!gitService_GitService.isStagedUncommitted(t.sha)&&gitService_GitService.isUncommitted(t.sha)||(this.sha=t.sha)}get shortSha(){return this.sha&&gitService_GitService.shortenSha(this.sha)}documentUri(e={}){return e.useVersionedPath&&void 0!==this.versionedPath?gitUri_GitUri.file(this.versionedPath):"file"!==this.scheme?this:gitUri_GitUri.file(this.fsPath)}equals(e){return!!c.equals(this,e)&&this.sha===(e instanceof gitUri_GitUri?e.sha:void 0)}getDirectory(e){return gitUri_GitUri.getDirectory(this.repoPath?G.relative(this.repoPath,this.fsPath):this.fsPath,e)}getFilename(e){return G.basename(this.repoPath?G.relative(this.repoPath,this.fsPath):this.fsPath,e)}getFormattedPath(e={}){const{relativeTo:t=this.repoPath,separator:i=De.pad(D.Dot,2,2),suffix:o=it}=e,s=gitUri_GitUri.getDirectory(this.fsPath,t);return`${G.basename(this.fsPath)}${o}${s?`${i}${s}`:it}`}getRelativePath(e){let t=this.repoPath?G.relative(this.repoPath,this.fsPath):this.fsPath;return void 0!==e&&(t=G.relative(e,t)),De.normalizePath(t)}toFileUri(){return gitUri_GitUri.file(this.fsPath)}static ensureValidUNCPath(e,t){if(t[0]===ot&&t[1]===ot){const i=t.indexOf(ot,2);-1===i?(e=t.substring(2),t=ot):(e=t.substring(2,i),t=t.substring(i)||ot)}return[e,t]}static file(e,t){const i=r.Uri.file(e);return container_Container.vsls.isMaybeGuest&&!1!==t?i.with({scheme:$.Vsls}):i}static fromCommit(e,t=!1){return t?new gitUri_GitUri(e.previousUri,{repoPath:e.repoPath,sha:e.previousSha}):new gitUri_GitUri(e.uri,e)}static fromFile(e,t,i,o=!1){const s=gitUri_GitUri.resolveToUri("string"==typeof e?e:o&&e.originalFileName||e.fileName,t);return new gitUri_GitUri(s,void 0===i?t:{repoPath:t,sha:i})}static fromRepoPath(e,t){return new gitUri_GitUri(gitUri_GitUri.file(e),void 0===t?e:{repoPath:e,sha:t})}static fromRevisionUri(e){return new gitUri_GitUri(e)}static async fromUri(e){if(e instanceof gitUri_GitUri)return e;if(!container_Container.git.isTrackable(e))return new gitUri_GitUri(e);if(e.scheme===$.GitLens)return new gitUri_GitUri(e);if(e.scheme===$.Git){const t=JSON.parse(e.query),i=await container_Container.git.getRepoPath(t.path);let o;switch(t.ref){case it:case"~":o=gitService_GitService.stagedUncommittedSha;break;case null:o=void 0;break;default:o=t.ref}return new gitUri_GitUri(e,{fileName:t.path,repoPath:i,sha:o})}return new gitUri_GitUri(e,await container_Container.git.getRepoPath(e))}static getDirectory(e,t){let i=G.dirname(e);return void 0!==t&&(i=G.relative(t,i)),(i=De.normalizePath(i))&&"."!==i?i:it}static getFormattedPath(e,t={}){const{relativeTo:i,separator:o=De.pad(D.Dot,2,2),suffix:s=it}=t;let n;if(e instanceof r.Uri){if(e instanceof gitUri_GitUri)return e.getFormattedPath(t);n=e.fsPath}else n=e;const a=gitUri_GitUri.getDirectory(n,i);return a?`${G.basename(n)}${s}${o}${a}`:`${G.basename(n)}${s}`}static getRelativePath(e,t,i){let o;if(e instanceof r.Uri){if(e instanceof gitUri_GitUri)return e.getRelativePath(t);o=e.fsPath}else o=e;let s=i?G.relative(i,o):o;return void 0!==t&&(s=G.relative(t,s)),De.normalizePath(s)}static git(e,t){const i=gitUri_GitUri.resolve(e,t);return r.Uri.parse(`git:${i}?${JSON.stringify({path:r.Uri.file(i).fsPath,ref:"~"})}`)}static resolve(e,t){const i=De.normalizePath(e);if(void 0===t)return i;const o=De.normalizePath(t);return null==i||0===i.length?o:i.startsWith(o)?i:De.normalizePath(G.join(o,i))}static resolveToUri(e,t){return gitUri_GitUri.file(this.resolve(e,t))}static toKey(e){return De.normalizePath("string"==typeof e?e:e.fsPath)}static toRevisionUri(e,t,i){let o,s,n;"string"==typeof e?(o="string"==typeof t?t:gitUri_GitUri.resolve(t.fileName,i),s=e,n=gitService_GitService.shortenSha(s)):(o=e.fsPath,i=e.repoPath,s=e.sha,n=e.shortSha),i=De.normalizePath(i);const a=G.basename(i),c=De.normalizePath(o,{addLeadingSlash:!0}),l={path:c,ref:s,repoPath:i};return r.Uri.parse(`${$.GitLens}:///${a}@${n}${c===ot?it:c}?${JSON.stringify(l)}`)}}var st;!function(e){e.getFormattedDirectory=function(e,t=!1,i){const o=gitUri_GitUri.getDirectory(e.fileName,i);return t&&"R"===e.status&&e.originalFileName?`${o} ${De.pad(D.ArrowLeft,1,1)} ${e.originalFileName}`:o},e.getFormattedPath=function(e,t={}){return gitUri_GitUri.getFormattedPath(e.fileName,t)},e.getRelativePath=function(e,t){return gitUri_GitUri.getRelativePath(e.fileName,t)};const t={"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",C:"icon-status-copied.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",T:"icon-status-modified.svg",U:"icon-status-conflict.svg",X:"icon-status-unknown.svg",B:"icon-status-unknown.svg"};e.getStatusIcon=function(e){return t[e]||t.X};const i={"!":"$(diff-ignored)","?":"$(diff-added)",A:"$(diff-added)",C:"$(diff-added)",D:"$(diff-removed)",M:"$(diff-modified)",R:"$(diff-renamed)",T:"$(diff-modified)",U:"$(alert)",X:"$(question)",B:"$(question)"};e.getStatusOcticon=function(e,t=D.Space.repeat(4)){return i[e]||t};const o={"!":"Ignored","?":"Untracked",A:"Added",C:"Copied",D:"Deleted",M:"Modified",R:"Renamed",T:"Modified",U:"Conflict",X:"Unknown",B:"Unknown"};e.getStatusText=function(e){return o[e]||o.X}}(st||(st={}));class statusFormatter_StatusFileFormatter extends formatter_Formatter{get directory(){const e=st.getFormattedDirectory(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.directory)}get file(){const e=G.basename(this._item.fileName);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){const e=st.getFormattedPath(this._item,{relativeTo:this._options.relativePath});return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get path(){const e=st.getRelativePath(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.path)}get status(){const e=st.getStatusText(this._item.status);return this._padOrTruncate(e,this._options.tokenOptions.status)}get working(){const e=this._item.commit,t=void 0===e?this._item:e.files[0];let i="";return i=void 0!==t.workingTreeStatus&&void 0!==t.indexStatus?`${D.Pencil}${D.Space}${D.SpaceThinnest}${D.Check}`:void 0!==t.workingTreeStatus?`${D.Pencil}${D.SpaceThin}${D.SpaceThinnest}${D.EnDash}${D.Space}`:void 0!==t.indexStatus?`${D.Space}${D.EnDash}${D.Space.repeat(2)}${D.Check}`:"",this._padOrTruncate(i,this._options.tokenOptions.working)}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}const rt=new Map,nt="00000000000000000000000000000000";var at;!function(e){e.Blame="blame",e.Branch="branch",e.File="file",e.Stash="stash",e.StashFile="stash-file"}(at||(at={}));const ct={dateFormat:void 0,dateStyle:void 0,reset:()=>{ct.dateStyle=io.get(io.name("defaultDateStyle").value),ct.dateFormat=io.get(io.name("defaultDateFormat").value)}};class commit_GitCommit{constructor(e,t,i,o,s,r,n,a,c,l,h){this.repoPath=t,this.sha=i,this.author=o,this.email=s,this.date=r,this.message=n,this.type=e,this._fileName=a||"",this.originalFileName=c,this._previousSha=l,this.previousFileName=h}get fileName(){return this.isFile?this._fileName:""}get formattedDate(){return ct.dateStyle===u.Absolute?this.formatDate(ct.dateFormat):this.fromNow()}get shortSha(){return void 0===this._shortSha&&(this._shortSha=git_Git.shortenSha(this.sha)),this._shortSha}get isFile(){return this.type===at.Blame||this.type===at.File||this.type===at.StashFile}get isStash(){return this.type===at.Stash||this.type===at.StashFile}get isStagedUncommitted(){return void 0===this._isStagedUncommitted&&(this._isStagedUncommitted=git_Git.isStagedUncommitted(this.sha)),this._isStagedUncommitted}get isUncommitted(){return void 0===this._isUncommitted&&(this._isUncommitted=git_Git.isUncommitted(this.sha)),this._isUncommitted}get previousFileShortSha(){return git_Git.shortenSha(this.previousFileSha)}get previousSha(){return this._previousSha}set previousSha(e){e!==this._previousSha&&(this._previousSha=e,this._resolvedPreviousFileSha=void 0)}get previousShortSha(){return this.previousSha&&git_Git.shortenSha(this.previousSha)}get previousUri(){return this.previousFileName?gitUri_GitUri.resolveToUri(this.previousFileName,this.repoPath):this.uri}get uri(){return gitUri_GitUri.resolveToUri(this.fileName,this.repoPath)}get workingUri(){return this.workingFileName?gitUri_GitUri.resolveToUri(this.workingFileName,this.repoPath):this.uri}formatDate(e){return null==e&&(e="MMMM Do, YYYY h:mma"),void 0===this._dateFormatter&&(this._dateFormatter=Q.toFormatter(this.date)),this._dateFormatter.format(e)}fromNow(){return void 0===this._dateFormatter&&(this._dateFormatter=Q.toFormatter(this.date)),this._dateFormatter.fromNow()}getFormattedPath(e={}){return gitUri_GitUri.getFormattedPath(this.fileName,e)}getGravatarUri(e,t=16){const i=null!=this.email&&0!==this.email.length?De.md5(this.email.trim().toLowerCase(),"hex"):nt,o=`${i}:${t}`;let s=rt.get(o);return void 0!==s?s:(s=r.Uri.parse(`https://www.gravatar.com/avatar/${i}.jpg?s=${t}&d=${e}`),rt.set(o,s),s)}getShortMessage(){return commitFormatter_CommitFormatter.fromTemplate("${message}",this,{truncateMessageAtNewLine:!0})}async resolvePreviousFileSha(){void 0===this._resolvedPreviousFileSha&&(this._resolvedPreviousFileSha=await container_Container.git.resolveReference(this.repoPath,this.previousFileSha,this.fileName?this.previousUri:void 0))}toGitUri(e=!1){return gitUri_GitUri.fromCommit(this,e)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}}class blameCommit_GitBlameCommit extends commit_GitCommit{constructor(e,t,i,o,s,r,n,a,c,l,h){super(at.Blame,e,t,i,o,s,r,n,a,c,l),this.lines=h}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:`${this.sha}^`}with(e){return new blameCommit_GitBlameCommit(this.repoPath,e.sha||this.sha,this.author,this.email,this.date,this.message,e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),this.getChangedValue(e.lines,e.sha||e.fileName?[]:this.lines)||[])}}class status_GitStatus{constructor(e,t,i,o,s,r){this.repoPath=e,this.branch=t,this.sha=i,this.files=o,this.state=s,this.upstream=r,this.detached=branch_GitBranch.isDetached(t),this.detached&&(this.branch=branch_GitBranch.formatDetached(this.sha))}get ref(){return this.detached?this.sha:this.branch}getDiffStatus(){if(void 0===this._diff&&(this._diff={added:0,deleted:0,changed:0},0!==this.files.length))for(const e of this.files)switch(e.status){case"A":case"?":this._diff.added++;break;case"D":this._diff.deleted++;break;default:this._diff.changed++}return this._diff}getFormattedDiffStatus(e={}){const{added:t,changed:i,deleted:o}=this.getDiffStatus();if(0===t&&0===i&&0===o)return e.empty||"";const{compact:s,expand:r,prefix:n="",separator:a=" ",suffix:c=""}=e;if(r){let e="";return t&&(e+=`${De.pluralize("file",t)} added`),i&&(e+=`${0===e.length?"":a}${De.pluralize("file",i)} changed`),o&&(e+=`${0===e.length?"":a}${De.pluralize("file",o)} deleted`),`${n}${e}${c}`}let l="";return s?(0!==t&&(l+=`+${t}`),0!==i&&(l+=`${0===l.length?"":a}~${i}`),0!==o&&(l+=`${0===l.length?"":a}-${o}`)):l+=`+${t}${a}~${i}${a}-${o}`,`${n}${l}${c}`}getUpstreamStatus(e){return status_GitStatus.getUpstreamStatus(this.upstream,this.state,e)}static getUpstreamStatus(e,t,i={}){if(void 0===e||0===t.behind&&0===t.ahead)return i.empty||"";const{expand:o,prefix:s="",separator:r=" ",suffix:n=""}=i;if(o){let e="";return t.behind&&(e+=`${De.pluralize("commit",t.behind)} behind`),t.ahead&&(e+=`${0===e.length?"":r}${De.pluralize("commit",t.ahead)} ahead`),`${s}${e}${n}`}return`${s}${t.behind}${D.ArrowDown}${r}${t.ahead}${D.ArrowUp}${n}`}}class status_GitStatusFile{constructor(e,t,i,o,s){this.repoPath=e,this.indexStatus=t,this.workingTreeStatus=i,this.fileName=o,this.originalFileName=s}get status(){return this.indexStatus||this.workingTreeStatus||"?"}get staged(){return void 0!==this.indexStatus}get uri(){return gitUri_GitUri.resolveToUri(this.fileName,this.repoPath)}getFormattedDirectory(e=!1){return st.getFormattedDirectory(this,e)}getFormattedPath(e={}){return st.getFormattedPath(this,e)}getOcticon(){return st.getStatusOcticon(this.status)}getStatusText(e){return st.getStatusText(this.status)}with(e){return new status_GitStatusFile(this.repoPath,this.getChangedValue(e.indexStatus,this.indexStatus),this.getChangedValue(e.workTreeStatus,this.workingTreeStatus),e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName))}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}}class branch_GitBranch{constructor(e,t,i=!1,o,s,r=0,n=0,a=!1){this.repoPath=e,this.current=i,this.sha=o,t.startsWith("remotes/")?(t=t.substring(8),this.remote=!0):this.remote=!1,this.detached=a||!!this.current&&branch_GitBranch.isDetached(t),this.detached?this.name=branch_GitBranch.formatDetached(this.sha):this.name=t,this.tracking=null==s||0===s.length?void 0:s,this.state={ahead:r,behind:n}}get ref(){return this.detached?this.sha:this.name}getBasename(){if(void 0===this._basename){const e=this.getName(),t=e.lastIndexOf("/");this._basename=-1!==t?e.substring(t+1):e}return this._basename}getName(){return void 0===this._name&&(this._name=this.remote?this.name.substring(this.name.indexOf("/")+1):this.name),this._name}getRemote(){return this.remote?branch_GitBranch.getRemote(this.name):void 0!==this.tracking?branch_GitBranch.getRemote(this.tracking):void 0}getTrackingStatus(e){return status_GitStatus.getUpstreamStatus(this.tracking,this.state,e)}static getRemote(e){return e.substring(0,e.indexOf("/"))}static formatDetached(e){return`(${git_Git.shortenSha(e)}...)`}static isDetached(e){return null!==e.match(/\s/)||null!==e.match(/\(detached\)/)}}const lt=/^(.*?)\t(.*?)(?:\t(.*?))?$/gm,ht=/^\s*(\d+)\sfiles? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/,dt=/^@@ -([\d]+),([\d]+) [+]([\d]+),([\d]+) @@([\s\S]*?)(?=^@@)/gm;class diffParser_GitDiffParser{static parse(e,t=!1){if(!e)return;const i=[];let o,s,r,n=null;do{if(null==(n=dt.exec(`${e}\n@@`)))break;o=(" "+n[5]).substr(1),s=parseInt(n[3],10),r=parseInt(n[1],10),i.push(new diff_GitDiffChunk(o,{start:s,end:s+parseInt(n[4],10)},{start:r,end:r+parseInt(n[2],10)}))}while(null!=n);if(!i.length)return;return{diff:t?e:void 0,chunks:i}}static parseChunk(e){const t=Ee.skip(De.lines(e),1),i=[],o=[];let s=0;for(const e of t)switch(e[0]){case"+":i.push({line:` ${e.substring(1)}`,state:"added"}),s>0?s--:o.push(void 0);break;case"-":s++,o.push({line:` ${e.substring(1)}`,state:"removed"});break;default:for(;s>0;)s--,i.push(void 0);i.push({line:e,state:"unchanged"}),o.push({line:e,state:"unchanged"})}const r=[];let n=void 0,a=void 0;for(let e=0;e<i.length;e++)if(void 0!==(a=i[e]))n={line:a.line,state:a.state,previous:[o[e]]},r.push(n);else{if(void 0===n)continue;if(void 0===n.previous){n.previous=[o[e]];continue}n.previous.push(o[e])}return r}static parseNameStatus(e,t){if(!e)return;const i=[];let o=null;do{if(null==(o=lt.exec(e)))break;const s=(" "+o[1]).substr(1);i.push({repoPath:t,status:"."!==s[0]?s[0].trim():"?",indexStatus:void 0,workingTreeStatus:void 0,fileName:(" "+o[2]).substr(1),originalFileName:void 0===o[3]?void 0:(" "+o[3]).substr(1)})}while(null!=o);return i.length?i:void 0}static parseShortStat(e){if(!e)return;const t=ht.exec(e);if(null==t)return;const i=t[1],o=t[2],s=t[3];return{files:null==i?0:parseInt(i,10),insertions:null==o?0:parseInt(o,10),deletions:null==s?0:parseInt(s,10)}}}class diff_GitDiffChunk{constructor(e,t,i){this.currentPosition=t,this.previousPosition=i,this._chunk=e}get lines(){return void 0===this._lines&&(this._lines=diffParser_GitDiffParser.parseChunk(this._chunk),this._chunk=void 0),this._lines}}class logCommit_GitLogCommit extends commit_GitCommit{constructor(e,t,i,o,s,r,n,a,c,l,h,d,m,u,g){super(e,t,i,o,s,r,a,c,d,m,u),this.committedDate=n,this.files=l,this.status=h,this.parentShas=g}get isMerge(){return this.parentShas&&this.parentShas.length>1}get nextShortSha(){return this.nextSha&&git_Git.shortenSha(this.nextSha)}get nextUri(){return this.nextFileName?gitUri_GitUri.resolveToUri(this.nextFileName,this.repoPath):this.uri}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:this.isFile&&this.previousSha?this.previousSha:`${this.sha}^`}getDiffStatus(){if(void 0===this._diff&&(this._diff={added:0,deleted:0,changed:0},0!==this.files.length))for(const e of this.files)switch(e.status){case"A":case"?":this._diff.added++;break;case"D":this._diff.deleted++;break;default:this._diff.changed++}return this._diff}getFormattedDiffStatus(e={}){const{added:t,changed:i,deleted:o}=this.getDiffStatus();if(0===t&&0===i&&0===o)return e.empty||"";const{compact:s,expand:r,prefix:n="",separator:a=" ",suffix:c=""}=e;if(r){let e="";return t&&(e+=`${De.pluralize("file",t)} added`),i&&(e+=`${0===e.length?"":a}${De.pluralize("file",i)} changed`),o&&(e+=`${0===e.length?"":a}${De.pluralize("file",o)} deleted`),`${n}${e}${c}`}return`${n}${s&&0===t?"":`+${t}${a}`}${s&&0===i?"":`~${i}${a}`}${s&&0===o?"":`-${o}`}${c}`}toFileCommit(e){let t,i;if("string"==typeof e){const i=De.normalizePath(G.relative(this.repoPath,e));if(void 0===(t=this.files.find(e=>e.fileName===i)))return}else t=e;this.type===at.Stash&&"?"===t.status&&(i=`${this.sha}^3`);const o=this.isFile?this.previousSha:`${this.sha}^`;return this.with({type:this.isStash?at.StashFile:at.File,sha:i,fileName:t.fileName,originalFileName:t.originalFileName,previousSha:o,previousFileName:t.originalFileName||t.fileName,status:t.status,files:[t]})}with(e){return new logCommit_GitLogCommit(e.type||this.type,this.repoPath,this.getChangedValue(e.sha,this.sha),e.author||this.author,e.email||this.email,e.date||this.date,e.committedDate||this.committedDate,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.files,this.files)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),void 0)}}var mt,ut;!function(e){e.Fetch="fetch",e.Push="push"}(mt||(mt={}));class GitRemote{constructor(e,t,i,o,s,r,n){this.repoPath=e,this.name=t,this.scheme=i,this.domain=o,this.path=s,this.provider=r,this.types=n}}function gt(e){switch(e.type){case ut.Branch:return"Branch";case ut.Branches:return"Branches";case ut.Commit:return"Commit";case ut.File:return"File";case ut.Repo:return"Repository";case ut.Revision:return"Revision";default:return""}}!function(e){e.Branch="branch",e.Branches="branches",e.Commit="commit",e.File="file",e.Repo="repo",e.Revision="revision"}(ut||(ut={}));class provider_RemoteProvider{constructor(e,t,i="https",o,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=o}get icon(){return"remote"}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}enrichMessage(e){return e}formatName(e){return void 0!==this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){const e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}async openUrl(e){if(void 0!==e)return r.commands.executeCommand(x.Open,r.Uri.parse(e))}async copy(e){const t=this.url(e);if(void 0!==t)try{return void await r.env.clipboard.writeText(t)}catch(e){return e.message.includes("Couldn't find the required `xsel` binary")?void r.window.showErrorMessage("Unable to copy remote url, xsel is not installed. Please install it via your package manager, e.g. `sudo apt install xsel`"):(logger_Logger.error(e,"CopyRemoteUrlToClipboardCommand"),messages_Messages.showGenericErrorMessage("Unable to copy remote url"))}}open(e){return this.openUrl(this.url(e))}url(e){switch(e.type){case ut.Branch:return this.getUrlForBranch(e.branch);case ut.Branches:return this.getUrlForBranches();case ut.Commit:return this.getUrlForCommit(e.sha);case ut.File:return this.getUrlForFile(e.fileName,e.branch,void 0,e.range);case ut.Repo:return this.getUrlForRepository();case ut.Revision:return this.getUrlForFile(e.fileName,e.branch,e.sha,e.range)}}}const pt=/(^|\s)(#([0-9]+))\b/gi,ft=/\/_git\/?/i,vt=/^ssh\./i,_t=/^\/?v\d\//i;class azure_devops_AzureDevOpsRemote extends provider_RemoteProvider{constructor(e,t,i,o){super(e=e.replace(vt,""),t=t.replace(_t,""),i,o)}get icon(){return"vsts"}get name(){return"Azure DevOps"}enrichMessage(e){const t=this.baseUrl.replace(ft,"/");return e.replace(pt,`$1[$2](${t}/_workitems/edit/$3 "Open Work Item $2")`)}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/?version=GB${e}&_a=history`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`&line=${o.start.line}`:`&line=${o.start.line}&lineEnd=${o.end.line}`),i?`${this.baseUrl}/commit/${i}/?_a=contents&path=%2F${e}${s}`:t?`${this.baseUrl}/?path=%2F${e}&version=GB${t}&_a=contents${s}`:`${this.baseUrl}?path=%2F${e}${s}`}}const wt=/(^|\s)(issue #([0-9]+))\b/gi,bt=/(^|\s)(pull request #([0-9]+))\b/gi;class bitbucket_BitbucketRemote extends provider_RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get icon(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}enrichMessage(e){return e.replace(wt,`$1[$2](${this.baseUrl}/issues/$3 "Open Issue $2")`).replace(bt,`$1[$2](${this.baseUrl}/pull-requests/$3 "Open PR $2")`)}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/branch/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${e}-${o.start.line}`:`#${e}-${o.start.line}:${o.end.line}`),i?`${this.baseUrl}/src/${i}/${e}${s}`:t?`${this.baseUrl}/src/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}const Ct=/(^|\s)(issue #([0-9]+))\b/gi,yt=/(^|\s)(pull request #([0-9]+))\b/gi;class bitbucket_server_BitbucketServerRemote extends provider_RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get baseUrl(){const[e,t]=this.splitPath();return`https://${this.domain}/projects/${e}/repos/${t}`}get icon(){return"bitbucket"}get name(){return this.formatName("Bitbucket Server")}enrichMessage(e){return e.replace(Ct,`$1[$2](${this.baseUrl}/issues/$3 "Open Issue $2")`).replace(yt,`$1[$2](${this.baseUrl}/pull-requests/$3 "Open PR $2")`)}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits?until=${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${o.start.line}`:`#${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/browse/${e}?at=${i}${s}`:t?`${this.baseUrl}/browse/${e}?at=${t}${s}`:`${this.baseUrl}/browse/${e}${s}`}}class custom_CustomRemote extends provider_RemoteProvider{constructor(e,t,i,o,s){super(e,t,o,s,!0),this.urls=i}get name(){return this.formatName("Custom")}getUrlForRepository(){return De.interpolate(this.urls.repository,this.getContext())}getUrlForBranches(){return De.interpolate(this.urls.branches,this.getContext())}getUrlForBranch(e){return De.interpolate(this.urls.branch,this.getContext({branch:e}))}getUrlForCommit(e){return De.interpolate(this.urls.commit,this.getContext({id:e}))}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?De.interpolate(this.urls.fileLine,{line:o.start.line}):De.interpolate(this.urls.fileRange,{start:o.start.line,end:o.end.line})),i?De.interpolate(this.urls.fileInCommit,this.getContext({id:i,file:e,line:s})):t?De.interpolate(this.urls.fileInBranch,this.getContext({branch:t,file:e,line:s})):De.interpolate(this.urls.file,this.getContext({file:e,line:s}))}getContext(e){const[t,i]=this.splitPath();return Object.assign({repo:this.path,repoBase:t,repoPath:i},e||{})}}const kt=/(^|\s)((?:#|gh-)([0-9]+))\b/gi,St=/\b((\w+-?\w+(?!-)\/\w+-?\w+(?!-))#([0-9]+))\b/g;class github_GitHubRemote extends provider_RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get icon(){return"github"}get name(){return this.formatName("GitHub")}enrichMessage(e){return e.replace(kt,`$1[$2](${this.baseUrl}/issues/$3 "Open Issue $2")`).replace(St,`[$1](${this.protocol}://${this.domain}/$2/issues/$3 "Open Issue #$3 from $2")`)}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-L${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}const Pt=/(^|\s)(#([0-9]+))\b/gi;class gitlab_GitLabRemote extends provider_RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get icon(){return"gitlab"}get name(){return this.formatName("GitLab")}enrichMessage(e){return e.replace(Pt,`$1[$2](${this.baseUrl}/issues/$3 "Open Issue $2")`)}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}const xt=[["bitbucket.org",(e,t)=>new bitbucket_BitbucketRemote(e,t)],["github.com",(e,t)=>new github_GitHubRemote(e,t)],["gitlab.com",(e,t)=>new gitlab_GitLabRemote(e,t)],[/\bdev\.azure\.com$/i,(e,t)=>new azure_devops_AzureDevOpsRemote(e,t)],[/\bbitbucket\b/i,(e,t)=>new bitbucket_server_BitbucketServerRemote(e,t)],[/\bgitlab\b/i,(e,t)=>new gitlab_GitLabRemote(e,t)],[/\bvisualstudio\.com$/i,(e,t)=>new azure_devops_AzureDevOpsRemote(e,t)]];class factory_RemoteProviderFactory{static factory(e){return(t,i)=>this.create(e,t,i)}static create(e,t,i){try{const o=t.toLowerCase();for(const[s,r]of e)if("string"==typeof s&&s===o||"string"!=typeof s&&s.test(o))return r(t,i);return}catch(e){return void logger_Logger.error(e,"RemoteProviderFactory")}}static loadProviders(e){const t=[];if(null!=e&&e.length>0)for(const i of e){const e=this.getCustomProvider(i);void 0!==e&&t.push([i.domain.toLowerCase(),e])}return t.push(...xt),t}static getCustomProvider(e){switch(e.type){case m.Bitbucket:return(t,i)=>new bitbucket_BitbucketRemote(t,i,e.protocol,e.name,!0);case m.BitbucketServer:return(t,i)=>new bitbucket_server_BitbucketServerRemote(t,i,e.protocol,e.name,!0);case m.Custom:return(t,i)=>new custom_CustomRemote(t,i,e.urls,e.protocol,e.name);case m.GitHub:return(t,i)=>new github_GitHubRemote(t,i,e.protocol,e.name,!0);case m.GitLab:return(t,i)=>new gitlab_GitLabRemote(t,i,e.protocol,e.name,!0)}}}var Ft;!function(e){e.Config="config",e.Closed="closed",e.Remotes="remotes",e.Repository="repository",e.Stashes="stashes",e.Tags="tags"}(Ft||(Ft={}));class RepositoryChangeEvent{constructor(e){this.repository=e,this.changes=[]}changed(e,t=!1){return t?1===this.changes.length&&this.changes[0]===e:this.changes.includes(e)}}class repository_Repository{constructor(e,t,i,o,s,n=!1){if(this.folder=e,this.path=t,this.root=i,this.onAnyRepositoryChanged=o,this._onDidChange=new r.EventEmitter,this._onDidChangeFileSystem=new r.EventEmitter,this._fireChangeDebounced=void 0,this._fireFileSystemChangeDebounced=void 0,this._fsWatchCounter=0,this._pendingChanges={},this._closed=!1,i)this.formattedName=e.name;else{const i=G.relative(e.uri.fsPath,t);this.formattedName=i?`${e.name} (${i})`:e.name}this.index=e.index,this.name=e.name,this.normalizedPath=(this.path.endsWith("/")?this.path:`${this.path}/`).toLowerCase(),this._suspended=s,this._closed=n;const a=r.workspace.createFileSystemWatcher(new r.RelativePattern(e,"{**/.git/config,**/.git/index,**/.git/HEAD,**/.git/refs/stash,**/.git/refs/heads/**,**/.git/refs/remotes/**,**/.git/refs/tags/**,**/.gitignore}"));this._disposable=r.Disposable.from(a,a.onDidChange(this.onRepositoryChanged,this),a.onDidCreate(this.onRepositoryChanged,this),a.onDidDelete(this.onRepositoryChanged,this),io.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(io.initializingChangeEvent)}get onDidChange(){return this._onDidChange.event}get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}dispose(){this.stopWatchingFileSystem(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=io.name("remotes").value;io.changed(e,t,this.folder.uri)&&(this._providers=factory_RemoteProviderFactory.loadProviders(io.get(t,this.folder.uri)),io.initializing(e)||(this._remotes=void 0,this.fireChange(Ft.Remotes)))}onFileSystemChanged(e){/\.git(?:\/|\\|$)/.test(e.fsPath)||this.fireFileSystemChange(e)}onRepositoryChanged(e){if(void 0!==e&&e.path.endsWith("refs/stash"))this.fireChange(Ft.Stashes);else{if(this._branch=void 0,void 0!==e&&e.path.endsWith("refs/remotes"))return this._remotes=void 0,void this.fireChange(Ft.Remotes);if(void 0!==e&&e.path.endsWith("refs/tags"))this.fireChange(Ft.Tags);else{if(void 0!==e&&e.path.endsWith("config"))return this._remotes=void 0,void this.fireChange(Ft.Config,Ft.Remotes);this.onAnyRepositoryChanged(this,Ft.Repository),this.fireChange(Ft.Repository)}}}get closed(){return this._closed}set closed(e){const t=this._closed!==e;this._closed=e,t&&(this.onAnyRepositoryChanged(this,Ft.Closed),this.fireChange(Ft.Closed))}containsUri(e){return e instanceof gitUri_GitUri&&(e=void 0!==e.repoPath?gitUri_GitUri.file(e.repoPath):e.documentUri()),this.folder===r.workspace.getWorkspaceFolder(e)}async fetch(e={}){const t=Object.assign({progress:!0},e),{progress:i}=t,s=o(t,["progress"]);if(!i)return this.fetchCore(s);await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Fetching ${s.remote?`${s.remote} of `:""}${this.formattedName}...`,cancellable:!1},()=>this.fetchCore(s))}async fetchCore(e={}){await container_Container.git.fetch(this.path,e.remote),this.fireChange(Ft.Repository)}getBranch(){return void 0===this._branch&&(this._branch=container_Container.git.getBranch(this.path)),this._branch}getBranches(){return container_Container.git.getBranches(this.path)}getChangedFilesCount(e){return container_Container.git.getChangedFilesCount(this.path,e)}async getLastFetched(){return!await this.hasRemotes()||container_Container.vsls.isMaybeGuest?0:new Promise((e,t)=>We.stat(G.join(this.path,".git/FETCH_HEAD"),(t,i)=>e(t?0:i.mtime.getTime())))}getRemotes(){if(void 0===this._remotes){if(void 0===this._providers){const e=io.get(io.name("remotes").value,this.folder.uri);this._providers=factory_RemoteProviderFactory.loadProviders(e)}this._remotes=container_Container.git.getRemotesCore(this.path,this._providers)}return this._remotes}getStashList(){return container_Container.git.getStashList(this.path)}getStatus(){return container_Container.git.getStatusForRepo(this.path)}getTags(e){return container_Container.git.getTags(this.path,e)}async hasRemotes(){const e=await this.getRemotes();return void 0!==e&&e.length>0}async hasTrackingBranch(){const e=await this.getBranch();return void 0!==e&&void 0!==e.tracking}async pull(e={}){const{progress:t}=Object.assign({progress:!0},e);if(!t)return this.pullCore();await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Pulling ${this.formattedName}...`,cancellable:!1},()=>this.pullCore())}async pullCore(){await r.commands.executeCommand("git.pull",this.path),this.fireChange(Ft.Repository)}async push(e={}){const{force:t,progress:i}=Object.assign({progress:!0},e);if(!i)return this.pushCore(t);await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Pushing ${this.formattedName}...`,cancellable:!1},()=>this.pushCore(t))}async pushCore(e=!1){await r.commands.executeCommand(e?"git.pushForce":"git.push",this.path),this.fireChange(Ft.Repository)}resume(){this._suspended&&(this._suspended=!1,void 0!==this._pendingChanges.repo&&this._fireChangeDebounced(this._pendingChanges.repo),void 0!==this._pendingChanges.fs&&this._fireFileSystemChangeDebounced(this._pendingChanges.fs))}startWatchingFileSystem(){if(this._fsWatchCounter++,void 0!==this._fsWatcherDisposable)return;const e=r.workspace.createFileSystemWatcher(new r.RelativePattern(this.folder,"**"));this._fsWatcherDisposable=r.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this))}stopWatchingFileSystem(){void 0!==this._fsWatcherDisposable&&(--this._fsWatchCounter>0||(this._fsWatcherDisposable.dispose(),this._fsWatcherDisposable=void 0))}suspend(){this._suspended=!0}fireChange(...e){void 0===this._fireChangeDebounced&&(this._fireChangeDebounced=xe.debounce(this.fireChangeCore,250)),void 0===this._pendingChanges.repo&&(this._pendingChanges.repo=new RepositoryChangeEvent(this));const t=this._pendingChanges.repo;for(const i of e)t.changes.includes(i)||t.changes.push(i);this._suspended||this._fireChangeDebounced(t)}fireChangeCore(e){this._pendingChanges.repo=void 0,this._onDidChange.fire(e)}fireFileSystemChange(e){void 0===this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=xe.debounce(this.fireFileSystemChangeCore,2500)),void 0===this._pendingChanges.fs&&(this._pendingChanges.fs={repository:this,uris:[]});const t=this._pendingChanges.fs;t.uris.push(e),this._suspended||this._fireFileSystemChangeDebounced(t)}fireFileSystemChangeCore(e){this._pendingChanges.fs=void 0,this._onDidChangeFileSystem.fire(e)}}s([$e(),Oe()],repository_Repository.prototype,"fetch",null),s([$e(),Oe()],repository_Repository.prototype,"pull",null),s([$e(),Oe()],repository_Repository.prototype,"push",null);class stashCommit_GitStashCommit extends logCommit_GitLogCommit{constructor(e,t,i,o,s,r,n,a,c,l,h,d,m){super(e,i,o,"You",void 0,s,r,n,a,c,l,h,void 0===d?`${o}^`:d,m),this.stashName=t}get shortSha(){return this.stashName}with(e){return new stashCommit_GitStashCommit(e.type||this.type,this.stashName,this.repoPath,this.getChangedValue(e.sha,this.sha),e.date||this.date,e.committedDate||this.committedDate,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.files,this.files)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName))}}class GitTag{constructor(e,t,i,o){this.repoPath=e,this.name=t,this.sha=i,this.annotation=o}get ref(){return this.name}getBasename(){if(void 0===this._basename){const e=this.name.lastIndexOf("/");this._basename=-1!==e?this.name.substring(e+1):this.name}return this._basename}}class blameParser_GitBlameParser{static parse(e,t,i,o){if(!e)return;const s=new Map,r=new Map,n=[];let a,c,l=t&&i,h=void 0,d=!0;for(a of De.lines(e))if(!((c=a.split(" ")).length<2))if(void 0!==h)switch(c[0]){case"author":git_Git.isUncommitted(h.sha)?h.author="You":h.author=c.slice(1).join(" ").trim();break;case"author-mail":if(git_Git.isUncommitted(h.sha)){h.authorEmail=void 0!==o?o.email:void 0;continue}h.authorEmail=c.slice(1).join(" ").trim();const e=h.authorEmail.indexOf("<");if(e>=0){const t=h.authorEmail.indexOf(">",e);h.authorEmail=t>e?h.authorEmail.substring(e+1,t):h.authorEmail.substring(e+1)}break;case"author-time":h.authorDate=c[1];break;case"author-tz":h.authorTimeZone=c[1];break;case"summary":h.summary=c.slice(1).join(" ").trim();break;case"previous":h.previousSha=c[1],h.previousFileName=c.slice(2).join(" ");break;case"filename":h.fileName=c.slice(1).join(" "),d&&void 0===t?(t=De.normalizePath(i.replace(i.startsWith("/")?`/${h.fileName}`:h.fileName,"")),l=De.normalizePath(G.relative(t,i))):l=h.fileName,d=!1,blameParser_GitBlameParser.parseEntry(h,t,l,r,s,n,o),h=void 0}else h={sha:c[0],originalLine:parseInt(c[1],10)-1,line:parseInt(c[2],10)-1,lineCount:parseInt(c[3],10)};for(const[,e]of r){if(void 0===e.author)return;const t=s.get(e.author);if(void 0===t)return;t.lineCount+=e.lines.length}return{repoPath:t,authors:new Map([...s.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:r,lines:n}}static parseEntry(e,t,i,o,s,r,n){let a=o.get(e.sha);if(void 0===a){if(void 0!==e.author){void 0===n||void 0===n.name&&void 0===n.email||void 0!==n.name&&n.name!==e.author||void 0!==n.email&&n.email!==e.authorEmail||(e.author="You");let t=s.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},s.set(e.author,t))}a=new blameCommit_GitBlameCommit(t,e.sha,e.author,e.authorEmail,new Date(1e3*e.authorDate),e.summary,i,i!==e.fileName?e.fileName:void 0,e.previousSha,e.previousSha&&e.previousFileName,[]),o.set(e.sha,a)}for(let t=0,i=e.lineCount;t<i;t++){const i={sha:e.sha,line:e.line+t,originalLine:e.originalLine+t};a.previousSha&&(i.previousSha=a.previousSha),a.lines.push(i),r[i.line]=i}}}const $t=/^(\*?)\s+(.+?)\s+([0-9,a-f]+)\s+(?:\[(.*?\/.*?)(?:\:\s(.*)\]|\]))?/gm,Dt=/^(?:ahead\s([0-9]+))?[,\s]*(?:behind\s([0-9]+))?/;class branchParser_GitBranchParser{static parse(e,t){if(!e)return;const i=[];let o,s,r,n,a,c,l,h=null;do{if(null==(h=$t.exec(e)))break;[,r,n,a,l,c]=h,[o,s]=this.parseState(c),i.push(new branch_GitBranch(t,(" "+n).substr(1),"*"===r,void 0===a?void 0:(" "+a).substr(1),void 0===l?void 0:(" "+l).substr(1),o,s))}while(null!=h);return i.length?i:void 0}static parseState(e){if(null==e)return[0,0];const t=Dt.exec(e);if(null==t)return[0,0];const i=parseInt(t[1],10),o=parseInt(t[2],10);return[isNaN(i)?0:i,isNaN(o)?0:o]}}const Tt=/diff --git a\/(.*) b\/(.*)/,Nt={};class logParser_GitLogParser{static parse(e,t,i,o,s,r,n,a,c){if(!e)return;let l,h,d=void 0,m=Nt,u=void 0,g=0,p=!0;const f=De.lines(e+"</f>");let v=f.next();if(v.done)return;void 0!==i&&(i=De.normalizePath(i));const _=new Map,w=new Map;let b=n;for(;!((v=f.next()).done||(u=v.value,a&&n&&g>=n));)switch(h=u.charCodeAt(1)){case 114:m={ref:u.substring(4)};break;case 97:git_Git.isUncommitted(m.ref)?m.author="You":m.author=u.substring(4);break;case 101:m.email=u.substring(4);break;case 100:m.date=u.substring(4);break;case 99:m.committedDate=u.substring(4);break;case 112:m.parentShas=u.substring(4).split(" ");break;case 115:for(;!(v=f.next()).done&&"</s>"!==(u=v.value);)void 0===m.summary?m.summary=u:m.summary+=`\n${u}`;null!=m.summary&&10===m.summary.charCodeAt(m.summary.length-1)&&(m.summary=m.summary.slice(0,-1));break;case 102:if((v=f.next()).done||"</f>"===v.value)break;for(;!(v=f.next()).done&&"</f>"!==(u=v.value);)if(!u.startsWith("warning:"))if(t===at.Branch){const e={status:u[0],fileName:u.substring(1),originalFileName:void 0};this.parseFileName(e),e.fileName&&(void 0===m.files&&(m.files=[]),m.files.push(e))}else{if(u.startsWith("diff")){const e=Tt.exec(u);if(null!=e){m.fileName=e[1];const t=e[2];m.fileName!==t?(m.originalFileName=t,m.status="R"):m.status="M"}for(;!(v=f.next()).done&&"</f>"!==v.value;);break}m.status=u[0],m.fileName=u.substring(1),this.parseFileName(m)}void 0!==m.files&&(m.fileName=E.filterMap(m.files,e=>e.fileName?e.fileName:void 0).join(", ")),p&&void 0===i&&t===at.File&&void 0!==o?(i=De.normalizePath(o.replace(o.startsWith("/")?`/${m.fileName}`:m.fileName,"")),l=De.normalizePath(G.relative(i,o))):l=m.fileName,p=!1;const e=w.get(m.ref);void 0===e?g++:b&&b--,d=logParser_GitLogParser.parseEntry(m,e,t,i,l,w,_,d,r)}return{repoPath:i,authors:_,commits:w,sha:s,count:g,maxCount:n,range:c,truncated:Boolean(b&&g>=b&&1!==b)}}static parseEntry(e,t,i,o,s,r,n,a,c){if(void 0===t){if(void 0!==e.author){void 0===c||void 0===c.name&&void 0===c.email||void 0!==c.name&&c.name!==e.author||void 0!==c.email&&c.email!==e.email||(e.author="You");let t=n.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},n.set(e.author,t))}const a=s!==e.fileName?e.fileName:void 0;i===at.File&&(e.files=[{status:e.status,fileName:s,originalFileName:a}]),t=new logCommit_GitLogCommit(i,o,e.ref,e.author,e.email,new Date(1e3*e.date),new Date(1e3*e.committedDate),void 0===e.summary?"":e.summary,s,e.files||[],e.status,a,`${e.ref}^`,void 0,e.parentShas),r.set(e.ref,t)}return void 0!==a&&(t.nextSha=t.sha!==a.sha?a.sha:a.nextSha,i===at.File&&(a.previousFileName=t.originalFileName||t.fileName,t.nextFileName=a.originalFileName||a.fileName)),t}static parseFileName(e){if(void 0===e.fileName)return;const t=e.fileName.indexOf("\t")+1;if(t>0){const i=e.fileName.indexOf("\t",t)+1;i>0?(e.originalFileName=e.fileName.substring(t,i-1),e.fileName=e.fileName.substring(i)):e.fileName=e.fileName.substring(t)}}}const Rt=/^(.*)\t(.*)\s\((.*)\)$/gm,Ut=/^(?:(git:\/\/)(.*?)\/|(https?:\/\/)(?:.*?@)?(.*?)\/|git@(.*):|(ssh:\/\/)(?:.*@)?(.*?)(?::.*?)?(?:\/|(?=~))|(?:.*?@)(.*?):)(.*)$/;class remoteParser_GitRemoteParser{static parse(e,t,i){if(!e)return[];const o=[],s=Object.create(null);let r=null;do{if(null==(r=Rt.exec(e)))break;const n=(" "+r[2]).substr(1),[a,c,l]=this.parseGitUrl(n),h=`${c}/${l}`;let d=s[h];void 0===d?(d=new GitRemote(t,(" "+r[1]).substr(1),a,c,l,i(c,l),[{url:n,type:(" "+r[3]).substr(1)}]),o.push(d),s[h]=d):d.types.push({url:n,type:(" "+r[3]).substr(1)})}while(null!=r);return o.length?o:[]}static parseGitUrl(e){const t=Ut.exec(e);return null==t?["","",""]:[t[1]||t[3]||t[6],t[2]||t[4]||t[5]||t[7]||t[8],t[9].replace(/\.git\/?$/,"")]}}const Lt={};class stashParser_GitStashParser{static parse(e,t){if(!e)return;const i=De.lines(e+"</f>");let o=i.next();if(o.done)return;void 0!==t&&(t=De.normalizePath(t));const s=new Map;let r,n=Lt,a=void 0;for(;!(o=i.next()).done;)switch(r=(a=o.value).charCodeAt(1)){case 114:n={ref:a.substring(4)};break;case 100:n.date=a.substring(4);break;case 99:n.committedDate=a.substring(4);break;case 108:n.stashName=a.substring(4);break;case 115:for(;!(o=i.next()).done&&"</s>"!==(a=o.value);)void 0===n.summary?n.summary=a:n.summary+=`\n${a}`;null!=n.summary&&10===n.summary.charCodeAt(n.summary.length-1)&&(n.summary=n.summary.slice(0,-1));break;case 102:if(!(o=i.next()).done&&"</f>"!==o.value){for(;!(o=i.next()).done&&"</f>"!==(a=o.value);){if(a.startsWith("warning:"))continue;const e={status:a[0],fileName:a.substring(1),originalFileName:void 0};logParser_GitLogParser.parseFileName(e),e.fileName&&(void 0===n.files&&(n.files=[]),n.files.push(e))}void 0!==n.files&&(n.fileNames=E.filterMap(n.files,e=>e.fileName?e.fileName:void 0).join(", "))}stashParser_GitStashParser.parseEntry(n,t,s)}return{repoPath:t,commits:s}}static parseEntry(e,t,i){let o=i.get(e.ref);void 0===o&&(o=new stashCommit_GitStashCommit(at.Stash,e.stashName,t,e.ref,new Date(1e3*e.date),new Date(1e3*e.committedDate),void 0===e.summary?"":e.summary,e.fileNames,e.files||[])),i.set(e.ref,o)}}const Bt=/(?:ahead ([0-9]+))/,Ot=/(?:behind ([0-9]+))/;class statusParser_GitStatusParser{static parse(e,t,i){if(!e)return;const o=e.split("\n").filter(Boolean);return 0!==o.length?i<2?this.parseV1(o,t):this.parseV2(o,t):void 0}static parseV1(e,t){let i;const o=[],s={ahead:0,behind:0};let r,n=-1;for(;++n<e.length;){const a=e[n];if(a.startsWith("##")){const e=a.split(" ");if([i,r]=e[1].split("..."),e.length>2){const t=e.slice(2).join(" "),i=Bt.exec(t);s.ahead=null==i?0:+i[1]||0;const o=Ot.exec(t);s.behind=null==o?0:+o[1]||0}}else{const e=a.substring(0,2),i=a.substring(3);if("R"===e[0]){const[s,r]=i.replace(/\"/g,"").split("->");o.push(this.parseStatusFile(t,e,r.trim(),s.trim()))}else o.push(this.parseStatusFile(t,e,i))}}return new status_GitStatus(De.normalizePath(t),i||"","",o,s,r)}static parseV2(e,t){let i;const o=[];let s;const r={ahead:0,behind:0};let n,a=-1;for(;++a<e.length;){const c=e[a];if(c.startsWith("#")){const e=c.split(" ");switch(e[1]){case"branch.oid":s=e[2];break;case"branch.head":i=e[2];break;case"branch.upstream":n=e[2];break;case"branch.ab":r.ahead=+e[2].substring(1),r.behind=+e[3].substring(1)}}else{const e=c.split(" ");switch(e[0][0]){case"1":o.push(this.parseStatusFile(t,e[1],e.slice(8).join(" ")));break;case"2":const i=e.slice(9).join(" ").split("\t");o.push(this.parseStatusFile(t,e[1],i[0],i[1]));break;case"u":o.push(this.parseStatusFile(t,e[1],e.slice(10).join(" ")));break;case"?":o.push(this.parseStatusFile(t," ?",e.slice(1).join(" ")))}}}return new status_GitStatus(De.normalizePath(t),i||"",s||"",o,r,n)}static parseStatusFile(e,t,i,o){let s="."!==t[0]?t[0].trim():void 0;null!=s&&0!==s.length||(s=void 0);let r=void 0;return t.length>1&&(null!=(r="."!==t[1]?t[1].trim():void 0)&&0!==r.length||(r=void 0)),new status_GitStatusFile(e,s,r,i,o)}}const Et=/([0-9,a-f]+)\srefs\/tags\/(.*)/gm,Gt=/^(.+?)(?:$|(?:\s+)(.*)$)/gm;class tagParser_GitTagParser{static parse(e,t){if(!e)return;const i=[];let o,s,r=null;do{if(null==(r=Gt.exec(e)))break;[,s,o]=r,i.push(new GitTag(t,(" "+s).substr(1),void 0,void 0===o?void 0:(" "+o).substr(1)))}while(null!=r);return i.length?i:void 0}static parseWithRef(e,t){if(!e)return;const i=[];let o,s,r=null;do{if(null==(r=Et.exec(e)))break;[,s,o]=r,i.push(new GitTag(t,(" "+o).substr(1),(" "+s).substr(1)))}while(null!=r);return i.length?i:void 0}}const It=/(?:.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+)/gm;class GitTreeParser{static parse(e){if(!e)return;const t=[];let i=null;do{if(null==(i=It.exec(e)))break;const[,o,s,r,n]=i;t.push({commitSha:void 0===s?"":(" "+s).substr(1),path:void 0===n?"":n,size:"-"===r?0:Number(r||0),type:void 0===o?"":(" "+o).substr(1)})}while(null!=i);return t.length?t:void 0}}const At="4b825dc642cb6eb9a060e54bf8d69288fbee4904",Mt=["blame","--root","--incremental"],Qt=["log","--name-status",`--format=${["%x3c%x2ff%x3e","%x3cr%x3e%x20%H","%x3ca%x3e%x20%aN","%x3ce%x3e%x20%aE","%x3cd%x3e%x20%at","%x3cc%x3e%x20%ct","%x3cp%x3e%x20%P","%x3cs%x3e","%B","%x3c%x2fs%x3e","%x3cf%x3e"].join("%n")}`],Wt=["stash","list","--name-status","-M",`--format=${["%x3c%x2ff%x3e","%x3cr%x3e%x20%H","%x3cd%x3e%x20%at","%x3cc%x3e%x20%ct","%x3cl%x3e%x20%gd","%x3cs%x3e","%B","%x3c%x2fs%x3e","%x3cf%x3e"].join("%n")}`],Ht={badRevision:/bad revision \'(.*?)\'/i,notAValidObjectName:/Not a valid object name/i},Vt={notARepository:/Not a git repository/i,outsideRepository:/is outside repository/i,noPath:/no such path/i,noCommits:/does not have any commits/i,notFound:/Path \'.*?\' does not exist in/i,foundButNotInRevision:/Path \'.*?\' exists on disk, but not in/i,headNotABranch:/HEAD does not point to a branch/i,noUpstream:/no upstream configured for branch \'(.*?)\'/i,unknownRevision:/ambiguous argument \'.*?\': unknown revision or path not in the working tree|not stored as a remote-tracking branch/i,mustRunInWorkTree:/this operation must be run in a work tree/i,patchWithConflicts:/Applied patch to \'.*?\' with conflicts/i,noRemoteRepositorySpecified:/No remote repository specified\./i,remoteConnectionError:/Could not read from remote repository/i,notAGitCommand:/\'.+\' is not a git command/i};var jt;!function(e){e.Ignore="ignore",e.Throw="throw"}(jt||(jt={}));const zt=new Map,qt=[],Yt={};async function Kt(e,...t){if(container_Container.vsls.isMaybeGuest)if(!0!==e.local){const i=await container_Container.vsls.guest();if(void 0!==i)return i.git(e,...t)}else e.cwd="";const i=process.hrtime(),{configs:s,correlationKey:r,errors:n}=e,a=o(e,["configs","correlationKey","errors"]),c=e.encoding||"utf8",l=Object.assign({},a,{encoding:"utf8"===c?"utf8":"buffer"===c?"buffer":"binary",env:Object.assign({},process.env,e.env||Yt,{GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"})}),h=`[${l.cwd}] git ${t.join(" ")}`,d=`${void 0!==r?`${r}:`:""}${h}`;let m,u,g=zt.get(d);void 0===g?(m=!1,t.splice(0,0,"-c","core.quotepath=false","-c","color.ui=false",...void 0!==s?s:qt),g=Ye(Zt.path,t,c,l),zt.set(d,g)):m=!0;try{return await g}catch(i){switch(u=i,n){case jt.Ignore:return u=void 0,"";case jt.Throw:throw i;default:return u=void 0,Xt(i,e,...t)}}finally{zt.delete(d);const e=`${De.getDurationMilliseconds(i)} ms ${m?"(await) ":""}`;logger_Logger.log(`${h} ${D.Dot} ${void 0!==u?`FAILED(${(u.message||"").trim().split("\n",1)[0]}) `:""}${e}`),logger_Logger.logGitCommand(`${h} ${D.Dot} ${void 0!==u?"FAILED ":""}${e}`,u)}}function Xt(e,t,...i){const o=e&&e.toString();if(o)for(const e of O.values(Vt))if(e.test(o))return logger_Logger.warn("git",...i,`  cwd='${t.cwd}'\n\n  `,o.replace(/\r?\n|\r/g," ")),"";const s=Ht.badRevision.exec(o);if(null!=s&&s){const[,e]=s;if(null!=e&&e.endsWith("^3"))return""}throw logger_Logger.error(e,"git",...i,`  cwd='${t.cwd}'\n\n  `),e}let Zt;class git_Git{static getEncoding(e){return void 0!==e&&Ve.encodingExists(e)?e:"utf8"}static getGitPath(){return Zt.path}static getGitVersion(){return Zt.version}static async setOrFindGitPath(e){const t=process.hrtime();Zt=await Ze(e),logger_Logger.log(`Git found: ${Zt.version} @ ${"git"===Zt.path?"PATH":Zt.path} ${D.Dot} ${De.getDurationMilliseconds(t)} ms`)}static isSha(e){return git_Git.shaRegex.test(e)}static isShaLike(e){return git_Git.shaLikeRegex.test(e)}static isStagedUncommitted(e){return!!e&&git_Git.stagedUncommittedRegex.test(e)}static isUncommitted(e){return!!e&&git_Git.uncommittedRegex.test(e)}static shortenSha(e,t={}){if(t=Object.assign({stagedUncommitted:"Index",uncommitted:"Working Tree",working:""},t),null==e||0===e.length)return t.working;if(git_Git.isUncommitted(e))return git_Git.isStagedUncommitted(e)?t.stagedUncommitted:t.uncommitted;const i=e.indexOf("^");if(i>5){const t=e.substring(i).substring(0,5);return`${e.substring(0,7-t.length)}${t}`}return e.substring(0,7)}static splitPath(e,t,i=!0){if(t){e=De.normalizePath(e);const i=((t=De.normalizePath(t)).endsWith("/")?t:`${t}/`).toLowerCase();e.toLowerCase().startsWith(i)&&(e=e.substring(i.length))}else t=De.normalizePath(i?G.dirname(e):t),e=De.normalizePath(i?G.basename(e):e);return[e,t]}static validateVersion(e,t){const[i,o]=Zt.version.split(".");return parseInt(i,10)>=e&&parseInt(o,10)>=t}static add(e,t){return Kt({cwd:e},"add","-A","--",t)}static apply(e,t,i={}){const o=["apply","--whitespace=warn"];return i.allowConflicts&&o.push("-3"),Kt({cwd:e,stdin:t},...o)}static async blame(e,t,i,o={}){const[s,r]=git_Git.splitPath(t,e),n=[...Mt];let a;return o.ignoreWhitespace&&n.push("-w"),null!=o.startLine&&null!=o.endLine&&n.push(`-L ${o.startLine},${o.endLine}`),null!=o.args&&n.push(...o.args),i&&(git_Git.isStagedUncommitted(i)?(n.push("--contents","-"),a=await git_Git.show(e,t,":")):n.push(i)),Kt({cwd:r,stdin:a},...n,"--",s)}static async blame_contents(e,t,i,o={}){const[s,r]=git_Git.splitPath(t,e),n=[...Mt];return o.ignoreWhitespace&&n.push("-w"),null!=o.startLine&&null!=o.endLine&&n.push(`-L ${o.startLine},${o.endLine}`),null!=o.args&&n.push(...o.args),n.push("--contents","-"),Kt({cwd:r,stdin:i,correlationKey:o.correlationKey},...n,"--",s)}static branch(e,t={all:!1}){const i=["branch","-vv","--abbrev=40"];return t.all&&i.push("-a"),Kt({cwd:e,configs:["-c","color.branch=false"]},...i)}static branch_contains(e,t,i={remote:!1}){const o=["branch","--contains"];return i.remote&&o.push("-r"),Kt({cwd:e,configs:["-c","color.branch=false"]},...o,t)}static async cat_validate(e,t){if(git_Git.isUncommitted(t))return!0;try{return await Kt({cwd:e,errors:jt.Throw},"cat-file","-t",t),!0}catch(e){return!1}}static async cat_file_validate(e,t,i){if(git_Git.isUncommitted(i))return i;try{return await Kt({cwd:e,errors:jt.Throw},"cat-file","-e",`${i}:./${t}`),i}catch(e){const t=e&&e.toString();return Ht.notAValidObjectName.test(t)?git_Git.deletedOrMissingSha:void 0}}static check_mailmap(e,t){return Kt({cwd:e,errors:jt.Ignore,local:!0},"check-mailmap",t)}static checkout(e,t,i){const o=["checkout",t,"--"];return i&&([i,e]=git_Git.splitPath(i,e),o.push(i)),Kt({cwd:e},...o)}static async config_get(e,t,i={}){const o=await Kt({cwd:t||"",errors:jt.Ignore,local:i.local},"config","--get",e);return 0===o.length?void 0:o.trim()}static async config_getRegex(e,t,i={}){const o=await Kt({cwd:t||"",errors:jt.Ignore,local:i.local},"config","--get-regex",e);return 0===o.length?void 0:o.trim()}static async diff(e,t,i,o,s={}){const r=["diff","-M","--no-ext-diff","--minimal"];s.filter&&r.push(`--diff-filter=${s.filter}`),i&&(i.endsWith("^3^")&&(i=At),r.push(git_Git.isStagedUncommitted(i)?"--staged":i)),o&&r.push(git_Git.isStagedUncommitted(o)?"--staged":o);const n="utf8"===s.encoding?"utf8":"binary";try{return await Kt({cwd:e,configs:["-c","color.diff=false"],encoding:n},...r,"--",t)}catch(r){const n=Ht.badRevision.exec(r.message);if(null!==n){const[,r]=n;if(r===i&&null!=r&&r.endsWith("^"))return git_Git.diff(e,t,At,o,s)}throw r}}static diff_nameStatus(e,t,i,o={}){const s=["diff","--name-status","-M","--no-ext-diff"];return o&&o.filter&&s.push(`--diff-filter=${o.filter}`),t&&s.push(t),i&&s.push(i),Kt({cwd:e,configs:["-c","color.diff=false"]},...s)}static diff_shortstat(e,t){const i=["diff","--shortstat","--no-ext-diff"];return t&&i.push(t),Kt({cwd:e,configs:["-c","color.diff=false"]},...i)}static difftool_dirDiff(e,t,i,o){const s=["difftool","--dir-diff",`--tool=${t}`,i];return o&&s.push(o),Kt({cwd:e},...s)}static difftool_fileDiff(e,t,i,o={}){const s=["difftool","--no-prompt",`--tool=${i}`];return o.staged&&s.push("--staged"),o.ref1&&s.push(o.ref1),o.ref2&&s.push(o.ref2),Kt({cwd:e},...s,"--",t)}static fetch(e,t={}){const i=["fetch"];return t.remote?i.push(t.remote):t.all&&i.push("--all"),Kt({cwd:e},...i)}static log(e,t){const i=[...Qt,"--full-history","-M","-m"];return t.authors&&i.push(...t.authors.map(e=>`--author=${e}`)),t.maxCount&&!t.reverse&&i.push(`-n${t.maxCount}`),t.ref&&!git_Git.isStagedUncommitted(t.ref)&&(t.reverse?i.push("--reverse","--ancestry-path",`${t.ref}..HEAD`):i.push(t.ref)),Kt({cwd:e,configs:["-c","diff.renameLimit=0"]},...i,"--")}static log_file(e,t,i={renames:!0,reverse:!1}){const[o,s]=git_Git.splitPath(t,e),r=[...Qt,"-m"];return i.maxCount&&!i.reverse&&r.push(`-n${i.maxCount}`),i.renames&&r.push("--follow"),i.ref&&!git_Git.isStagedUncommitted(i.ref)&&(i.reverse?r.push("--reverse","--ancestry-path",`${i.ref}..HEAD`):r.push(i.ref)),null!=i.startLine&&null!=i.endLine&&r.push(`-L ${i.startLine},${i.endLine}:${o}`),Kt({cwd:s},...r,"--",o)}static async log_recent(e,t){const i=await Kt({cwd:e,errors:jt.Ignore},"log","-M","-n1","--format=%H","--",t);return 0===i.length?void 0:i.trim()}static log_search(e,t=qt,i={}){const o=[...Qt];return i.maxCount&&o.push(`-n${i.maxCount}`),Kt({cwd:e},...o,...t)}static log_shortstat(e,t){const i=["log","--shortstat","--oneline"];return t.ref&&!git_Git.isStagedUncommitted(t.ref)&&i.push(t.ref),Kt({cwd:e},...i,"--")}static async ls_files(e,t,i={}){const o=["ls-files"];i.ref&&!git_Git.isUncommitted(i.ref)&&o.push(`--with-tree=${i.ref}`);const s=await Kt({cwd:e,errors:jt.Ignore},...o,"--",t);return 0===s.length?void 0:s.trim()}static async ls_tree(e,t,i={}){const o=["ls-tree"];i.fileName?o.push("-l",t,"--",i.fileName):o.push("-lrt",t,"--");const s=await Kt({cwd:e,errors:jt.Ignore},...o);return 0===s.length?void 0:s.trim()}static merge_base(e,t,i,o={}){const s=["merge-base"];return o.forkPoint&&s.push("--fork-point"),Kt({cwd:e},...s,t,i)}static remote(e){return Kt({cwd:e},"remote","-v")}static remote_url(e,t){return Kt({cwd:e},"remote","get-url",t)}static reset(e,t){return Kt({cwd:e},"reset","-q","--",t)}static async revparse(e,t){const i=await Kt({cwd:e,errors:jt.Ignore},"rev-parse",t);return 0===i.length?void 0:i.trim()}static async revparse_currentBranch(e){const t=["rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}"],i={cwd:e,errors:jt.Throw};try{return[await Kt(i,...t),void 0]}catch(e){const o=e&&e.toString();if(Vt.headNotABranch.test(o)){const e=await Kt(Object.assign({},i,{errors:jt.Ignore}),"log","-n1","--format=%H","--");if(0===e.length)return;const t=e.trim();return[`(HEAD detached at ${this.shortenSha(t)})`,t]}const s=Vt.noUpstream.exec(o);if(null!==s)return[s[1],void 0];if(Vt.unknownRevision.test(o)){const e=await Kt(Object.assign({},i,{errors:jt.Ignore}),"symbolic-ref","-q","--short","HEAD");return 0===e.length?void 0:[e.trim(),void 0]}return void Xt(e,i,...t)}}static async revparse_toplevel(e){const t=await Kt({cwd:e,errors:jt.Ignore},"rev-parse","--show-toplevel");return 0===t.length?void 0:t.trim()}static async show(e,t,i,o={}){const[s,r]=git_Git.splitPath(t,e);if(git_Git.isStagedUncommitted(i)&&(i=":"),git_Git.isUncommitted(i))throw new Error(`ref=${i} is uncommitted`);const n={cwd:r,encoding:o.encoding||"utf8",errors:jt.Throw},a=i.endsWith(":")?`${i}./${s}`:`${i}:./${s}`;try{return await Kt(n,"show",a,"--")}catch(s){const r=s&&s.toString();if(":"===i&&Ht.badRevision.test(r))return git_Git.show(e,t,"HEAD:",o);if(Ht.badRevision.test(r)||Vt.notFound.test(r)||Vt.foundButNotInRevision.test(r))return;return Xt(s,n,a)}}static show_status(e,t,i){return Kt({cwd:e},"show","--name-status","--format=",i,"--",t)}static showref_tag(e){return Kt({cwd:e,errors:jt.Ignore},"show-ref","--tags")}static stash_apply(e,t,i){if(t)return Kt({cwd:e},"stash",i?"pop":"apply",t)}static stash_delete(e,t){if(t)return Kt({cwd:e},"stash","drop",t)}static stash_list(e){return Kt({cwd:e},...Wt)}static stash_push(e,t,i){const o=["stash","push","-u"];return i&&o.push("-m",i),Kt({cwd:e},...o,"--",...t)}static stash_save(e,t){const i=["stash","save","-u"];return t&&i.push(t),Kt({cwd:e},...i)}static status(e,t=1){return Kt({cwd:e,configs:["-c","color.status=false"],env:{GIT_OPTIONAL_LOCKS:"0"}},"status",t>=2?`--porcelain=v${t}`:"--porcelain","--branch","-u")}static status_file(e,t,i=1){const[o,s]=git_Git.splitPath(t,e);return Kt({cwd:s,configs:["-c","color.status=false"],env:{GIT_OPTIONAL_LOCKS:"0"}},"status",i>=2?`--porcelain=v${i}`:"--porcelain","--",o)}static tag(e){return Kt({cwd:e},"tag","-l","-n1")}}git_Git.deletedOrMissingSha="0000000000000000000000000000000000000000-",git_Git.shaLikeRegex=/(^[0-9a-f]{40}([\^@~:]\S*)?$)|(^[0]{40}(:|-)$)/,git_Git.shaRegex=/(^[0-9a-f]{40}$)|(^[0]{40}(:|-)$)/,git_Git.stagedUncommittedRegex=/^[0]{40}([\^@~]\S*)?:$/,git_Git.stagedUncommittedSha="0000000000000000000000000000000000000000:",git_Git.uncommittedRegex=/^[0]{40}(?:[\^@~:]\S*)?:?$/,git_Git.uncommittedSha="0000000000000000000000000000000000000000";class RequestType{constructor(e){this.name=e}}const Jt=new RequestType("git"),ei=new RequestType("repositories/inFolder"),ti=new RequestType("workspace/fileExists"),ii=()=>!0,oi=new Map([["blame",ii],["branch",e=>"-vv"===e[1]||"--contains"===e[1]],["cat-file",ii],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",ii],["difftool",ii],["log",ii],["ls-files",ii],["ls-tree",ii],["merge-base",ii],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-parse",ii],["show",ii],["show-ref",ii],["stash",e=>"list"===e[1]],["status",ii],["symbolic-ref",ii],["tag",e=>"-l"===e[1]]]),si=/^[\/|\\]/;class host_VslsHostService{constructor(e,t){this._api=e,this._service=t,this._localToSharedPaths=new Map,this._sharedToLocalPaths=new Map,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=r.Disposable.from(r.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(Jt,this.onGitCommandRequest.bind(this)),this.onRequest(ei,this.onRepositoriesInFolderRequest.bind(this)),this.onRequest(ti,this.onWorkspaceFileExistsRequest.bind(this)),this.onWorkspaceFoldersChanged()}static async share(e){const t=await e.shareService(this.ServiceId);if(null==t)throw new Error("Failed to share host service");return new host_VslsHostService(e,t)}dispose(){this._disposable.dispose(),this._api.unshareService(host_VslsHostService.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,(e,i)=>t(e[0],i))}onAvailabilityChanged(e){}async onWorkspaceFoldersChanged(e){if(void 0===r.workspace.workspaceFolders||0===r.workspace.workspaceFolders.length)return;const t=logger_Logger.getCorrelationContext();let i,o;this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear();for(const e of r.workspace.workspaceFolders)i=De.normalizePath(e.uri.fsPath),o=De.normalizePath(this.convertLocalUriToShared(e.uri).fsPath),logger_Logger.debug(t,`shared='${o}' â local='${i}'`),this._localToSharedPaths.set(i,o),this._sharedToLocalPaths.set(o,i);let s=Ee.join(this._sharedToLocalPaths.values(),"|");s=s.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=new RegExp(`(${s})`,"gi");let n=Ee.join(this._localToSharedPaths.values(),"|");n=n.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=new RegExp(`^(${n})`,"i")}async onGitCommandRequest(e,t){const{options:i,args:o}=e,s=oi.get(e.args[0]);if(void 0===s||!s(e.args))throw new Error(`Git ${e.args[0]} command is not allowed`);let r=!1;if(void 0!==i.cwd&&i.cwd.length>0&&void 0!==this._sharedToLocalPaths)if(void 0!==this._sharedPathsRegex&&this._sharedPathsRegex.test(i.cwd))i.cwd=De.normalizePath(i.cwd).replace(this._sharedPathsRegex,(e,t)=>{r||(r="/~0"===t);const i=this._sharedToLocalPaths.get(t);return null!=i?i:t});else if(si.test(i.cwd)){const e=this._sharedToLocalPaths.get("/~0");void 0!==e&&(r=!0,i.cwd=gitUri_GitUri.resolve(i.cwd,e))}let n=!1,a=-1;for(const e of o)a++,"--"!==e?n&&"string"==typeof e&&(r&&si.test(e[0])&&o.splice(a,1,e.substr(1)),void 0!==this._sharedPathsRegex&&this._sharedPathsRegex.test(e)&&o.splice(a,1,De.normalizePath(e).replace(this._sharedPathsRegex,(e,t)=>{const i=this._sharedToLocalPaths.get(t);return null!=i?i:t}))):n=!0;let c=await Kt(i,...o);return"string"==typeof c?(void 0!==this._localPathsRegex&&c.length>0&&(c=c.replace(this._localPathsRegex,(e,t)=>{const i=this._localToSharedPaths.get(t);return null!=i?i:t})),{data:c}):{data:c.toString("binary"),isBuffer:!0}}async onRepositoriesInFolderRequest(e,t){const i=this.convertSharedUriToLocal(r.Uri.parse(e.folderUri)),o=De.normalizePath(i.fsPath,{stripTrailingSlash:!0}).toLowerCase();return{repositories:[...Ee.filterMap(await container_Container.git.getRepositories(),e=>{if(!e.normalizedPath.startsWith(o))return;const t=this.convertLocalUriToShared(e.folder.uri);return{folderUri:t.toString(!0),path:t.path,root:e.root,closed:e.closed}})]}}async onWorkspaceFileExistsRequest(e,t){let{repoPath:i}=e;return void 0!==this._sharedPathsRegex&&this._sharedPathsRegex.test(i)&&(i=De.normalizePath(i).replace(this._sharedPathsRegex,(e,t)=>{const i=this._sharedToLocalPaths.get(t);return null!=i?i:t})),{exists:await container_Container.git.fileExists(i,e.fileName,e.options)}}convertLocalUriToShared(e){const t=logger_Logger.getCorrelationContext();let i=this._api.convertLocalUriToShared(e);logger_Logger.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);const o=e.path;let s=i.path;if(i.authority.length>0&&(s=`/${i.authority}${s}`),new RegExp(`${o}$`,"i").test(s))if(s.length===o.length){const t=r.workspace.getWorkspaceFolder(e);i=i.with({path:`/~${t.index}`})}else i=i.with({path:s.substr(0,s.length-o.length)});else if(!s.startsWith("/~")){const t=r.workspace.getWorkspaceFolder(e);i=i.with({path:`/~${t.index}${s}`})}return i}convertSharedUriToLocal(e){ni.test(e.path)&&(e=e.with({path:`${e.path}/`}));const t=this._api.convertSharedUriToLocal(e),i=t.path,o=e.path;return i.endsWith(o)?t.with({path:i.substr(0,i.length-o.length)}):t}}host_VslsHostService.ServiceId="proxy",s([Oe()],host_VslsHostService.prototype,"onAvailabilityChanged",null),s([Be()],host_VslsHostService.prototype,"onWorkspaceFoldersChanged",null),s([Oe()],host_VslsHostService.prototype,"onGitCommandRequest",null),s([Oe()],host_VslsHostService.prototype,"onRepositoriesInFolderRequest",null),s([Oe()],host_VslsHostService.prototype,"onWorkspaceFileExistsRequest",null),s([Be({exit:e=>`returned ${e.toString(!0)}`})],host_VslsHostService.prototype,"convertLocalUriToShared",null),s([Oe()],host_VslsHostService,"share",null);class guest_VslsGuestService{constructor(e,t){this._api=e,this._service=t,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e){const t=logger_Logger.getCorrelationContext();try{const i=await e.getSharedService(host_VslsHostService.ServiceId);if(null==i)throw new Error("Failed to connect to host service");return new guest_VslsGuestService(e,i)}catch(e){return void logger_Logger.error(e,t)}}dispose(){}onAvailabilityChanged(e){e?N(F.Enabled,!0):(N(F.Enabled,!1),r.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed."))}async git(e,...t){const i=await this.sendRequest(Jt,{options:e,args:t});return i.isBuffer?new Buffer(i.data,"binary"):i.data}async getRepositoriesInFolder(e,t){return(await this.sendRequest(ei,{folderUri:e.uri.toString(!0)})).repositories.map(i=>new repository_Repository(e,i.path,i.root,t,!1,i.closed))}async fileExists(e,t,i={ensureCase:!1}){return(await this.sendRequest(ti,{fileName:t,repoPath:e,options:i})).exists}sendRequest(e,t,i){return this._service.request(e.name,[t])}}s([Oe()],guest_VslsGuestService.prototype,"onAvailabilityChanged",null),s([Oe()],guest_VslsGuestService.prototype,"git",null),s([Oe()],guest_VslsGuestService.prototype,"getRepositoriesInFolder",null),s([Oe()],guest_VslsGuestService.prototype,"fileExists",null),s([Be()],guest_VslsGuestService.prototype,"sendRequest",null),s([Oe()],guest_VslsGuestService,"connect",null);const ri=/^[\/|\\]~(?:\d+?|external)(?:[\/|\\]|$)/,ni=/^[\/|\\]~(?:\d+?|external)$/;class vsls_VslsController{constructor(){this.initialize()}dispose(){this._disposable&&this._disposable.dispose(),void 0!==this._host&&this._host.dispose(),void 0!==this._guest&&this._guest.dispose()}async initialize(){try{void 0!==r.workspace.workspaceFolders&&r.workspace.workspaceFolders.some(e=>e.uri.scheme===$.Vsls)&&(N(F.Readonly,!0),this._waitForReady=new Promise(e=>this._onReady=e));const e=await Object(He.getApi)();if(null==e)return void(void 0!==this._onReady&&(this._onReady(),this._waitForReady=void 0));this._disposable=r.Disposable.from(e.onDidChangeSession(t=>this.onLiveShareSessionChanged(e,t),this))}catch(e){return void logger_Logger.error(e)}}get isMaybeGuest(){return void 0!==this._guest||void 0!==this._waitForReady}async guest(){return void 0!==this._waitForReady&&(await this._waitForReady,this._waitForReady=void 0),this._guest}host(){return this._host}async onLiveShareSessionChanged(e,t){switch(void 0!==this._host&&this._host.dispose(),void 0!==this._guest&&this._guest.dispose(),t.session.role){case He.Role.Host:N(F.Readonly,void 0),container_Container.config.liveshare.allowGuestAccess&&(this._host=await host_VslsHostService.share(e));break;case He.Role.Guest:N(F.Readonly,!0),this._guest=await guest_VslsGuestService.connect(e);break;default:N(F.Readonly,void 0)}void 0!==this._onReady&&(this._onReady(),this._onReady=void 0)}}const ai={doesNotExist:/no such file or directory/i},ci=/^user\.(name|email) (.*)$/gm,li=/(.+)\s<(.+)>/;var hi;!function(e){e.Author="author",e.ChangedLines="changed-lines",e.Changes="changes",e.Files="files",e.Message="message",e.Sha="sha"}(hi||(hi={}));class gitService_GitService{constructor(){this._onDidChangeRepositories=new r.EventEmitter,this._suspended=!1,this._branchesCache=new Map,this._tagsCache=new Map,this._tagsWithRefsCache=new Map,this._trackedCache=new Map,this._userMapCache=new Map,this._repositoryTree=searchTree_TernarySearchTree.forPaths(),this._disposable=r.Disposable.from(r.window.onDidChangeWindowState(this.onWindowStateChanged,this),r.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),io.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(io.initializingChangeEvent),this._repositoriesLoadingPromise=this.onWorkspaceFoldersChanged()}get onDidChangeRepositories(){return this._onDidChangeRepositories.event}dispose(){this._repositoryTree.forEach(e=>e.dispose()),this._branchesCache.clear(),this._tagsCache.clear(),this._tagsWithRefsCache.clear(),this._trackedCache.clear(),this._userMapCache.clear(),this._disposable&&this._disposable.dispose()}get UseCaching(){return container_Container.config.advanced.caching.enabled}onAnyRepositoryChanged(e,t){this._trackedCache.clear(),this._branchesCache.delete(e.path),this._tagsCache.delete(e.path),this._tagsWithRefsCache.clear(),t===Ft.Config&&this._userMapCache.delete(e.path),t===Ft.Closed&&setImmediate(async()=>{await this.updateContext(this._repositoryTree),this.fireRepositoriesChanged()})}onConfigurationChanged(e){(io.changed(e,io.name("defaultDateStyle").value)||io.changed(e,io.name("defaultDateFormat").value))&&ct.reset()}onWindowStateChanged(e){e.focused?this._repositoryTree.forEach(e=>e.resume()):this._repositoryTree.forEach(e=>e.suspend()),this._suspended=!e.focused}async onWorkspaceFoldersChanged(e){let t=!1;void 0===e&&(t=!0,e={added:r.workspace.workspaceFolders||[],removed:[]},logger_Logger.log(`Starting repository search in ${e.added.length} folders`));for(const t of e.added){const{scheme:e}=t.uri;if(e===$.File||e===$.Vsls)if(e===$.Vsls){if(container_Container.vsls.isMaybeGuest){const e=await container_Container.vsls.guest();if(void 0!==e){const i=await e.getRepositoriesInFolder(t,this.onAnyRepositoryChanged.bind(this));for(const e of i)this._repositoryTree.set(e.path,e)}}}else{const e=await this.repositorySearch(t);for(const t of e)this._repositoryTree.set(t.path,t)}}for(const t of e.removed){const{fsPath:e,scheme:i}=t.uri;if(i!==$.File&&i!==$.Vsls)continue;const o=this._repositoryTree.findSuperstr(e),s=void 0!==o?[...Ee.map(o,e=>[e,e.path])]:[],r=this._repositoryTree.get(e);void 0!==r&&s.push([r,e]);for(const[e,t]of s)this._repositoryTree.delete(t),e.dispose()}await this.updateContext(this._repositoryTree),t||setImmediate(()=>this.fireRepositoriesChanged())}async repositorySearch(e){const{uri:t}=e,i=io.get(io.name("advanced")("repositorySearchDepth").value,t);logger_Logger.log(`Searching for repositories (depth=${i}) in '${t.fsPath}' ...`);const o=process.hrtime(),s=[],n=this.onAnyRepositoryChanged.bind(this),a=await this.getRepoPathCore(t.fsPath,!0);if(void 0!==a&&(logger_Logger.log(`Repository found in '${a}'`),s.push(new repository_Repository(e,a,!0,n,this._suspended))),i<=0)return logger_Logger.log(`Completed repository search (depth=${i}) in '${t.fsPath}' ${D.Dot} ${De.getDurationMilliseconds(o)} ms`),s;let c=Object.assign({},r.workspace.getConfiguration("files",t).get("exclude",{}),r.workspace.getConfiguration("search",t).get("exclude",{}));let l;c=[...Ee.filterMap(O.entries(c),([e,t])=>{if(t)return e.startsWith("**/")?e.substring(3):e})].reduce((e,t)=>(e[t]=!0,e),Object.create(null));try{l=await this.repositorySearchCore(t.fsPath,i,c)}catch(e){return ai.doesNotExist.test(e.message||"")?logger_Logger.log(`Repository search (depth=${i}) in '${t.fsPath}' FAILED${e.message?`(${e.message})`:""}`):logger_Logger.error(e,`Repository search (depth=${i}) in '${t.fsPath}' FAILED`),s}for(let t of l){if(t=G.dirname(t),De.normalizePath(t)===a)continue;const i=await this.getRepoPathCore(t,!0);void 0!==i&&(logger_Logger.log(`Repository found in '${i}'`),s.push(new repository_Repository(e,i,!1,n,this._suspended)))}return logger_Logger.log(`Completed repository search (depth=${i}) in '${t.fsPath}' ${D.Dot} ${De.getDurationMilliseconds(o)} ms`),s}async repositorySearchCore(e,t,i,o=[]){return new Promise((s,r)=>{We.readdir(e,async(n,a)=>{if(null!=n)return void r(n);if(0===a.length)return void s(o);const c=[],l=a.map(t=>{const s=G.resolve(e,t);return new Promise((e,r)=>{We.stat(s,(r,n)=>{".git"===t?o.push(s):null==r&&!0!==i[t]&&null!=n&&n.isDirectory()&&c.push(s),e()})})});if(await Promise.all(l),t-- >0)for(const e of c)await this.repositorySearchCore(e,t,i,o);s(o)})})}async updateContext(e){const t=e.any();await N(F.Enabled,t);let i=!1;if(t)for(const t of e.values())if(i=await t.hasRemotes())break;if(await N(F.HasRemotes,i),!t){const e=r.workspace.createFileSystemWatcher("**/.git",!1,!0,!0),t=r.Disposable.from(e,e.onDidCreate(async e=>{const i=r.workspace.getWorkspaceFolder(e);if(void 0===i)return;const o=await this.repositorySearch(i);if(0!==o.length){t.dispose();for(const e of o)this._repositoryTree.set(e.path,e);await this.updateContext(this._repositoryTree),setImmediate(()=>this.fireRepositoriesChanged())}},this))}}fireRepositoriesChanged(){this._onDidChangeRepositories.fire()}async applyChangesToWorkingFile(e,t,i){if(void 0===(t=t||e.sha)||void 0===e.repoPath)return;let o;void 0===i&&(i=t,t=`${t}^`);try{o=await git_Git.diff(e.repoPath,e.fsPath,t,i),await git_Git.apply(e.repoPath,o)}catch(t){if(o&&/patch does not apply/i.test(t.message)){const i=await r.window.showWarningMessage("Unable to apply changes cleanly. Retry and allow conflicts?",{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"Yes"!==i.title)return;if("Yes"===i.title)try{return void await git_Git.apply(e.repoPath,o,{allowConflicts:!0})}catch(e){t=e}}logger_Logger.error(t),messages_Messages.showGenericErrorMessage("Unable to apply changes")}}checkout(e,t,i){return git_Git.checkout(e,t,i)}async fetch(e,t){return git_Git.fetch(e,{remote:t})}async fetchAll(){const e=await this.getOrderedRepositories();0!==e.length&&await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Fetching repositories",cancellable:!0},async(t,i)=>{const o=e.length;for(const s of e){if(t.report({message:`${s.formattedName}...`,increment:100/o}),i.isCancellationRequested)break;await this.fetch(s.path)}})}async pullAll(){const e=await this.getOrderedRepositories();0!==e.length&&await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Pulling repositories",cancellable:!0},async(t,i)=>{const o=e.length;for(const s of e){if(t.report({message:`${s.formattedName}...`,increment:100/o}),i.isCancellationRequested)break;await s.pull({progress:!1})}})}async pushAll(){const e=await this.getOrderedRepositories();0!==e.length&&await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Pushing repositories",cancellable:!0},async(t,i)=>{const o=e.length;for(const s of e){if(t.report({message:`${s.formattedName}...`,increment:100/o}),i.isCancellationRequested)break;await s.push({progress:!1})}})}async fileExists(e,t,i={ensureCase:!1}){if(container_Container.vsls.isMaybeGuest){const o=await container_Container.vsls.guest();if(void 0!==o)return o.fileExists(e,t,i)}const o=G.resolve(e,t),s=await new Promise((e,t)=>We.exists(o,e));if(!i.ensureCase||!s)return s;const r=G.normalize(e);return this.fileExistsWithCase(o,r,r.length)}async fileExistsWithCase(e,t,i){const o=G.dirname(e);return!(o.length<i)&&(o===t||-1!==(await new Promise((e,t)=>We.readdir(o,(i,o)=>{i?t(i):e(o)}))).indexOf(G.basename(e))&&this.fileExistsWithCase(o,t,i))}async findNextCommit(e,t,i){let o=await this.getLogForFile(e,t,{maxCount:1,ref:i,renames:!0,reverse:!0}),s=o&&Ee.first(o.commits.values());if(s)return s;const r=await this.findNextFileName(e,t,i);return r&&(s=(o=await this.getLogForFile(e,r,{maxCount:1,ref:i,renames:!0,reverse:!0}))&&Ee.first(o.commits.values())),s}async findNextFileName(e,t,i){return[t,e]=git_Git.splitPath(t,e),await this.fileExists(e,t,{ensureCase:!0})?t:await this.findNextFileNameCore(e,t,i)}async findNextFileNameCore(e,t,i){if(void 0===i&&void 0===(i=await this.getRecentShaForFile(e,t)))return;const o=await this.getLog(e,{maxCount:1,ref:i});if(void 0===o)return;const s=Ee.first(o.commits.values()).files.find(e=>e.originalFileName===t);return void 0!==s?s.fileName:void 0}async findWorkingFileName(e,t,i){let o;if("string"==typeof e)o=e,void 0===t?(t=await this.getRepoPath(o,{ref:i}),[o,t]=git_Git.splitPath(o,t)):o=De.normalizePath(G.relative(t,o));else{const i=e;if(t=i.repoPath,i.workingFileName&&await this.fileExists(t,i.workingFileName,{ensureCase:!0}))return[i.workingFileName,t];o=i.fileName}for(;;){if(await this.fileExists(t,o,{ensureCase:!0}))return[o,t];if(void 0===(o=await this.findNextFileNameCore(t,o)))return[void 0,void 0]}}async getActiveRepoPath(e){let t;if(null!=(e=e||r.window.activeTextEditor)){const i=await container_Container.tracker.getOrAdd(e.document.uri);void 0!==i&&(t=i.uri.repoPath)}return null!=t?t:this.getHighlanderRepoPath()}getHighlanderRepoPath(){const e=this._repositoryTree.highlander();if(void 0===e)return;const[t]=e;return t.path}async getBlameForFile(e){const t=logger_Logger.getCorrelationContext();let i="blame";void 0!==e.sha&&(i+=`:${e.sha}`);const o=await container_Container.tracker.getOrAdd(e);if(this.UseCaching){if(void 0!==o.state){const e=o.state.get(i);if(void 0!==e)return logger_Logger.debug(t,`Cache hit: '${i}'`),e.item}logger_Logger.debug(t,`Cache miss: '${i}'`),void 0===o.state&&(o.state=new GitDocumentState(o.key))}const s=this.getBlameForFileCore(e,o,i,t);return void 0!==o.state&&(logger_Logger.debug(t,`Cache add: '${i}'`),o.state.set(i,{item:s})),s}async getBlameForFileCore(e,t,i,o){if(!await this.isTracked(e))return logger_Logger.log(o,`Skipping blame; '${e.fsPath}' is not tracked`),gitService_GitService.emptyPromise;const[s,r]=git_Git.splitPath(e.fsPath,e.repoPath,!1);try{const n=await git_Git.blame(r,s,e.sha,{args:container_Container.config.advanced.blame.customArguments,ignoreWhitespace:container_Container.config.blame.ignoreWhitespace});return blameParser_GitBlameParser.parse(n,r,s,await this.getCurrentUser(r))}catch(e){if(void 0!==t.state){const s=e&&e.toString();return logger_Logger.debug(o,`Cache replace (with empty promise): '${i}'`),t.state.set(i,{item:gitService_GitService.emptyPromise,errorMessage:s}),t.setBlameFailure(),gitService_GitService.emptyPromise}return}}async getBlameForFileContents(e,t){const i=logger_Logger.getCorrelationContext(),o=`blame:${De.sha1(t)}`,s=await container_Container.tracker.getOrAdd(e);if(this.UseCaching){if(void 0!==s.state){const e=s.state.get(o);if(void 0!==e)return logger_Logger.debug(i,`Cache hit: ${o}`),e.item}logger_Logger.debug(i,`Cache miss: ${o}`),void 0===s.state&&(s.state=new GitDocumentState(s.key))}const r=this.getBlameForFileContentsCore(e,t,s,o,i);return void 0!==s.state&&(logger_Logger.debug(i,`Cache add: '${o}'`),s.state.set(o,{item:r})),r}async getBlameForFileContentsCore(e,t,i,o,s){if(!await this.isTracked(e))return logger_Logger.log(s,`Skipping blame; '${e.fsPath}' is not tracked`),gitService_GitService.emptyPromise;const[r,n]=git_Git.splitPath(e.fsPath,e.repoPath,!1);try{const e=await git_Git.blame_contents(n,r,t,{args:container_Container.config.advanced.blame.customArguments,correlationKey:`:${o}`,ignoreWhitespace:container_Container.config.blame.ignoreWhitespace});return blameParser_GitBlameParser.parse(e,n,r,await this.getCurrentUser(n))}catch(e){if(void 0!==i.state){const t=e&&e.toString();return logger_Logger.debug(s,`Cache replace (with empty promise): '${o}'`),i.state.set(o,{item:gitService_GitService.emptyPromise,errorMessage:t}),i.setBlameFailure(),gitService_GitService.emptyPromise}return}}async getBlameForLine(e,t,i={}){if(!i.skipCache&&this.UseCaching){const i=await this.getBlameForFile(e);if(void 0===i)return;let o=i.lines[t];if(void 0===o){if(i.lines.length!==t)return;o=i.lines[t-1]}const s=i.commits.get(o.sha);if(void 0===s)return;return{author:Object.assign({},i.authors.get(s.author),{lineCount:s.lines.length}),commit:s,line:o}}const o=t+1,s=e.fsPath;try{const i=await git_Git.blame(e.repoPath,s,e.sha,{args:container_Container.config.advanced.blame.customArguments,ignoreWhitespace:container_Container.config.blame.ignoreWhitespace,startLine:o,endLine:o}),r=blameParser_GitBlameParser.parse(i,e.repoPath,s,await this.getCurrentUser(e.repoPath));if(void 0===r)return;return{author:Ee.first(r.authors.values()),commit:Ee.first(r.commits.values()),line:r.lines[t]}}catch(e){return}}async getBlameForLineContents(e,t,i,o={}){if(!o.skipCache&&this.UseCaching){const o=await this.getBlameForFileContents(e,i);if(void 0===o)return;let s=o.lines[t];if(void 0===s){if(o.lines.length!==t)return;s=o.lines[t-1]}const r=o.commits.get(s.sha);if(void 0===r)return;return{author:Object.assign({},o.authors.get(r.author),{lineCount:r.lines.length}),commit:r,line:s}}const s=t+1,r=e.fsPath;try{const o=await git_Git.blame_contents(e.repoPath,r,i,{args:container_Container.config.advanced.blame.customArguments,ignoreWhitespace:container_Container.config.blame.ignoreWhitespace,startLine:s,endLine:s}),n=await this.getCurrentUser(e.repoPath),a=blameParser_GitBlameParser.parse(o,e.repoPath,r,n);if(void 0===a)return;return{author:Ee.first(a.authors.values()),commit:Ee.first(a.commits.values()),line:a.lines[t]}}catch(e){return}}async getBlameForRange(e,t){const i=await this.getBlameForFile(e);if(void 0!==i)return this.getBlameForRangeSync(i,e,t)}getBlameForRangeSync(e,t,i){if(0===e.lines.length)return Object.assign({allLines:e.lines},e);if(0===i.start.line&&i.end.line===e.lines.length-1)return Object.assign({allLines:e.lines},e);const o=e.lines.slice(i.start.line,i.end.line+1),s=new Set(o.map(e=>e.sha)),r=new Map,n=new Map;for(const t of e.commits.values()){if(!s.has(t.sha))continue;const e=t.with({lines:t.lines.filter(e=>e.line>=i.start.line&&e.line<=i.end.line)});n.set(t.sha,e);let o=r.get(e.author);void 0===o&&(o={name:e.author,lineCount:0},r.set(o.name,o)),o.lineCount+=e.lines.length}return{authors:new Map([...r.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:n,lines:o,allLines:e.lines}}async getBranch(e){if(void 0===e)return;const t=await git_Git.revparse_currentBranch(e);if(void 0===t)return;const i=t[0].split("\n");return new branch_GitBranch(e,i[0],!0,t[1],i[1])}async getBranches(e){if(void 0===e)return[];let t=this._branchesCache.get(e);if(void 0!==t)return t;const i=await git_Git.branch(e,{all:!0});if(null==i||0===i.length){const i=await this.getBranch(e);t=void 0!==i?[i]:[]}else t=branchParser_GitBranchParser.parse(i,e)||[];return this._branchesCache.set(e,t),t}async getChangedFilesCount(e,t){const i=await git_Git.diff_shortstat(e,t);return diffParser_GitDiffParser.parseShortStat(i)}async getConfig(e,t){return await git_Git.config_get(e,t)}async getCurrentUser(e){let t=this._userMapCache.get(e);if(null!=t)return t;if(null===t)return;const i=await git_Git.config_getRegex("user.(name|email)",e,{local:!0});if(!i)return void this._userMapCache.set(e,null);t={name:void 0,email:void 0};let o=null;do{if(null==(o=ci.exec(i)))break;t[o[1]]=(" "+o[2]).substr(1)}while(null!=o);const s=`${t.name} <${t.email}>`,r=await git_Git.check_mailmap(e,s);return null!=r&&0!==r.length&&s!==r&&null!=(o=li.exec(r))&&([,t.name,t.email]=o),this._userMapCache.set(e,t),t}async getDiffForFile(e,t,i){const o=logger_Logger.getCorrelationContext();void 0!==t&&void 0===i&&void 0!==e.sha&&(i=e.sha);let s="diff";void 0!==t&&(s+=`:${t}`),void 0!==i&&(s+=`:${i}`);const r=await container_Container.tracker.getOrAdd(e);if(this.UseCaching){if(void 0!==r.state){const e=r.state.get(s);if(void 0!==e)return logger_Logger.debug(o,`Cache hit: '${s}'`),e.item}logger_Logger.debug(o,`Cache miss: '${s}'`),void 0===r.state&&(r.state=new GitDocumentState(r.key))}const n=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:gitService_GitService.getEncoding(e)},r,s,o);return void 0!==r.state&&(logger_Logger.debug(o,`Cache add: '${s}'`),r.state.set(s,{item:n})),n}async getDiffForFileCore(e,t,i,o,s,r,n,a){const[c,l]=git_Git.splitPath(t,e,!1);try{const e=await git_Git.diff(l,c,i,o,Object.assign({},s,{filter:"M"}));return diffParser_GitDiffParser.parse(e)}catch(e){if(void 0!==r.state){const t=e&&e.toString();return logger_Logger.debug(a,`Cache replace (with empty promise): '${n}'`),r.state.set(n,{item:gitService_GitService.emptyPromise,errorMessage:t}),gitService_GitService.emptyPromise}return}}async getDiffForLine(e,t,i,o){try{const s=await this.getDiffForFile(e,i,o);if(void 0===s)return;const r=s.chunks.find(e=>e.currentPosition.start<=t&&e.currentPosition.end>=t);if(void 0===r)return;return r.lines[t-r.currentPosition.start+1]}catch(e){return}}async getDiffStatus(e,t,i,o={}){try{const s=await git_Git.diff_nameStatus(e,t,i,o);return diffParser_GitDiffParser.parseNameStatus(s,e)}catch(e){return}}async getFileStatusForCommit(e,t,i){if(i===gitService_GitService.deletedOrMissingSha||gitService_GitService.isUncommitted(i))return;const o=await git_Git.show_status(e,t,i);if(!o)return;const s=diffParser_GitDiffParser.parseNameStatus(o,e);return void 0!==s&&0!==s.length?s[0]:void 0}async getRecentLogCommitForFile(e,t){return this.getLogCommitForFile(e,t,void 0)}async getRecentShaForFile(e,t){return await git_Git.log_recent(e,t)}async getLogCommit(e,t){const i=await this.getLog(e,{maxCount:2,ref:t});if(void 0!==i)return i.commits.get(t)}async getLogCommitForFile(e,t,i={}){const o=await this.getLogForFile(e,t,{maxCount:2,ref:i.ref,reverse:i.reverse});if(void 0===o)return;const s=i.ref&&o.commits.get(i.ref);return void 0!==s||i.firstIfNotFound||!i.ref||git_Git.isSha(i.ref)&&!git_Git.isUncommitted(i.ref)?s||Ee.first(o.commits.values()):void 0}async getLog(e,t={}){const i=null==t.maxCount?container_Container.config.advanced.maxListItems||0:t.maxCount;try{const o=await git_Git.log(e,{authors:t.authors,maxCount:i,ref:t.ref,reverse:t.reverse}),s=logParser_GitLogParser.parse(o,at.Branch,e,void 0,t.ref,await this.getCurrentUser(e),i,t.reverse,void 0);if(void 0!==s){const i=Object.assign({},t);s.query=(t=>this.getLog(e,Object.assign({},i,{maxCount:t})))}return s}catch(e){return}}async getLogForSearch(e,t,i,o={}){let s=null==o.maxCount?container_Container.config.advanced.maxListItems||0:o.maxCount,r=void 0;switch(i){case hi.Author:r=["-m","-M","--all","--full-history","-E","-i",`--author=${t}`];break;case hi.ChangedLines:r=["-M","--all","--full-history","-E","-i",`-G${t}`];break;case hi.Changes:r=["-M","--all","--full-history","-E","-i","--pickaxe-regex",`-S${t}`];break;case hi.Files:r=["-M","--all","--full-history","-E","-i","--",`${t}`];break;case hi.Message:r=["-m","-M","--all","--full-history","-E","-i"],t&&r.push(`--grep=${t}`);break;case hi.Sha:r=["-m","-M",t],s=1}try{const n=await git_Git.log_search(e,r,{maxCount:s}),a=logParser_GitLogParser.parse(n,at.Branch,e,void 0,void 0,await this.getCurrentUser(e),s,!1,void 0);if(void 0!==a){const s=Object.assign({},o);a.query=(o=>this.getLogForSearch(e,t,i,Object.assign({},s,{maxCount:o})))}return a}catch(e){return}}async getLogForFile(e,t,i={}){if(void 0!==e&&e===De.normalizePath(t))throw new Error(`File name cannot match the repository path; fileName=${t}`);const o=logger_Logger.getCorrelationContext();void 0===(i=Object.assign({reverse:!1},i)).renames&&(i.renames=container_Container.config.advanced.fileHistoryFollowsRenames);let s="log";void 0!==i.ref&&(s+=`:${i.ref}`),void 0!==i.maxCount&&(s+=`:n${i.maxCount}`),i.renames&&(s+=":follow"),i.reverse&&(s+=":reverse");const r=await container_Container.tracker.getOrAdd(gitUri_GitUri.fromFile(t,e,i.ref));if(this.UseCaching&&void 0===i.range){if(void 0!==r.state){const n=r.state.get(s);if(void 0!==n)return logger_Logger.debug(o,`Cache hit: '${s}'`),n.item;if(void 0!==i.ref||void 0!==i.maxCount){const n=r.state.get(`log${i.renames?":follow":""}${i.reverse?":reverse":""}`);if(void 0!==n){if(void 0===i.ref)return logger_Logger.debug(o,`Cache hit: ~'${s}'`),n.item;logger_Logger.debug(o,`Cache ?: '${s}'`);let r=await n.item;if(void 0!==r&&!r.truncated&&r.commits.has(i.ref)){logger_Logger.debug(o,`Cache hit: '${s}'`);let n=!0,a=0;const c=new Map,l=new Map(Ee.filterMap(r.commits.entries(),([e,t])=>{if(n){if(e!==i.ref)return;n=!1}if(a++,!(void 0!==i.maxCount&&a>i.maxCount))return c.set(t.author,r.authors.get(t.author)),[e,t]})),h=Object.assign({},i);return r=Object.assign({},r,{maxCount:i.maxCount,count:l.size,commits:l,authors:c,query:i=>this.getLogForFile(e,t,Object.assign({},h,{maxCount:i}))})}}}}logger_Logger.debug(o,`Cache miss: '${s}'`),void 0===r.state&&(r.state=new GitDocumentState(r.key))}const n=this.getLogForFileCore(e,t,i,r,s,o);return void 0!==r.state&&void 0===i.range&&(logger_Logger.debug(o,`Cache add: '${s}'`),r.state.set(s,{item:n})),n}async getLogForFileCore(e,t,i,s,n,a){if(!await this.isTracked(t,e,{ref:i.ref}))return logger_Logger.log(a,`Skipping log; '${t}' is not tracked`),gitService_GitService.emptyPromise;const[c,l]=git_Git.splitPath(t,e,!1);try{let{range:h}=i,d=o(i,["range"]);void 0!==h&&h.start.line>h.end.line&&(h=new r.Range(h.end,h.start));const m=null==i.maxCount?container_Container.config.advanced.maxListItems||0:i.maxCount,u=await git_Git.log_file(l,c,Object.assign({},d,{maxCount:m,startLine:void 0===h?void 0:h.start.line+1,endLine:void 0===h?void 0:h.end.line+1})),g=logParser_GitLogParser.parse(u,at.File,l,c,d.ref,await this.getCurrentUser(l),m,d.reverse,h);if(void 0!==g){const o=Object.assign({},i);g.query=(i=>this.getLogForFile(e,t,Object.assign({},o,{maxCount:i})))}return g}catch(e){if(void 0!==s.state&&void 0===i.range&&!i.reverse){const t=e&&e.toString();return logger_Logger.debug(a,`Cache replace (with empty promise): '${n}'`),s.state.set(n,{item:gitService_GitService.emptyPromise,errorMessage:t}),gitService_GitService.emptyPromise}return}}async hasRemotes(e){if(void 0===e)return!1;const t=await this.getRepository(e);return void 0!==t&&t.hasRemotes()}async hasTrackingBranch(e){if(void 0===e)return!1;const t=await this.getRepository(e);return void 0!==t&&t.hasTrackingBranch()}async getMergeBase(e,t,i,o={}){try{const s=await git_Git.merge_base(e,t,i,o);if(void 0===s)return;return s.split("\n")[0]}catch(e){return void logger_Logger.error(e)}}async getRemotes(e,t={}){if(void 0===e)return[];const i=await this.getRepository(e),o=void 0!==i?i.getRemotes():this.getRemotesCore(e);return t.includeAll?o:(await o).filter(e=>void 0!==e.provider)}async getRemotesCore(e,t){if(void 0===e)return[];t=t||factory_RemoteProviderFactory.loadProviders(io.get(io.name("remotes").value,null));try{const i=await git_Git.remote(e);return remoteParser_GitRemoteParser.parse(i,e,factory_RemoteProviderFactory.factory(t))}catch(e){return logger_Logger.error(e),[]}}async getRepoPath(e,t={}){if(null==e)return this.getHighlanderRepoPath();if(e instanceof gitUri_GitUri)return e.repoPath;const i=logger_Logger.getCorrelationContext();let o=await this.getRepository(e,Object.assign({},t,{skipCacheUpdate:!0}));if(void 0!==o)return o.path;const s=await this.getRepoPathCore("string"==typeof e?e:e.fsPath,!1);if(void 0===s)return;if(void 0!==this._repositoryTree.get(s))return s;const n="string"==typeof e?void 0:e.scheme===$.Vsls,a=this.findRepositoryForPath(this._repositoryTree,s,n);let c;if(void 0!==a)c=a.folder;else if(void 0===(c=r.workspace.getWorkspaceFolder(gitUri_GitUri.file(s,n)))){const e=s.split("/");c={uri:gitUri_GitUri.file(s,n),name:e[e.length-1],index:this._repositoryTree.count()}}return logger_Logger.log(i,`Repository found in '${s}'`),o=new repository_Repository(c,s,!1,this.onAnyRepositoryChanged.bind(this),this._suspended),this._repositoryTree.set(s,o),setImmediate(async()=>{await this.updateContext(this._repositoryTree),this.fireRepositoriesChanged()}),s}async getRepoPathCore(e,t){try{return await git_Git.revparse_toplevel(t?e:G.dirname(e))}catch(e){return void logger_Logger.error(e)}}async getRepoPathOrActive(e,t){const i=await this.getRepoPath(e);return i||this.getActiveRepoPath(t)}async getRepositories(e){const t=(await this.getRepositoryTree()).values();return void 0!==e?Ee.filter(t,e):t}async getOrderedRepositories(){const e=[...await this.getRepositories()];return 0===e.length?e:e.sort((e,t)=>e.index-t.index)}async getRepositoryTree(){return void 0!==this._repositoriesLoadingPromise&&(await this._repositoriesLoadingPromise,this._repositoriesLoadingPromise=void 0),this._repositoryTree}async getRepository(e,t={}){const i=await this.getRepositoryTree();let o,s;if("string"==typeof e){const t=i.get(e);if(void 0!==t)return t;s=e,o=void 0}else{if(e instanceof gitUri_GitUri){if(e.repoPath){const t=i.get(e.repoPath);if(void 0!==t)return t}s=e.fsPath}else s=e.fsPath;o=e.scheme===$.Vsls}const r=this.findRepositoryForPath(i,s,o);if(void 0!==r&&await this.isTracked(s,r.path,t))return r}findRepositoryForPath(e,t,i){let o=e.findSubstr(t);if(void 0===o&&!1!==i&&container_Container.vsls.isMaybeGuest&&!ri.test(t)){const i=`/~0${"/"===(t=De.normalizePath(t))[0]?t:`/${t}`}`;o=e.findSubstr(i)}return o}async getRepositoryCount(){return(await this.getRepositoryTree()).count()}async getStashList(e){if(void 0===e)return;const t=await git_Git.stash_list(e);return stashParser_GitStashParser.parse(t,e)}async getStatusForFile(e,t){const i=git_Git.validateVersion(2,11)?2:1,o=await git_Git.status_file(e,t,i),s=statusParser_GitStatusParser.parse(o,e,i);if(void 0!==s&&s.files.length)return s.files[0]}async getStatusForRepo(e){if(void 0===e)return;const t=git_Git.validateVersion(2,11)?2:1,i=await git_Git.status(e,t);return statusParser_GitStatusParser.parse(i,e,t)}async getTags(e,t={}){if(void 0===e)return[];let i;if(t.includeRefs){if(void 0!==(i=this._tagsWithRefsCache.get(e)))return i;const t=await git_Git.showref_tag(e);return i=tagParser_GitTagParser.parseWithRef(t,e)||[],this._tagsWithRefsCache.set(e,i),i}if(void 0!==(i=this._tagsCache.get(e)))return i;const o=await git_Git.tag(e);return i=tagParser_GitTagParser.parse(o,e)||[],this._tagsCache.set(e,i),i}async getTreeFileForRevision(e,t,i){if(void 0===e||null==t||0===t.length)return;const o=await git_Git.ls_tree(e,i,{fileName:t}),s=GitTreeParser.parse(o);return void 0===s||0===s.length?void 0:s[0]}async getTreeForRevision(e,t){if(void 0===e)return[];const i=await git_Git.ls_tree(e,t);return GitTreeParser.parse(i)||[]}getVersionedFileBuffer(e,t,i){return git_Git.show(e,t,i,{encoding:"buffer"})}async getVersionedUri(e,t,i){if(i!==gitService_GitService.deletedOrMissingSha)return!i||git_Git.isUncommitted(i)&&!git_Git.isStagedUncommitted(i)?await this.fileExists(e,t)?gitUri_GitUri.file(t):void 0:git_Git.isStagedUncommitted(i)?gitUri_GitUri.git(t,e):gitUri_GitUri.toRevisionUri(i,t,e)}isTrackable(e){const t="string"==typeof e?e:e.scheme;return t===$.File||t===$.Vsls||t===$.Git||t===$.GitLens}async isTracked(e,t,i={}){if(i.ref===gitService_GitService.deletedOrMissingSha)return!1;let o,s,r=i.ref;if("string"==typeof e)[s,t]=git_Git.splitPath(e,t),o=gitUri_GitUri.toKey(e);else{if(!this.isTrackable(e))return!1;s=e.fsPath,t=e.repoPath,r=e.sha,o=gitUri_GitUri.toKey(s)}void 0!==r&&(o+=`:${r}`);let n=this._trackedCache.get(o);return void 0!==n?n=await n:(n=this.isTrackedCore(s,void 0===t?"":t,r),i.skipCacheUpdate?n=await n:(this._trackedCache.set(o,n),n=await n,this._trackedCache.set(o,n),n))}async isTrackedCore(e,t,i){if(i===gitService_GitService.deletedOrMissingSha)return!1;try{let o=Boolean(await git_Git.ls_files(void 0===t?"":t,e));return o||void 0===i||(o=Boolean(await git_Git.ls_files(void 0===t?"":t,e,{ref:i})))||(o=Boolean(await git_Git.ls_files(void 0===t?"":t,e,{ref:`${i}^`}))),o}catch(e){return logger_Logger.error(e),!1}}async getDiffTool(e){return await git_Git.config_get("diff.guitool",e,{local:!0})||await git_Git.config_get("diff.tool",e,{local:!0})}async openDiffTool(e,t,i={}){if(!i.tool){const t=logger_Logger.getCorrelationContext();if(i.tool=await this.getDiffTool(e),void 0===i.tool)throw new Error("No diff tool found");logger_Logger.log(t,`Using tool=${i.tool}`)}const{tool:s}=i,r=o(i,["tool"]);return git_Git.difftool_fileDiff(e,t.fsPath,s,r)}async openDirectoryDiff(e,t,i,o){if(!o){const t=logger_Logger.getCorrelationContext();if(void 0===(o=await this.getDiffTool(e)))throw new Error("No diff tool found");logger_Logger.log(t,`Using tool=${o}`)}return git_Git.difftool_dirDiff(e,o,t,i)}async resolveReference(e,t,i){const o=git_Git.isSha(t)||!git_Git.isShaLike(t)||t.endsWith("^3");if(null==i)return o?t:await git_Git.revparse(e,t)||t;const s=await git_Git.cat_file_validate(e,De.normalizePath(G.relative(e,i.fsPath)),t);return void 0===s?t:s}async validateReference(e,t){return await git_Git.cat_validate(e,t)}stageFile(e,t){return git_Git.add(e,"string"==typeof t?t:git_Git.splitPath(t.fsPath,e)[0])}unStageFile(e,t){return git_Git.reset(e,"string"==typeof t?t:git_Git.splitPath(t.fsPath,e)[0])}stashApply(e,t,i=!1){return git_Git.stash_apply(e,t,i)}stashDelete(e,t){return git_Git.stash_delete(e,t)}stashSave(e,t,i){if(void 0===i)return git_Git.stash_save(e,t);gitService_GitService.ensureGitVersion("2.13.2","Stashing individual files");const o=i.map(t=>git_Git.splitPath(t.fsPath,e)[0]);return git_Git.stash_push(e,o,t)}static getEncoding(e,t){const i="string"==typeof e?gitUri_GitUri.resolveToUri(t,e):e;return git_Git.getEncoding(r.workspace.getConfiguration("files",i).get("encoding"))}static async initialize(){let e;try{const t=r.extensions.getExtension("vscode.git");if(void 0!==t){e=(t.isActive?t.exports:await t.activate()).getAPI(1).git.path}}catch(e){}await git_Git.setOrFindGitPath(e||r.workspace.getConfiguration("git").get("path"))}static getGitPath(){return git_Git.getGitPath()}static getGitVersion(){return git_Git.getGitVersion()}static isShaLike(e){return git_Git.isShaLike(e)}static isStagedUncommitted(e){return git_Git.isStagedUncommitted(e)}static isUncommitted(e){return git_Git.isUncommitted(e)}static shortenSha(e,t={}){if(void 0!==e)return t=Object.assign({deletedOrMissing:"(deleted)",working:""},t),null==e||0===e.length?t.working:e===gitService_GitService.deletedOrMissingSha?t.deletedOrMissing:git_Git.isShaLike(e)||git_Git.isStagedUncommitted(e)?git_Git.shortenSha(e,t):e}static compareGitVersion(e,t){return Ge.compare(Ge.fromString(this.getGitVersion()),Ge.fromString(e))}static ensureGitVersion(e,t){const i=this.getGitVersion();if(-1===Ge.compare(Ge.fromString(i),Ge.fromString(e)))throw new Error(`${t} requires a newer version of Git (>= ${e}) than is currently installed (${i}). Please install a more recent version of Git to use this GitLens feature.`)}}gitService_GitService.emptyPromise=Promise.resolve(void 0),gitService_GitService.deletedOrMissingSha=git_Git.deletedOrMissingSha,gitService_GitService.stagedUncommittedSha=git_Git.stagedUncommittedSha,gitService_GitService.uncommittedSha=git_Git.uncommittedSha,s([Oe()],gitService_GitService.prototype,"applyChangesToWorkingFile",null),s([Oe()],gitService_GitService.prototype,"checkout",null),s([$e(),Oe()],gitService_GitService.prototype,"fetch",null),s([$e(),Oe()],gitService_GitService.prototype,"fetchAll",null),s([$e(),Oe()],gitService_GitService.prototype,"pullAll",null),s([$e(),Oe()],gitService_GitService.prototype,"pushAll",null),s([Oe()],gitService_GitService.prototype,"findNextCommit",null),s([Oe()],gitService_GitService.prototype,"findNextFileName",null),s([Oe()],gitService_GitService.prototype,"findWorkingFileName",null),s([Oe({args:{0:e=>void 0!==e?`TextEditor(${logger_Logger.toLoggable(e.document.uri)})`:"undefined"}})],gitService_GitService.prototype,"getActiveRepoPath",null),s([Oe()],gitService_GitService.prototype,"getHighlanderRepoPath",null),s([Oe()],gitService_GitService.prototype,"getBlameForFile",null),s([Oe({args:{1:e=>"<contents>"}})],gitService_GitService.prototype,"getBlameForFileContents",null),s([Oe()],gitService_GitService.prototype,"getBlameForLine",null),s([Oe({args:{2:e=>"<contents>"}})],gitService_GitService.prototype,"getBlameForLineContents",null),s([Oe()],gitService_GitService.prototype,"getBlameForRange",null),s([Oe({args:{0:e=>"<blame>"}})],gitService_GitService.prototype,"getBlameForRangeSync",null),s([Oe()],gitService_GitService.prototype,"getBranch",null),s([Oe()],gitService_GitService.prototype,"getBranches",null),s([Oe()],gitService_GitService.prototype,"getChangedFilesCount",null),s([Oe()],gitService_GitService.prototype,"getConfig",null),s([Oe()],gitService_GitService.prototype,"getCurrentUser",null),s([Oe()],gitService_GitService.prototype,"getDiffForFile",null),s([Oe()],gitService_GitService.prototype,"getDiffForLine",null),s([Oe()],gitService_GitService.prototype,"getDiffStatus",null),s([Oe()],gitService_GitService.prototype,"getFileStatusForCommit",null),s([Oe()],gitService_GitService.prototype,"getRecentLogCommitForFile",null),s([Oe()],gitService_GitService.prototype,"getRecentShaForFile",null),s([Oe()],gitService_GitService.prototype,"getLogCommit",null),s([Oe()],gitService_GitService.prototype,"getLogCommitForFile",null),s([Oe()],gitService_GitService.prototype,"getLog",null),s([Oe()],gitService_GitService.prototype,"getLogForSearch",null),s([Oe()],gitService_GitService.prototype,"getLogForFile",null),s([Oe()],gitService_GitService.prototype,"hasRemotes",null),s([Oe()],gitService_GitService.prototype,"hasTrackingBranch",null),s([Oe()],gitService_GitService.prototype,"getMergeBase",null),s([Oe()],gitService_GitService.prototype,"getRemotes",null),s([Oe()],gitService_GitService.prototype,"getRepoPath",null),s([Oe()],gitService_GitService.prototype,"getRepoPathOrActive",null),s([Oe()],gitService_GitService.prototype,"getRepositories",null),s([Oe()],gitService_GitService.prototype,"getOrderedRepositories",null),s([Oe()],gitService_GitService.prototype,"getRepository",null),s([Oe()],gitService_GitService.prototype,"getStashList",null),s([Oe()],gitService_GitService.prototype,"getStatusForFile",null),s([Oe()],gitService_GitService.prototype,"getStatusForRepo",null),s([Oe()],gitService_GitService.prototype,"getTags",null),s([Oe()],gitService_GitService.prototype,"getTreeFileForRevision",null),s([Oe()],gitService_GitService.prototype,"getTreeForRevision",null),s([Oe()],gitService_GitService.prototype,"getVersionedFileBuffer",null),s([Oe()],gitService_GitService.prototype,"getVersionedUri",null),s([Oe({exit:e=>e.toString(),singleLine:!0})],gitService_GitService.prototype,"isTracked",null),s([Oe()],gitService_GitService.prototype,"getDiffTool",null),s([Oe()],gitService_GitService.prototype,"openDiffTool",null),s([Oe()],gitService_GitService.prototype,"openDirectoryDiff",null),s([Oe()],gitService_GitService.prototype,"resolveReference",null),s([Oe()],gitService_GitService.prototype,"validateReference",null),s([Oe()],gitService_GitService.prototype,"stageFile",null),s([Oe()],gitService_GitService.prototype,"unStageFile",null),s([Oe()],gitService_GitService.prototype,"stashApply",null),s([Oe()],gitService_GitService.prototype,"stashDelete",null),s([Oe()],gitService_GitService.prototype,"stashSave",null),s([Oe()],gitService_GitService,"initialize",null);const di=/^(?:(#?)([0-9a-f]{3}|[0-9a-f]{6})|((?:rgb|hsl)a?)\((-?\d+%?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d\.]+%?)?\))$/i;function mi(e){e=e.trim();const t=di.exec(e);if(null==t)return null;if("#"===t[1]){const e=t[2];switch(e.length){case 3:return[parseInt(e[0]+e[0],16),parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),1];case 6:return[parseInt(e.substring(0,2),16),parseInt(e.substring(2,4),16),parseInt(e.substring(4,6),16),1]}return null}switch(t[3]){case"rgb":return[parseInt(t[4],10),parseInt(t[5],10),parseInt(t[6],10),1];case"rgba":return[parseInt(t[4],10),parseInt(t[5],10),parseInt(t[6],10),parseFloat(t[7])];default:return null}}const ui="#f66a0a",gi="#0a60f6",pi=/[`\>\#\*\_\-\+\.]/g,fi=`${D.ZeroWidthSpace}===`;let vi;class annotations_Annotations{static applyHeatmap(e,t,i){const o=this.getHeatmapColor(t,i);e.renderOptions.before.borderColor=o}static getHeatmapColor(e,t){const i=t.cold?t.colors.cold:t.colors.hot,o=t.computeAge(e);if(0===o)return i;if(void 0===vi||vi.color!==i){let e=mi(i);null==e&&(e=mi(t.cold?gi:ui));const[o,s,r]=e;vi={color:i,rgb:`${o}, ${s}, ${r}`}}return`rgba(${vi.rgb}, ${(1-o/10).toFixed(2)})`}static getHoverCommandBar(e,t,i,o=0){let s=`[\`${D.MuchGreaterThan}\`](${vo.getMarkdownCommandArgs(e)} "Open Changes") `;if(void 0!==e.previousSha){i===g.RecentChanges&&(i=g.Blame);const t=gitUri_GitUri.toRevisionUri(e.previousSha,e.previousUri.fsPath,e.repoPath);s+=`[\`${D.SquareWithTopShadow}\`](${No.getMarkdownCommandArgs(t,i||g.Blame,o)} "Blame Previous Revision") `}return t&&(s+=`[\`${D.ArrowUpRight}\`](${Do.getMarkdownCommandArgs(e.sha)} "Open in Remote") `),s+=`[\`${D.MiddleEllipsis}\`](${jo.getMarkdownCommandArgs(e.sha)} "Show More Actions")`}static getHoverMessage(e,t,i,o,s=0){null===t&&(t="MMMM Do, YYYY h:mma");let n="",a="",c="",l="";if(e.isUncommitted)c=`\`${"Working Tree"===e.shortSha?"00000000":e.shortSha}\``;else{a=`\n\n${this.getHoverCommandBar(e,0!==i.length,o,s)}`,c=`[\`${e.shortSha}\`](${Vo.getMarkdownCommandArgs(e.sha)} "Show Commit Details")`,n=commitFormatter_CommitFormatter.fromTemplate("${message}",e);for(const e of i)if(void 0!==e.provider){n=e.provider.enrichMessage(n);break}n=`\n\n> ${n.replace(pi,"\\$&").replace(/^===/gm,fi).replace(/\n/g,"\t\n>  ")}`}container_Container.config.hovers.avatars&&(l=` &nbsp; ![](${e.getGravatarUri(container_Container.config.defaultGravatarsStyle).toString(!0)})`);const h=new r.MarkdownString(`${c}${l} &nbsp;__${e.author}__, ${e.fromNow()} &nbsp; _(${e.formatDate(t)})_ ${n}${a}`);return h.isTrusted=!0,h}static getHoverDiffMessage(e,t,i){if(void 0===i||void 0===e.previousSha)return;const o=this.getCodeDiff(i);let s;s=e.isUncommitted?void 0!==t.sha&&gitService_GitService.isStagedUncommitted(t.sha)?`[\`Changes\`](${vo.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${D.Dash} &nbsp; [\`${e.previousShortSha}\`](${Vo.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${D.ArrowLeftRightLong} _${t.shortSha}_\n${o}`:`[\`Changes\`](${vo.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${D.Dash} &nbsp; _uncommitted changes_\n${o}`:`[\`Changes\`](${vo.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${D.Dash} &nbsp; [\`${e.previousShortSha}\`](${Vo.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${D.ArrowLeftRightLong} [\`${e.shortSha}\`](${Vo.getMarkdownCommandArgs(e.sha)} "Show Commit Details")\n${o}`;const n=new r.MarkdownString(s);return n.isTrusted=!0,n}static getCodeDiff(e){const t=void 0===e.previous?void 0:e.previous[0];return`\`\`\`\n-  ${void 0===t||void 0===t.line?"":t.line.trim()}\n+  ${void 0===e.line?"":e.line.trim()}\n\`\`\``}static async changesHover(e,t,i){const o=!e.isUncommitted||void 0!==i.sha&&gitService_GitService.isStagedUncommitted(i.sha)?e.previousSha:void 0,s=await container_Container.git.getDiffForLine(i,t,o);return{hoverMessage:this.getHoverDiffMessage(e,i,s)}}static gutter(e,t,i,o){const s={renderOptions:{before:Object.assign({},o)}};e.isUncommitted&&(s.renderOptions.before.color=o.uncommittedColor);const r=commitFormatter_CommitFormatter.fromTemplate(t,e,i);return s.renderOptions.before.contentText=De.pad(r.replace(/ /g,D.Space),1,1),s}static gutterRenderOptions(e,t,i,o){let s=0;for(const e of O.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){s=-1;break}s+=e.truncateTo}s>=0&&(s+=De.getWidth(De.interpolate(i,void 0)))>0&&(s+=3);let n,a=void 0,c=void 0;if(t.enabled&&(a="solid",c="left"===t.location?"0 0 0 2px":"0 2px 0 0"),s>=0){const e=r.workspace.getConfiguration("editor").get("letterSpacing");n=null!=e&&0!==e?`calc(${s}ch + ${Math.round(s*e)}px)`:`${s}ch`}return{backgroundColor:new r.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:a,borderWidth:c,color:new r.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:"normal",fontStyle:"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:e?"overline solid rgba(0, 0, 0, .2)":"none",width:n,uncommittedColor:new r.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}static heatmap(e,t,i){const o={renderOptions:{before:Object.assign({},i)}};return annotations_Annotations.applyHeatmap(o,e.date,t),o}static heatmapRenderOptions(){return{borderStyle:"solid",borderWidth:"0 0 0 2px",contentText:D.ZeroWidthSpace,height:"100%",margin:"0 26px -1px 0"}}static trailing(e,t,i,o=!0){const s=commitFormatter_CommitFormatter.fromTemplate(t,e,{truncateMessageAtNewLine:!0,dateFormat:i});return{renderOptions:{after:{backgroundColor:new r.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new r.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:De.pad(s.replace(/ /g,D.Space),1,1),fontWeight:"normal",fontStyle:"normal",textDecoration:`none;${o?"":" position: absolute;"}`}}}}}class blameAnnotationProvider_BlameAnnotationProviderBase extends annotationProvider_AnnotationProviderBase{constructor(e,t,i,o){super(e,t,i,o),this._uri=t.uri,this._blame=e.document.isDirty?container_Container.git.getBlameForFileContents(this._uri,e.document.getText()):container_Container.git.getBlameForFile(this._uri),e.document.isDirty&&t.setForceDirtyStateChangeOnNextDocumentChange()}clear(){this._hoverProviderDisposable&&this._hoverProviderDisposable.dispose(),super.clear()}async onReset(e){return void 0!==this.editor&&(this._blame=this.editor.document.isDirty?container_Container.git.getBlameForFileContents(this._uri,this.editor.document.getText()):container_Container.git.getBlameForFile(this._uri)),super.onReset(e)}async selection(e,t){if(!this.highlightDecoration)return;if(!(void 0!==t||(t=await this._blame)&&t.lines.length))return;let i=void 0;if("string"==typeof e)i=e;else if("number"==typeof e){if(e>=0){const o=t.lines[e];i=o&&o.sha}}else i=Ee.first(t.commits.values()).sha;if(!i)return void this.editor.setDecorations(this.highlightDecoration,[]);const o=E.filterMap(t.lines,e=>e.sha===i?this.editor.document.validateRange(new r.Range(e.line,0,e.line,Number.MAX_SAFE_INTEGER)):void 0);this.editor.setDecorations(this.highlightDecoration,o)}async validate(){const e=await this._blame;return void 0!==e&&0!==e.lines.length}async getBlame(){const e=await this._blame;if(void 0!==e&&0!==e.lines.length)return e}getComputedHeatmap(e){const t=[];let i,o;for(const s of e.lines)o!==s.sha&&(o=s.sha,void 0!==(i=e.commits.get(s.sha))&&t.push(i.date));t.sort((e,t)=>e.getTime()-t.getTime());const s=Math.floor(t.length/2),r=t.length%2?t[s].getTime():(t[s-1].getTime()+t[s].getTime())/2,n=[],a=t[t.length-1].getTime();let c=(a-r)/5;for(let e=5;e>0;e--)n.push(r+c*e);n.push(r);const l=t[0].getTime();c=(r-l)/4;for(let e=1;e<=4;e++)n.push(r-c*e);const h=new Date;return h.setDate(h.getDate()-(container_Container.config.heatmap.ageThreshold||90)),{cold:a<h.getTime(),colors:{cold:container_Container.config.heatmap.coldColor,hot:container_Container.config.heatmap.hotColor},median:r,newest:a,oldest:l,computeAge:e=>{const t=e.getTime();let i=0;for(let e=0;e<n.length&&(i=e,!(t>=n[e]));e++);return i}}}registerHoverProviders(e){if(!container_Container.config.hovers.enabled||!container_Container.config.hovers.annotations.enabled||!e.details&&!e.changes)return;const t=[];e.changes&&t.push(r.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),e.details&&t.push(r.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=r.Disposable.from(...t)}async provideDetailsHover(e,t,i){const o=await this.getCommitForHover(t);if(void 0===o)return;let s=void 0;o.isUncommitted||void 0!==(s=await container_Container.git.getLogCommitForFile(o.repoPath,o.uri.fsPath,{ref:o.sha}))&&(s.previousFileName=o.previousFileName,s.previousSha=o.previousSha);const n=annotations_Annotations.getHoverMessage(s||o,container_Container.config.defaultDateFormat,await container_Container.git.getRemotes(o.repoPath),this.annotationType,this.editor.selection.active.line);return new r.Hover(n,e.validateRange(new r.Range(t.line,0,t.line,Number.MAX_SAFE_INTEGER)))}async provideChangesHover(e,t,i){const o=await this.getCommitForHover(t);if(void 0===o)return;const s=await annotations_Annotations.changesHover(o,t.line,await gitUri_GitUri.fromUri(e.uri));return void 0!==s.hoverMessage?new r.Hover(s.hoverMessage,e.validateRange(new r.Range(t.line,0,t.line,Number.MAX_SAFE_INTEGER))):void 0}async getCommitForHover(e){if("line"!==container_Container.config.hovers.annotations.over&&0!==e.character)return;const t=await this.getBlame();if(void 0===t)return;const i=t.lines[e.line];return t.commits.get(i.sha)}}class gutterBlameAnnotationProvider_GutterBlameAnnotationProvider extends blameAnnotationProvider_BlameAnnotationProviderBase{async onProvideAnnotation(e,t){this.annotationType=g.Blame;const i=await this.getBlame();if(void 0===i)return!1;const o=process.hrtime(),s=container_Container.config.blame,n=De.getTokensFromTemplate(s.format).reduce((e,t)=>(e[t.key]=t.options,e),{}),a={dateFormat:null===s.dateFormat?container_Container.config.defaultDateFormat:s.dateFormat,tokenOptions:n},c=s.avatars,l=container_Container.config.defaultGravatarsStyle,h=s.separateLines,d=annotations_Annotations.gutterRenderOptions(h,s.heatmap,s.format,a);this.decorations=[];const m=Object.create(null),u=c?Object.create(null):void 0;let p,f,v,_,w=!1;s.heatmap.enabled&&(_=this.getComputedHeatmap(i));for(const e of i.lines){const t=e.line;v!==e.sha?(w=!1,v=e.sha,void 0!==(p=i.commits.get(e.sha))&&(void 0===(f=m[e.sha])?(f=annotations_Annotations.gutter(p,s.format,a,d),void 0!==_&&annotations_Annotations.applyHeatmap(f,p.date,_),f.range=new r.Range(t,0,t,0),this.decorations.push(f),c&&void 0!==p.email&&this.addOrUpdateGravatarDecoration(p,f.range,l,u),m[e.sha]=f):(f=Object.assign({},f,{range:new r.Range(t,0,t,0)}),this.decorations.push(f),c&&void 0!==p.email&&this.addOrUpdateGravatarDecoration(p,f.range,l,u)))):(f=Object.assign({},f),s.compact&&!w&&(f.renderOptions={before:Object.assign({},f.renderOptions.before,{contentText:D.Space.repeat(De.getWidth(f.renderOptions.before.contentText))})},h&&(f.renderOptions.before.textDecoration="none"),w=!0),f.range=new r.Range(t,0,t,0),this.decorations.push(f),c&&!s.compact&&void 0!==p&&void 0!==p.email&&this.addOrUpdateGravatarDecoration(p,f.range,l,u))}if(this.decorations.length&&(this.editor.setDecorations(this.decoration,this.decorations),c)){this.additionalDecorations=[];for(const e of O.values(u))this.additionalDecorations.push(e),this.editor.setDecorations(e.decoration,e.ranges)}return logger_Logger.log(`${De.getDurationMilliseconds(o)} ms to compute gutter blame annotations`),this.registerHoverProviders(container_Container.config.hovers.annotations),this.selection(e,i),!0}addOrUpdateGravatarDecoration(e,t,i,o){const s=o[e.email];void 0===s?o[e.email]={decoration:r.window.createTextEditorDecorationType({gutterIconPath:e.getGravatarUri(i),gutterIconSize:"16px 16px"}),ranges:[t]}:s.ranges.push(t)}}class heatmapBlameAnnotationProvider_HeatmapBlameAnnotationProvider extends blameAnnotationProvider_BlameAnnotationProviderBase{async onProvideAnnotation(e,t){this.annotationType=g.Heatmap;const i=await this.getBlame();if(void 0===i)return!1;const o=process.hrtime(),s=annotations_Annotations.heatmapRenderOptions();this.decorations=[];const n=Object.create(null);let a,c;const l=this.getComputedHeatmap(i);for(const e of i.lines){const t=e.line;void 0===(c=n[e.sha])?void 0!==(a=i.commits.get(e.sha))&&((c=annotations_Annotations.heatmap(a,l,s)).range=new r.Range(t,0,t,0),this.decorations.push(c),n[e.sha]=c):(c=Object.assign({},c,{range:new r.Range(t,0,t,0)}),this.decorations.push(c))}return this.decorations.length&&this.editor.setDecorations(this.decoration,this.decorations),logger_Logger.log(`${De.getDurationMilliseconds(o)} ms to compute heatmap annotations`),this.registerHoverProviders(container_Container.config.hovers.annotations),this.selection(e,i),!0}}class recentChangesAnnotationProvider_RecentChangesAnnotationProvider extends annotationProvider_AnnotationProviderBase{constructor(e,t,i,o){super(e,t,i,o),this._uri=t.uri}async onProvideAnnotation(e){this.annotationType=g.RecentChanges;const t=await container_Container.git.getRecentLogCommitForFile(this._uri.repoPath,this._uri.fsPath);if(void 0===t)return!1;const i=await container_Container.git.getDiffForFile(this._uri,t.previousSha);if(void 0===i)return!1;const o=process.hrtime(),s=container_Container.config,n=s.defaultDateFormat;this.decorations=[];for(const e of i.chunks){let i=e.currentPosition.start-2;for(const o of e.lines){if(void 0===o.line)continue;if(i++,"unchanged"===o.state)continue;const e=this.editor.document.validateRange(new r.Range(new r.Position(i,0),new r.Position(i,Number.MAX_SAFE_INTEGER)));let a=void 0;s.hovers.enabled&&s.hovers.annotations.enabled&&(s.hovers.annotations.details&&this.decorations.push({hoverMessage:annotations_Annotations.getHoverMessage(t,n,await container_Container.git.getRemotes(t.repoPath),this.annotationType,this.editor.selection.active.line),range:e}),s.hovers.annotations.changes&&void 0===(a=annotations_Annotations.getHoverDiffMessage(t,this._uri,o)))||this.decorations.push({hoverMessage:a,range:e})}}return this.editor.setDecorations(this.decoration,this.decorations),logger_Logger.log(`${De.getDurationMilliseconds(o)} ms to compute recent changes annotations`),!0}async selection(e){}async validate(){return!0}}var _i;!function(e){e.User="User",e.BlameabilityChanged="BlameabilityChanged",e.ColumnChanged="ColumnChanged",e.Disposing="Disposing",e.DocumentChanged="DocumentChanged",e.DocumentClosed="DocumentClosed"}(_i||(_i={}));const wi={blameAnnotation:r.window.createTextEditorDecorationType({rangeBehavior:r.DecorationRangeBehavior.ClosedOpen,textDecoration:"none"}),blameHighlight:void 0,heatmapAnnotation:r.window.createTextEditorDecorationType({}),heatmapHighlight:void 0,recentChangesAnnotation:void 0,recentChangesHighlight:void 0};class fileAnnotationController_FileAnnotationController{constructor(){this._onDidToggleAnnotations=new r.EventEmitter,this._annotationProviders=new Map,this._keyboardScope=void 0,this._annotationType=void 0,this._disposable=r.Disposable.from(io.onDidChange(this.onConfigurationChanged,this)),this._toggleModes=new Map,this.onConfigurationChanged(io.initializingChangeEvent)}get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}dispose(){this.clearAll(),wi.blameAnnotation&&wi.blameAnnotation.dispose(),wi.blameHighlight&&wi.blameHighlight.dispose(),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=container_Container.config;if(io.changed(e,io.name("blame")("highlight").value)){wi.blameHighlight&&wi.blameHighlight.dispose();const e=t.blame.highlight;e.enabled?wi.blameHighlight=r.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:e.locations.includes(f.Line)?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(f.Overview)?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(f.Gutter)?container_Container.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(f.Gutter)?container_Container.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}}):wi.blameHighlight=void 0}if(io.changed(e,io.name("recentChanges")("highlight").value)){wi.recentChangesAnnotation&&wi.recentChangesAnnotation.dispose();const e=t.recentChanges.highlight;wi.recentChangesAnnotation=r.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:e.locations.includes(f.Line)?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(f.Overview)?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(f.Gutter)?container_Container.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(f.Gutter)?container_Container.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}})}const i=io.initializing(e);if(io.changed(e,io.name("blame")("toggleMode").value)&&(this._toggleModes.set(g.Blame,t.blame.toggleMode),i||t.blame.toggleMode!==l.File||this.clearAll()),io.changed(e,io.name("heatmap")("toggleMode").value)&&(this._toggleModes.set(g.Heatmap,t.heatmap.toggleMode),i||t.heatmap.toggleMode!==l.File||this.clearAll()),io.changed(e,io.name("recentChanges")("toggleMode").value)&&(this._toggleModes.set(g.RecentChanges,t.recentChanges.toggleMode),i||t.recentChanges.toggleMode!==l.File||this.clearAll()),!i&&(io.changed(e,io.name("blame").value)||io.changed(e,io.name("recentChanges").value)||io.changed(e,io.name("heatmap").value)||io.changed(e,io.name("hovers").value)))for(const e of this._annotationProviders.values())void 0!==e&&(e.annotationType===g.RecentChanges?e.reset({decoration:wi.recentChangesAnnotation,highlightDecoration:wi.recentChangesHighlight}):e.annotationType===g.Blame?e.reset({decoration:wi.blameAnnotation,highlightDecoration:wi.blameHighlight}):this.show(e.editor,g.Heatmap))}async onActiveTextEditorChanged(e){if(void 0!==e&&!U(e))return;if(this._editor=e,this.isInWindowToggle())return void await this.show(e,this._annotationType);const t=this.getProvider(e);void 0===t?(N(F.AnnotationStatus,void 0),this.detachKeyboardHook()):(N(F.AnnotationStatus,t.status),this.attachKeyboardHook())}onBlameStateChanged(e){if(e.blameable)return;const t=r.window.activeTextEditor;void 0!==t&&this.clear(t,_i.BlameabilityChanged)}onDirtyStateChanged(e){for(const[t,i]of this._annotationProviders)e.document.is(i.document)&&this.clearCore(t,_i.DocumentChanged)}onTextDocumentClosed(e){if(container_Container.git.isTrackable(e.uri))for(const[t,i]of this._annotationProviders)i.document===e&&this.clearCore(t,_i.DocumentClosed)}onTextEditorViewColumnChanged(e){const t=this.getProvider(e.textEditor);if(void 0!==t)t.restore(e.textEditor);else{const t=Ee.find(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey,_i.ColumnChanged)}}onVisibleTextEditorsChanged(e){let t;for(const i of e)void 0!==(t=this.getProvider(i))&&t.restore(i)}isInWindowToggle(){return this.getToggleMode(this._annotationType)===l.Window}getToggleMode(e){return void 0===e?l.File:this._toggleModes.get(e)||l.File}clear(e,t=_i.User){return this.isInWindowToggle()?this.clearAll():this.clearCore(annotationProvider_AnnotationProviderBase.getCorrelationKey(e),t)}async clearAll(){this._annotationType=void 0;for(const[e]of this._annotationProviders)await this.clearCore(e,_i.Disposing)}async getAnnotationType(e){const t=this.getProvider(e);if(void 0===t)return;const i=await container_Container.tracker.get(e.document);return void 0!==i&&i.isBlameable?t.annotationType:void 0}getProvider(e){if(void 0!==e&&void 0!==e.document)return this._annotationProviders.get(annotationProvider_AnnotationProviderBase.getCorrelationKey(e))}async show(e,t,i){if(this.getToggleMode(t)===l.Window){let i=void 0===this._annotationType;const o=!i&&this._annotationType!==t;if(this._annotationType=t,o&&(await this.clearAll(),i=!0),i)for(const i of r.window.visibleTextEditors)i!==e&&this.show(i,t)}if(void 0===e)return!1;if(this._editor=e,!(await container_Container.tracker.getOrAdd(e.document)).isBlameable)return!1;const o=this.getProvider(e);return void 0!==o&&o.annotationType===t?(await o.selection(i),!0):void 0!==await r.window.withProgress({location:r.ProgressLocation.Window},async s=>{await N(F.AnnotationStatus,Me.Computing);const r=this.showAnnotationsCore(o,e,t,i,s),n=await r;return e===this._editor&&await N(F.AnnotationStatus,n&&n.status),r})}async toggle(e,t,i){if(void 0!==e){const i=await container_Container.tracker.getOrAdd(e.document);if(t===g.RecentChanges&&!i.isTracked||!i.isBlameable)return!1}const o=this.getProvider(e);if(void 0===o)return this.show(e,t,i);const s=o.annotationType!==t;return this.isInWindowToggle()?await this.clearAll():await this.clearCore(o.correlationKey,_i.User),!!s&&this.show(e,t,i)}async attachKeyboardHook(){void 0===this._keyboardScope&&(this._keyboardScope=await container_Container.keyboard.beginScope({escape:{onDidPressKey:async e=>{const t=this._editor;void 0!==t&&await this.clear(t,_i.User)}}}))}async clearCore(e,t){const i=this._annotationProviders.get(e);void 0!==i&&(logger_Logger.log(`${t}:`,`Clear annotations for ${e}`),this._annotationProviders.delete(e),i.dispose(),0!==this._annotationProviders.size&&e!==annotationProvider_AnnotationProviderBase.getCorrelationKey(this._editor)||(await N(F.AnnotationStatus,void 0),await this.detachKeyboardHook()),0===this._annotationProviders.size&&(logger_Logger.log("Remove all listener registrations for annotations"),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._annotationsDisposable=void 0),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){void 0!==this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,i,o,s){if(void 0!==s){let e="annotations";switch(i){case g.Blame:e="blame annotations";break;case g.Heatmap:e="heatmap annotations";break;case g.RecentChanges:e="recent changes annotations"}s.report({message:`Computing ${e} for ${G.basename(t.document.fileName)}`})}await this.attachKeyboardHook();const n=await container_Container.tracker.getOrAdd(t.document);let a=void 0;switch(i){case g.Blame:a=new gutterBlameAnnotationProvider_GutterBlameAnnotationProvider(t,n,wi.blameAnnotation,wi.blameHighlight);break;case g.Heatmap:a=new heatmapBlameAnnotationProvider_HeatmapBlameAnnotationProvider(t,n,wi.heatmapAnnotation,wi.heatmapHighlight);break;case g.RecentChanges:a=new recentChangesAnnotationProvider_RecentChangesAnnotationProvider(t,n,wi.recentChangesAnnotation,wi.recentChangesHighlight)}if(void 0!==a&&await a.validate())return void 0!==e&&await this.clearCore(e.correlationKey,_i.User),this._annotationsDisposable||0!==this._annotationProviders.size||(logger_Logger.log("Add listener registrations for annotations"),this._annotationsDisposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor(xe.debounce(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors(xe.debounce(this.onVisibleTextEditorsChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),container_Container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),container_Container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this))),this._annotationProviders.set(a.correlationKey,a),await a.provideAnnotation(o)?(this._onDidToggleAnnotations.fire(),a):void 0}}const bi=r.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:r.DecorationRangeBehavior.ClosedOpen});class lineAnnotationController_LineAnnotationController{constructor(){this._enabled=!1,this._disposable=r.Disposable.from(io.onDidChange(this.onConfigurationChanged,this),container_Container.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),r.debug.onDidStartDebugSession(this.onDebugSessionStarted,this)),this.onConfigurationChanged(io.initializingChangeEvent)}dispose(){this.clearAnnotations(this._editor),this._debugSessionEndDisposable&&this._debugSessionEndDisposable.dispose(),container_Container.lineTracker.stop(this),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){io.changed(e,io.name("currentLine").value)&&(io.changed(e,io.name("currentLine")("enabled").value)&&(container_Container.config.currentLine.enabled?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(r.window.activeTextEditor))}get suspended(){return!this._enabled||void 0!==this._suspended}resume(e="user"){switch(this.setLineTracker(!0),e){case"debugging":if("user"!==this._suspended)return this._suspended=void 0,!0;break;case"user":if(void 0!==this._suspended)return this._suspended=void 0,!0}return!1}suspend(e="user"){return this.setLineTracker(!1),"user"!==this._suspended&&(this._suspended=e,!0)}onActiveLinesChanged(e){e.pending||void 0===e.lines?this.clear(e.editor):this.refresh(e.editor)}onDebugSessionStarted(){void 0===this._debugSessionEndDisposable&&(this._debugSessionEndDisposable=r.debug.onDidTerminateDebugSession(this.onDebugSessionEnded,this)),this.suspend("debugging")&&this.refresh(r.window.activeTextEditor)}onDebugSessionEnded(){void 0!==this._debugSessionEndDisposable&&(this._debugSessionEndDisposable.dispose(),this._debugSessionEndDisposable=void 0),this.resume("debugging")&&this.refresh(r.window.activeTextEditor)}onFileAnnotationsToggled(){this.refresh(r.window.activeTextEditor)}clear(e){this._editor!==e&&void 0!==this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume("user")&&await this.refresh(e):this.suspend("user")&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(bi,[])}async refresh(e){if(void 0===e&&void 0===this._editor)return;const t=container_Container.lineTracker.lines;if(void 0===e||void 0===t||!U(e))return this.clear(this._editor);this._editor!==e&&(this.clear(this._editor),this._editor=e);const i=container_Container.config.currentLine;if(this.suspended)return this.clear(e);if(!(await container_Container.tracker.getOrAdd(e.document)).isBlameable&&this.suspended)return this.clear(e);if(void 0===e.document||!container_Container.lineTracker.includesAll(t))return;const o=container_Container.config.currentLine.scrollable,s=[];for(const n of t){const t=container_Container.lineTracker.getState(n);if(void 0===t||void 0===t.commit)continue;const a=annotations_Annotations.trailing(t.commit,i.format,null===i.dateFormat?container_Container.config.defaultDateFormat:i.dateFormat,o);a.range=e.document.validateRange(new r.Range(n,Number.MAX_SAFE_INTEGER,n,Number.MAX_SAFE_INTEGER)),s.push(a)}e.setDecorations(bi,s)}setLineTracker(e){e?container_Container.lineTracker.isSubscribed(this)||container_Container.lineTracker.start(this,r.Disposable.from(container_Container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))):container_Container.lineTracker.stop(this)}}class codeLensProvider_GitRecentChangeCodeLens extends r.CodeLens{constructor(e,t,i,o,s,r,n,a,c){super(n,c),this.languageId=e,this.symbol=t,this.uri=i,this.blame=o,this.blameRange=s,this.isFullRange=r,this.desiredCommand=a}getBlame(){return this.blame&&this.blame()}}class codeLensProvider_GitAuthorsCodeLens extends r.CodeLens{constructor(e,t,i,o,s,r,n,a){super(n),this.languageId=e,this.symbol=t,this.uri=i,this.blame=o,this.blameRange=s,this.isFullRange=r,this.desiredCommand=a}getBlame(){return this.blame()}}class codeLensProvider_GitCodeLensProvider{constructor(e,t,i){this._git=t,this._tracker=i,this._onDidChangeCodeLenses=new r.EventEmitter}get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}reset(e){this._onDidChangeCodeLenses.fire()}async provideCodeLenses(e,t){const i=await this._tracker.getOrAdd(e);if(!i.isBlameable)return[];let o=!1;if(e.isDirty)if(i.isDirtyIdle){const t=container_Container.config.advanced.blame.sizeThresholdAfterEdit;t>0&&e.lineCount>t&&(o=!0)}else o=!0;const s=io.get(io.name("codeLens").value,e.uri);let n=s.scopesByLanguage&&s.scopesByLanguage.find(t=>void 0!==t.language&&t.language.toLowerCase()===e.languageId);null==n&&(n={language:void 0}),null==n.scopes&&(n.scopes=s.scopes),null==n.symbolScopes&&(n.symbolScopes=s.symbolScopes),n.symbolScopes=null!=n.symbolScopes?n.symbolScopes=n.symbolScopes.map(e=>e.toLowerCase()):[];const a=[],c=i.uri;let l,h;if(o)1===n.scopes.length&&n.scopes.includes(d.Document)||(h=await r.commands.executeCommand(x.ExecuteDocumentSymbolProvider,e.uri));else{if(t.isCancellationRequested)return a;if(1===n.scopes.length&&n.scopes.includes(d.Document)?l=e.isDirty?await this._git.getBlameForFileContents(c,e.getText()):await this._git.getBlameForFile(c):[l,h]=await Promise.all([e.isDirty?this._git.getBlameForFileContents(c,e.getText()):this._git.getBlameForFile(c),r.commands.executeCommand(x.ExecuteDocumentSymbolProvider,e.uri)]),void 0===l||0===l.lines.length)return a}if(t.isCancellationRequested)return a;const m=xe.once(()=>e.validateRange(new r.Range(0,1e6,1e6,1e6))),u=o?{title:this.getDirtyTitle(s)}:void 0;if(void 0!==h){logger_Logger.log("GitCodeLensProvider.provideCodeLenses:",`${h.length} symbol(s) found`);for(const t of h)this.provideCodeLens(a,e,t,n,m,l,c,s,o,u)}if((n.scopes.includes(d.Document)||n.symbolScopes.includes("file"))&&!n.symbolScopes.includes("!file")&&!a.find(e=>0===e.range.start.line&&0===e.range.end.line)){const t=m();let i=void 0;if(o||s.recentChange.enabled){o||(i=xe.once(()=>this._git.getBlameForRangeSync(l,c,t)));const n=new r.SymbolInformation(c.getFilename(),r.SymbolKind.File,"",new r.Location(c.documentUri(),new r.Range(0,0,0,t.start.character)));a.push(new codeLensProvider_GitRecentChangeCodeLens(e.languageId,n,c,i,t,!0,Ci(n),s.recentChange.command,u))}if(!o&&s.authors.enabled){void 0===i&&(i=xe.once(()=>this._git.getBlameForRangeSync(l,c,t)));const o=new r.SymbolInformation(c.getFilename(),r.SymbolKind.File,"",new r.Location(c.documentUri(),new r.Range(0,1,0,t.start.character)));a.push(new codeLensProvider_GitAuthorsCodeLens(e.languageId,o,c,i,t,!0,Ci(o),s.authors.command))}}return a}getValidateSymbolRange(e,t,i,o){let s,n=!1;const a=r.SymbolKind[e.kind].toLowerCase();switch(e.kind){case r.SymbolKind.File:(t.scopes.includes(d.Containers)||t.symbolScopes.includes(a))&&(n=!t.symbolScopes.includes(`!${a}`)),n&&(s=i());break;case r.SymbolKind.Package:(t.scopes.includes(d.Containers)||t.symbolScopes.includes(a))&&(n=!t.symbolScopes.includes(`!${a}`)),n&&0===(s=Ci(e)).start.line&&0===s.end.line&&(s=i());break;case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Struct:(t.scopes.includes(d.Containers)||t.symbolScopes.includes(a))&&(s=Ci(e),n=!t.symbolScopes.includes(`!${a}`)&&(o||!s.isSingleLine));break;case r.SymbolKind.Constructor:case r.SymbolKind.Enum:case r.SymbolKind.Function:case r.SymbolKind.Method:case r.SymbolKind.Property:(t.scopes.includes(d.Blocks)||t.symbolScopes.includes(a))&&(s=Ci(e),n=!t.symbolScopes.includes(`!${a}`)&&(o||!s.isSingleLine));break;default:t.symbolScopes.includes(a)&&(s=Ci(e),n=!t.symbolScopes.includes(`!${a}`)&&(o||!s.isSingleLine))}return n?s||Ci(e):void 0}provideCodeLens(e,t,i,o,s,n,a,c,l,h){try{const d=this.getValidateSymbolRange(i,o,s,c.includeSingleLineSymbols);if(void 0===d)return;const m=t.lineAt(Ci(i).start);if(e.length&&e[e.length-1].range.start.line===m.lineNumber)return;let u,g=0;if((l||c.recentChange.enabled)&&(l||(u=xe.once(()=>this._git.getBlameForRangeSync(n,a,d))),e.push(new codeLensProvider_GitRecentChangeCodeLens(t.languageId,i,a,u,d,!1,m.range.with(new r.Position(m.range.start.line,g)),c.recentChange.command,h)),g++),c.authors.enabled){let o=!d.isSingleLine;if(!o&&"csharp"===t.languageId)switch(i.kind){case r.SymbolKind.File:break;case r.SymbolKind.Package:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Constructor:case r.SymbolKind.Method:case r.SymbolKind.Function:case r.SymbolKind.Enum:o=!0}o&&!l&&(void 0===u&&(u=xe.once(()=>this._git.getBlameForRangeSync(n,a,d))),e.push(new codeLensProvider_GitAuthorsCodeLens(t.languageId,i,a,u,d,!1,m.range.with(new r.Position(m.range.start.line,g)),c.authors.command)))}}finally{if(yi(i))for(const r of i.children)this.provideCodeLens(e,t,r,o,s,n,a,c,l,h)}}resolveCodeLens(e,t){return e instanceof codeLensProvider_GitRecentChangeCodeLens?this.resolveGitRecentChangeCodeLens(e,t):e instanceof codeLensProvider_GitAuthorsCodeLens?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=Ee.first(i.commits.values());let s=`${o.author}, ${o.formattedDate}`;switch(container_Container.config.debug&&(s+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${o.shortSha})]`),e.desiredCommand){case h.DiffWithPrevious:return this.applyDiffWithPreviousCommand(s,e,i,o);case h.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(s,e,i,o);case h.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(s,e,i,o);case h.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(s,e,i,o);case h.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(s,e,i,o);case h.ToggleFileBlame:return this.applyToggleFileBlameCommand(s,e,i);default:return e}}resolveGitAuthorsCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=i.authors.size;let s=`${o} ${o>1?"authors":"author"} (${Ee.first(i.authors.values()).name}${o>1?" and others":""})`;switch(container_Container.config.debug&&(s+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${Ee.join(Ee.map(i.authors.values(),e=>e.name),", ")})]`),e.desiredCommand){case h.DiffWithPrevious:return this.applyDiffWithPreviousCommand(s,e,i);case h.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(s,e,i);case h.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(s,e,i);case h.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(s,e,i);case h.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(s,e,i);case h.ToggleFileBlame:return this.applyToggleFileBlameCommand(s,e,i);default:return e}}applyDiffWithPreviousCommand(e,t,i,o){if(void 0===o){const e=i.allLines[t.range.start.line];o=i.commits.get(e.sha)}return t.command={title:e,command:Mi.DiffWithPrevious,arguments:[t.uri.toFileUri(),{commit:o}]},t}applyShowQuickCommitDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":h.ShowQuickCommitDetails,arguments:[t.uri.toFileUri(),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCommitFileDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":h.ShowQuickCommitFileDetails,arguments:[t.uri.toFileUri(),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCurrentBranchHistoryCommand(e,t,i,o){return t.command={title:e,command:h.ShowQuickCurrentBranchHistory,arguments:[t.uri.toFileUri()]},t}applyShowQuickFileHistoryCommand(e,t,i,o){return t.command={title:e,command:h.ShowQuickFileHistory,arguments:[t.uri.toFileUri(),{range:t.isFullRange?void 0:t.blameRange}]},t}applyToggleFileBlameCommand(e,t,i){return t.command={title:e,command:Mi.ToggleFileBlame,arguments:[t.uri.toFileUri()]},t}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?container_Container.config.strings.codeLens.unsavedChanges.recentChangeAndAuthors:e.recentChange.enabled?container_Container.config.strings.codeLens.unsavedChanges.recentChangeOnly:container_Container.config.strings.codeLens.unsavedChanges.authorsOnly}}function Ci(e){return yi(e)?e.range:e.location.range}function yi(e){return void 0!==e.children}codeLensProvider_GitCodeLensProvider.selector=[{scheme:$.File},{scheme:$.Vsls},{scheme:$.Git},{scheme:$.GitLens}];class codeLensController_GitCodeLensController{constructor(){this._canToggle=!1,this._disposable=r.Disposable.from(io.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(io.initializingChangeEvent)}dispose(){this._providerDisposable&&this._providerDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=io.name("codeLens").value;if(io.changed(e,t,null)||io.changed(e,io.name("defaultDateStyle").value)||io.changed(e,io.name("defaultDateFormat").value)){io.initializing(e)||logger_Logger.log("CodeLens config changed; resetting CodeLens provider");const t=container_Container.config.codeLens;t.enabled&&(t.recentChange.enabled||t.authors.enabled)?void 0!==this._provider?this._provider.reset():this.createProvider():(void 0!==this._providerDisposable&&(this._providerDisposable.dispose(),this._providerDisposable=void 0),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,N(F.CanToggleCodeLens,this._canToggle)}}onBlameStateChanged(e){void 0!==this._provider&&e.blameable&&(logger_Logger.log("Blame state changed; resetting CodeLens provider"),this._provider.reset("saved"))}onDirtyIdleTriggered(e){if(void 0===this._provider||!e.document.isBlameable)return;const t=container_Container.config.advanced.blame.sizeThresholdAfterEdit;t>0&&e.document.lineCount>t||(logger_Logger.log("Dirty idle triggered; resetting CodeLens provider"),this._provider.reset("idle"))}toggleCodeLens(){if(this._canToggle){if(logger_Logger.log("toggleCodeLens()"),void 0!==this._provider)return void 0!==this._providerDisposable&&(this._providerDisposable.dispose(),this._providerDisposable=void 0),void(this._provider=void 0);this.createProvider()}}createProvider(){this._provider=new codeLensProvider_GitCodeLensProvider(container_Container.context,container_Container.git,container_Container.tracker),this._providerDisposable=r.Disposable.from(r.languages.registerCodeLensProvider(codeLensProvider_GitCodeLensProvider.selector,this._provider),container_Container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),container_Container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}}function ki(e){const t=e instanceof gitUri_GitUri?e:gitUri_GitUri.fromRevisionUri(e);return{path:t.getRelativePath(),ref:t.sha,repoPath:t.repoPath}}const Si=new Uint8Array(0);class fsProvider_GitFileSystemProvider{constructor(){this._searchTreeMap=new Map,this._onDidChangeFile=new r.EventEmitter,this._disposable=r.Disposable.from(r.workspace.registerFileSystemProvider($.GitLens,this,{isCaseSensitive:!0,isReadonly:!0}))}dispose(){this._disposable&&this._disposable.dispose()}get onDidChangeFile(){return this._onDidChangeFile.event}copy(){throw r.FileSystemError.NoPermissions}createDirectory(){throw r.FileSystemError.NoPermissions}delete(){throw r.FileSystemError.NoPermissions}async readDirectory(e){const{path:t,ref:i,repoPath:o}=ki(e),s=await this.getTree(t,i,o);if(void 0===s)throw r.FileSystemError.FileNotFound(e);return[...Ee.map(s,e=>[null!=t&&0!==t.length?De.normalizePath(G.relative(t,e.path)):e.path,Pi(e.type)])]}async readFile(e){const{path:t,ref:i,repoPath:o}=ki(e);if(i===gitService_GitService.deletedOrMissingSha)return Si;const s=await container_Container.git.getVersionedFileBuffer(o,t,i);return void 0===s?Si:s}rename(){throw r.FileSystemError.NoPermissions}async stat(e){const{path:t,ref:i,repoPath:o}=ki(e);if(i===gitService_GitService.deletedOrMissingSha)return{type:r.FileType.File,size:0,ctime:0,mtime:0};let s;const n=this._searchTreeMap.get(i);if(void 0!==n)s=(await n).get(`/~/${t}`);else{if(null==t||0===t.length){if(void 0===await this.getTree(t,i,o))throw r.FileSystemError.FileNotFound(e);return{type:r.FileType.Directory,size:0,ctime:0,mtime:0}}s=await container_Container.git.getTreeFileForRevision(o,t,i)}if(void 0===s)throw r.FileSystemError.FileNotFound(e);return{type:Pi(s.type),size:s.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(){throw r.FileSystemError.NoPermissions}async createSearchTree(e,t){const i=searchTree_TernarySearchTree.forPaths(),o=await container_Container.git.getTreeForRevision(t,e);i.set("~",{commitSha:"",path:"~",size:0,type:"tree"});for(const e of o)i.set(`~/${e.path}`,e);return i}async getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}}function Pi(e){switch(e){case"blob":return r.FileType.File;case"tree":return r.FileType.Directory;default:return r.FileType.Unknown}}class lineHoverController_LineHoverController{constructor(){this._disposable=r.Disposable.from(io.onDidChange(this.onConfigurationChanged,this),r.debug.onDidStartDebugSession(this.onDebugSessionStarted,this)),this.onConfigurationChanged(io.initializingChangeEvent)}dispose(){this.unregister(),this._debugSessionEndDisposable&&this._debugSessionEndDisposable.dispose(),container_Container.lineTracker.stop(this),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){(io.changed(e,io.name("hovers")("enabled").value)||io.changed(e,io.name("hovers")("currentLine")("enabled").value))&&(container_Container.config.hovers.enabled&&container_Container.config.hovers.currentLine.enabled?(container_Container.lineTracker.start(this,r.Disposable.from(container_Container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))),this.register(r.window.activeTextEditor)):(container_Container.lineTracker.stop(this),this.unregister()))}get debugging(){return void 0!==this._debugSessionEndDisposable}onActiveLinesChanged(e){e.pending||"editor"!==e.reason||(void 0!==e.editor&&void 0!==e.lines?this.register(e.editor):this.unregister())}onDebugSessionStarted(){void 0===this._debugSessionEndDisposable&&(this._debugSessionEndDisposable=r.debug.onDidTerminateDebugSession(this.onDebugSessionEnded,this))}onDebugSessionEnded(){void 0!==this._debugSessionEndDisposable&&(this._debugSessionEndDisposable.dispose(),this._debugSessionEndDisposable=void 0)}async provideDetailsHover(e,t,i){if(!container_Container.lineTracker.includes(t.line))return;const o=container_Container.lineTracker.getState(t.line),s=void 0!==o?o.commit:void 0;if(void 0===s)return;const n=await container_Container.fileAnnotations.getAnnotationType(r.window.activeTextEditor);if(void 0!==n&&container_Container.config.hovers.annotations.details)return;const a=!this.debugging&&"line"===container_Container.config.hovers.currentLine.over;if(!a&&container_Container.lineAnnotations.suspended)return;const c=e.validateRange(new r.Range(t.line,a?0:Number.MAX_SAFE_INTEGER,t.line,Number.MAX_SAFE_INTEGER));if(!a&&c.start.character!==t.character)return;let l=void 0!==o?o.logCommit:void 0;if(void 0!==l||s.isUncommitted||void 0!==(l=await container_Container.git.getLogCommitForFile(s.repoPath,s.uri.fsPath,{ref:s.sha}))&&(l.previousSha=s.previousSha,l.previousFileName=s.previousFileName,void 0!==o&&(o.logCommit=l)),void 0===await container_Container.tracker.get(e))return;const h=annotations_Annotations.getHoverMessage(l||s,container_Container.config.defaultDateFormat,await container_Container.git.getRemotes(s.repoPath),n,t.line);return new r.Hover(h,c)}async provideChangesHover(e,t,i){if(!container_Container.lineTracker.includes(t.line))return;const o=container_Container.lineTracker.getState(t.line),s=void 0!==o?o.commit:void 0;if(void 0===s)return;if(container_Container.config.hovers.annotations.changes){if(void 0!==await container_Container.fileAnnotations.getAnnotationType(r.window.activeTextEditor))return}const n=!this.debugging&&"line"===container_Container.config.hovers.currentLine.over;if(!n&&container_Container.lineAnnotations.suspended)return;const a=e.validateRange(new r.Range(t.line,n?0:Number.MAX_SAFE_INTEGER,t.line,Number.MAX_SAFE_INTEGER));if(!n&&a.start.character!==t.character)return;const c=await container_Container.tracker.get(e);if(void 0===c)return;const l=await annotations_Annotations.changesHover(s,t.line,c.uri);return void 0!==l.hoverMessage?new r.Hover(l.hoverMessage,a):void 0}register(e){if(this.unregister(),void 0===e)return;const t=container_Container.config.hovers;if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;const i=[];t.currentLine.changes&&i.push(r.languages.registerHoverProvider({pattern:e.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(r.languages.registerHoverProvider({pattern:e.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=r.Disposable.from(...i)}unregister(){void 0!==this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}}const xi=Object.create(null),Fi=["left","right",",",".","escape"],$i=[];class keyboard_KeyboardScope{constructor(e){this.mapping=e;for(const t in e)e[t]=e[t]||xi}async dispose(){const e=$i.indexOf(this.mapping);logger_Logger.log("KeyboardScope.dispose",$i.length,e),e===$i.length-1?($i.pop(),await this.updateKeyCommandsContext($i[$i.length-1])):$i.splice(e,1)}async begin(){return $i.push(this.mapping),await this.updateKeyCommandsContext(this.mapping),this}async clearKeyCommand(e){const t=$i[$i.length-1];t===this.mapping&&t[e]&&(logger_Logger.log("KeyboardScope.clearKeyCommand",$i.length,e),t[e]=void 0,await N(`${F.Key}:${e}`,!1))}async setKeyCommand(e,t){const i=$i[$i.length-1];i===this.mapping&&(logger_Logger.log("KeyboardScope.setKeyCommand",$i.length,e,Boolean(i[e])),i[e]?i[e]=t:(i[e]=t,await N(`${F.Key}:${e}`,!0)))}async updateKeyCommandsContext(e){const t=[];for(const i of Fi)t.push(N(`${F.Key}:${i}`,Boolean(e&&e[i])));await Promise.all(t)}}class keyboard_Keyboard{constructor(){const e=Fi.map(e=>r.commands.registerCommand(`${y}.key.${e}`,()=>this.execute(e),this));this._disposable=r.Disposable.from(...e)}dispose(){this._disposable&&this._disposable.dispose()}async beginScope(e){return logger_Logger.log("Keyboard.beginScope",$i.length),await new keyboard_KeyboardScope(e?Object.assign(Object.create(null),e):Object.create(null)).begin()}async execute(e){if($i.length)try{let t=$i[$i.length-1][e];if("function"==typeof t&&(t=await t()),!t||"function"!=typeof t.onDidPressKey)return;return logger_Logger.log("Keyboard.execute",e),await t.onDidPressKey(e)}catch(e){return void logger_Logger.error(e,"Keyboard.execute")}}}class statusBarController_StatusBarController{constructor(){this._disposable=r.Disposable.from(io.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(io.initializingChangeEvent)}dispose(){this.clearBlame(),this._blameStatusBarItem&&this._blameStatusBarItem.dispose(),this._modeStatusBarItem&&this._modeStatusBarItem.dispose(),container_Container.lineTracker.stop(this),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){if(io.changed(e,io.name("mode").value)){const t=container_Container.config.mode.active&&container_Container.config.mode.statusBar.enabled?container_Container.config.modes[container_Container.config.mode.active]:void 0;if(t&&t.statusBarItemName){const i="left"!==container_Container.config.mode.statusBar.alignment?r.StatusBarAlignment.Right:r.StatusBarAlignment.Left;io.changed(e,io.name("mode")("statusBar")("alignment").value)&&void 0!==this._modeStatusBarItem&&this._modeStatusBarItem.alignment!==i&&(this._modeStatusBarItem.dispose(),this._modeStatusBarItem=void 0),this._modeStatusBarItem=this._modeStatusBarItem||r.window.createStatusBarItem(i,i===r.StatusBarAlignment.Right?999:1),this._modeStatusBarItem.command=Mi.SwitchMode,this._modeStatusBarItem.text=t.statusBarItemName,this._modeStatusBarItem.tooltip="Switch GitLens Mode",this._modeStatusBarItem.show()}else void 0!==this._modeStatusBarItem&&(this._modeStatusBarItem.dispose(),this._modeStatusBarItem=void 0)}if(io.changed(e,io.name("statusBar").value))if(container_Container.config.statusBar.enabled){const t="left"!==container_Container.config.statusBar.alignment?r.StatusBarAlignment.Right:r.StatusBarAlignment.Left;io.changed(e,io.name("statusBar")("alignment").value)&&void 0!==this._blameStatusBarItem&&this._blameStatusBarItem.alignment!==t&&(this._blameStatusBarItem.dispose(),this._blameStatusBarItem=void 0),this._blameStatusBarItem=this._blameStatusBarItem||r.window.createStatusBarItem(t,t===r.StatusBarAlignment.Right?1e3:0),this._blameStatusBarItem.command=container_Container.config.statusBar.command,io.changed(e,io.name("statusBar")("enabled").value)&&container_Container.lineTracker.start(this,r.Disposable.from(container_Container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)))}else io.changed(e,io.name("statusBar")("enabled").value)&&(container_Container.lineTracker.stop(this),void 0!==this._blameStatusBarItem&&(this._blameStatusBarItem.dispose(),this._blameStatusBarItem=void 0))}onActiveLinesChanged(e){let t=!(container_Container.config.statusBar.reduceFlicker&&"selection"===e.reason&&(e.pending||void 0!==e.lines));if(!e.pending&&void 0!==e.lines){const i=container_Container.lineTracker.getState(e.lines[0]);if(void 0!==i&&void 0!==i.commit)return void this.updateBlame(i.commit,e.editor);t=!0}t&&this.clearBlame()}clearBlame(){void 0!==this._blameStatusBarItem&&this._blameStatusBarItem.hide()}updateBlame(e,t){const i=container_Container.config.statusBar;if(i.enabled&&void 0!==this._blameStatusBarItem&&U(t)){switch(this._blameStatusBarItem.text=`$(git-commit) ${commitFormatter_CommitFormatter.fromTemplate(i.format,e,{truncateMessageAtNewLine:!0,dateFormat:null===i.dateFormat?container_Container.config.defaultDateFormat:i.dateFormat})}`,i.command){case w.ToggleFileBlame:this._blameStatusBarItem.tooltip="Toggle Blame Annotations";break;case w.DiffWithPrevious:this._blameStatusBarItem.command=Mi.DiffLineWithPrevious,this._blameStatusBarItem.tooltip="Compare Line Revision with Previous";break;case w.DiffWithWorking:this._blameStatusBarItem.command=Mi.DiffLineWithWorking,this._blameStatusBarItem.tooltip="Compare Line Revision with Working";break;case w.ToggleCodeLens:this._blameStatusBarItem.tooltip="Toggle Git CodeLens";break;case w.ShowQuickCommitDetails:this._blameStatusBarItem.tooltip="Show Commit Details";break;case w.ShowQuickCommitFileDetails:this._blameStatusBarItem.tooltip="Show Line Commit Details";break;case w.ShowQuickFileHistory:this._blameStatusBarItem.tooltip="Show File History";break;case w.ShowQuickCurrentBranchHistory:this._blameStatusBarItem.tooltip="Show Branch History"}this._blameStatusBarItem.show()}}}class lineTracker_LineTracker{constructor(){this._onDidChangeActiveLines=new r.EventEmitter,this._state=new Map}get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}dispose(){this.stop()}onActiveTextEditorChanged(e){this._editor!==e&&(void 0===e||U(e))&&(this.reset(),this._editor=e,this._lines=void 0!==e?e.selections.map(e=>e.active.line):void 0,this.trigger("editor"))}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!U(e.textEditor))return;const t=this._editor===e.textEditor?"selection":"editor",i=e.selections.map(e=>e.active.line);this._editor===e.textEditor&&this.includesAll(i)||(this.reset(),this._editor=e.textEditor,this._lines=i,this.trigger(t))}getState(e){return this._state.get(e)}setState(e,t){this._state.set(e,t)}get lines(){return this._lines}includes(e){return void 0!==this._lines&&this._lines.includes(e)}includesAll(e){return lineTracker_LineTracker.includesAll(e,this._lines)}refresh(){this.trigger("editor")}reset(){this._state.clear()}start(e,t){void 0===this._disposable&&(this._disposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor(xe.debounce(this.onActiveTextEditorChanged,0),this),r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this)),setImmediate(()=>this.onActiveTextEditorChanged(r.window.activeTextEditor)))}stop(e){void 0!==this._disposable&&(void 0!==this._linesChangedDebounced&&this._linesChangedDebounced.cancel(),this._disposable.dispose(),this._disposable=void 0)}async fireLinesChanged(e){this._onDidChangeActiveLines.fire(e)}trigger(e){this.onLinesChanged({editor:this._editor,lines:this._lines,reason:e})}onLinesChanged(e){void 0!==e.lines?(void 0===this._linesChangedDebounced&&(this._linesChangedDebounced=xe.debounce(e=>{r.window.activeTextEditor===e.editor&&lineTracker_LineTracker.includesAll(e.lines,e.editor&&e.editor.selections.map(e=>e.active.line))&&this.fireLinesChanged(e)},250,{track:!0})),this._linesChangedDebounced.pending()||this.fireLinesChanged(Object.assign({},e,{pending:!0})),this._linesChangedDebounced(e)):setImmediate(()=>{r.window.activeTextEditor===e.editor&&(void 0!==this._linesChangedDebounced&&this._linesChangedDebounced.cancel(),this.fireLinesChanged(e))})}static includesAll(e,t){return void 0===e&&void 0===t||void 0!==e&&void 0!==t&&(t.length===e.length&&t.every((t,i)=>t===e[i]))}}class GitLineState{constructor(e,t){this.commit=e,this.logCommit=t}}class gitLineTracker_GitLineTracker extends lineTracker_LineTracker{constructor(){super(...arguments),this._count=0,this._subscriptions=new Map,this._suspended=!1}async fireLinesChanged(e){this.reset();let t=!1;return this._suspended||e.pending||void 0===e.lines||void 0===e.editor||(t=await this.updateState(e.lines,e.editor)),super.fireLinesChanged(t?e:Object.assign({},e,{lines:void 0}))}onBlameStateChanged(e){this.trigger("editor")}onDirtyIdleTriggered(e){const t=container_Container.config.advanced.blame.sizeThresholdAfterEdit;t>0&&e.document.lineCount>t||this.resume()}async onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}resume(e={}){(e.force||this._suspended)&&(this._suspended=!1,this.trigger("editor"))}suspend(e={}){!e.force&&this._suspended||(this._suspended=!0,this.trigger("editor"))}isSubscribed(e){return this._subscriptions.has(e)}start(e,t){const i={dispose:()=>this.stop(e)};return this.isSubscribed(e)?i:(this._subscriptions.set(e,t),this._count++,1===this._count&&(super.start(),this._disposable=r.Disposable.from(this._disposable,container_Container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),container_Container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),container_Container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))),i)}stop(e){const t=this._subscriptions.get(e);void 0!==t&&(this._subscriptions.delete(e),t.dispose(),void 0!==this._disposable?(this._count--,0===this._count&&super.stop()):this._count=0)}async updateState(e,t){const i=await container_Container.tracker.getOrAdd(t.document);if(!i.isBlameable||!this.includesAll(e))return!1;if(1===e.length){const o=t.document.isDirty?await container_Container.git.getBlameForLineContents(i.uri,e[0],t.document.getText()):await container_Container.git.getBlameForLine(i.uri,e[0]);if(void 0===o)return!1;this.setState(o.line.line,new GitLineState(o.commit))}else{const o=t.document.isDirty?await container_Container.git.getBlameForFileContents(i.uri,t.document.getText()):await container_Container.git.getBlameForFile(i.uri);if(void 0===o)return!1;for(const t of e){const e=o.lines[t];this.setState(t,new GitLineState(o.commits.get(e.sha)))}}return!(!i.isBlameable||!this.includesAll(e))&&(t.document.isDirty&&i.setForceDirtyStateChangeOnNextDocumentChange(),!0)}}var Di;!function(e){e.ActiveFileHistory="gitlens:history:active:file",e.ActiveLineHistory="gitlens:history:active:line",e.Branch="gitlens:branch",e.Branches="gitlens:branches",e.BranchesWithRemotes="gitlens:branches:remotes",e.BranchStatusAheadOfUpstream="gitlens:branch-status:upstream:ahead",e.BranchStatusBehindUpstream="gitlens:branch-status:upstream:behind",e.BranchWithTracking="gitlens:branch:tracking",e.CurrentBranch="gitlens:branch:current",e.CurrentBranchWithTracking="gitlens:branch:current:tracking",e.RemoteBranch="gitlens:branch:remote",e.Commit="gitlens:commit",e.CommitOnCurrentBranch="gitlens:commit:current",e.CommitFile="gitlens:file:commit",e.Commits="gitlens:commits",e.Compare="gitlens:compare",e.ComparePicker="gitlens:compare:picker",e.ComparePickerWithRef="gitlens:compare:picker:ref",e.CompareResults="gitlens:compare:results",e.FileHistory="gitlens:history:file",e.FileStaged="gitlens:file:staged",e.FileStagedAndUnstaged="gitlens:file:staged:unstaged",e.FileUnstaged="gitlens:file:unstaged",e.Folder="gitlens:folder",e.LineHistory="gitlens:history:line",e.Message="gitlens:message",e.Pager="gitlens:pager",e.Remote="gitlens:remote",e.Remotes="gitlens:remotes",e.Repositories="gitlens:repositories",e.Repository="gitlens:repository",e.ResultsCommits="gitlens:results:commits",e.ResultsFile="gitlens:file:results",e.ResultsFiles="gitlens:results:files",e.Search="gitlens:search",e.SearchResults="gitlens:search:results",e.Stash="gitlens:stash",e.StashFile="gitlens:file:stash",e.Stashes="gitlens:stashes",e.StatusFileCommits="gitlens:status:file:commits",e.StatusFiles="gitlens:status:files",e.StatusAheadOfUpstream="gitlens:status:upstream:ahead",e.StatusBehindUpstream="gitlens:status:upstream:behind",e.Tag="gitlens:tag",e.Tags="gitlens:tags"}(Di||(Di={}));const Ti=new gitUri_GitUri;let Ni=class ViewNode{constructor(e,t,i){this.view=t,this.parent=i,this._uri=e}toString(){return`${logger_Logger.toLoggableName(this)}${null!=this.id?`(${this.id})`:""}`}get uri(){return this._uri}getParent(){return this.parent}getCommand(){}refresh(e){}triggerChange(){return this.view.refreshNode(this)}};var Ri,Ui;s([$e(),Be()],Ni.prototype,"refresh",null),s([$e(),Be()],Ni.prototype,"triggerChange",null),Ni=s([(Ri=((e,t)=>`${t}${e.id?`(${e.id})`:""}`),e=>{e[Le]=Ri})],Ni);class ViewRefNode extends Ni{get repoPath(){return this.uri.repoPath}}function Li(e){return void 0!==e.onDidChangeAutoRefresh}class viewNode_SubscribeableViewNode extends Ni{constructor(e,t,i){super(e,t,i),this._canSubscribe=!0;const o=[this.view.onDidChangeVisibility(this.onVisibilityChanged,this),this.view.onDidChangeNodeState(this.onNodeStateChanged,this)];Li(this.view)&&o.push(this.view.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this)),this._disposable=r.Disposable.from(...o)}dispose(){this.unsubscribe(),void 0!==this._disposable&&this._disposable.dispose()}get canSubscribe(){return this._canSubscribe}set canSubscribe(e){this._canSubscribe!==e&&(this._canSubscribe=e,this.ensureSubscription(),e&&this.triggerChange())}async unsubscribe(){if(void 0!==this._subscription){const e=this._subscription;this._subscription=void 0;const t=await e;void 0!==t&&t.dispose()}}onAutoRefreshChanged(){this.onVisibilityChanged({visible:this.view.visible})}onParentStateChanged(e){}onStateChanged(e){}onNodeStateChanged(e){e.element===this?(this._state=e.state,this.onStateChanged(e.state)):e.element===this.parent&&this.onParentStateChanged(e.state)}onVisibilityChanged(e){this.ensureSubscription(),e.visible&&this.triggerChange()}async ensureSubscription(){this.canSubscribe&&this.view.visible&&(!Li(this.view)||this.view.autoRefresh)?void 0===this._subscription&&(this._subscription=this.subscribe(),await this._subscription):await this.unsubscribe()}}s([Be()],viewNode_SubscribeableViewNode.prototype,"dispose",null),s([Be()],viewNode_SubscribeableViewNode.prototype,"unsubscribe",null),s([Be()],viewNode_SubscribeableViewNode.prototype,"onAutoRefreshChanged",null),s([Be()],viewNode_SubscribeableViewNode.prototype,"onVisibilityChanged",null),s([Be()],viewNode_SubscribeableViewNode.prototype,"ensureSubscription",null),function(e){e[e.CommitLabel=1]="CommitLabel",e[e.FileLabel=2]="FileLabel",e[e.CommitIcon=4]="CommitIcon",e[e.StatusIcon=8]="StatusIcon",e[e.Gravatar=16]="Gravatar",e[e.File=10]="File"}(Ui||(Ui={}));class commitFileNode_CommitFileNode extends ViewRefNode{constructor(e,t,i,o,s,r){super(gitUri_GitUri.fromFile(i,o.repoPath,o.sha),e,t),this.file=i,this.commit=o,this._displayAs=s,this._selection=r}get priority(){return 0}get ref(){return this.commit.sha}async getChildren(){return[]}async getTreeItem(){if(!this.commit.isFile){const e=this.commit.toFileCommit(this.file);if(void 0===e){const e=await container_Container.git.getLogForFile(this.repoPath,this.file.fileName,{maxCount:2,ref:this.commit.sha});void 0!==e&&(this.commit=e.commits.get(this.commit.sha)||this.commit)}else this.commit=e}const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.contextValue=this.resourceType,e.description=this.description,e.tooltip=this.tooltip,(this._displayAs&Ui.CommitIcon)===Ui.CommitIcon)e.iconPath={dark:container_Container.context.asAbsolutePath(G.join("images","dark","icon-commit.svg")),light:container_Container.context.asAbsolutePath(G.join("images","light","icon-commit.svg"))};else if((this._displayAs&Ui.StatusIcon)===Ui.StatusIcon){const t=st.getStatusIcon(this.file.status);e.iconPath={dark:container_Container.context.asAbsolutePath(G.join("images","dark",t)),light:container_Container.context.asAbsolutePath(G.join("images","light",t))}}else(this._displayAs&Ui.Gravatar)===Ui.Gravatar&&(e.iconPath=this.commit.getGravatarUri(container_Container.config.defaultGravatarsStyle));return e.command=this.getCommand(),this._label=void 0,this._description=void 0,this._tooltip=void 0,e}get description(){return void 0===this._description&&(this._description=this._displayAs&Ui.CommitLabel?commitFormatter_CommitFormatter.fromTemplate(this.getCommitDescriptionTemplate(),this.commit,{truncateMessageAtNewLine:!0,dateFormat:container_Container.config.defaultDateFormat}):statusFormatter_StatusFileFormatter.fromTemplate(this.getCommitFileDescriptionTemplate(),this.file,{relativePath:this.relativePath})),this._description}get folderName(){return void 0===this._folderName&&(this._folderName=G.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=this._displayAs&Ui.CommitLabel?commitFormatter_CommitFormatter.fromTemplate(this.getCommitTemplate(),this.commit,{truncateMessageAtNewLine:!0,dateFormat:container_Container.config.defaultDateFormat}):statusFormatter_StatusFileFormatter.fromTemplate(this.getCommitFileTemplate(),this.file,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._tooltip=void 0}get resourceType(){return this.commit.isUncommitted?this.commit.isStagedUncommitted?Di.FileStaged:Di.FileUnstaged:Di.CommitFile}get tooltip(){if(void 0===this._tooltip)if(this._displayAs&Ui.CommitLabel){const e=statusFormatter_StatusFileFormatter.fromTemplate("${status}",this.file);this._tooltip=commitFormatter_CommitFormatter.fromTemplate(this.commit.isUncommitted?`\${author} ${D.Dash} \${id}\n${e}\n\${ago} (\${date})`:`\${author} ${D.Dash} \${id}\n${e}\n\${ago} (\${date})\n\n\${message}`,this.commit,{dateFormat:container_Container.config.defaultDateFormat})}else this._tooltip=statusFormatter_StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status}",this.file);return this._tooltip}getCommitTemplate(){return this.view.config.commitFormat}getCommitDescriptionTemplate(){return this.view.config.commitDescriptionFormat}getCommitFileTemplate(){return this.view.config.commitFileFormat}getCommitFileDescriptionTemplate(){return this.view.config.commitFileDescriptionFormat}getCommand(){return{title:"Compare File with Previous Revision",command:Mi.DiffWithPrevious,arguments:[gitUri_GitUri.fromFile(this.file,this.commit.repoPath),{commit:this.commit,line:void 0!==this._selection?this._selection.active.line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class folderNode_FolderNode extends Ni{constructor(e,t,i,o,s,r){super(gitUri_GitUri.fromRepoPath(i),e,t),this.repoPath=i,this.folderName=o,this.root=s,this.relativePath=r,this.priority=1}async getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e;if(folderNode_FolderNode.getFileNesting(this.view.config.files,this.root.descendants,void 0===this.relativePath)!==C.List){e=[];for(const t of O.values(this.root.children))void 0!==t.value?(t.value.relativePath=this.root.relativePath,e.push(t.value)):e.push(new folderNode_FolderNode(this.view,this,this.repoPath,t.name,t,t.relativePath))}else this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;return e.sort((e,t)=>(e instanceof folderNode_FolderNode?-1:1)-(t instanceof folderNode_FolderNode?-1:1)||e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"})),e}async getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Collapsed);return e.contextValue=Di.Folder,e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}static getFileNesting(e,t,i){const o=e.layout||C.Auto;if(o===C.Auto){if(i||e.compact){const i=e.threshold||5;if(t.length<=i)return C.List}return C.Tree}return o}}class commitNode_CommitNode extends ViewRefNode{constructor(e,t,i,o,s){super(i.toGitUri(),e,t),this.commit=i,this.branch=o,this.getBranchAndTagTips=s}get ref(){return this.commit.sha}async getChildren(){const e=this.commit;let t=[...Ee.map(e.files,t=>new commitFileNode_CommitFileNode(this.view,this,t,e.toFileCommit(t),Ui.File))];if(this.view.config.files.layout!==C.List){const e=E.makeHierarchical(t,e=>e.uri.getRelativePath().split("/"),(...e)=>De.normalizePath(G.join(...e)),this.view.config.files.compact),i=new folderNode_FolderNode(this.view,this,this.repoPath,"",e);t=await i.getChildren()}else t.sort((e,t)=>e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"}));return t}getTreeItem(){let e=commitFormatter_CommitFormatter.fromTemplate(this.view.config.commitFormat,this.commit,{truncateMessageAtNewLine:!0,dateFormat:container_Container.config.defaultDateFormat});const t=this.getBranchAndTagTips&&this.getBranchAndTagTips(this.commit.sha);void 0!==t&&(e=`${D.AngleBracketLeftHeavy}${D.SpaceThin}${t}${D.SpaceThin}${D.AngleBracketRightHeavy}${D.ArrowHeadRight}${D.Space} ${e}`);const i=new r.TreeItem(e,r.TreeItemCollapsibleState.Collapsed);return i.contextValue=void 0===this.branch||this.branch.current?Di.CommitOnCurrentBranch:Di.Commit,i.description=commitFormatter_CommitFormatter.fromTemplate(this.view.config.commitDescriptionFormat,this.commit,{truncateMessageAtNewLine:!0,dateFormat:container_Container.config.defaultDateFormat}),this.view.config.avatars?i.iconPath=this.commit.getGravatarUri(container_Container.config.defaultGravatarsStyle):i.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-commit.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-commit.svg")},i.tooltip=commitFormatter_CommitFormatter.fromTemplate(this.commit.isUncommitted?`\${author} ${D.Dash} \${id}\n\${ago} (\${date})`:`\${author} ${D.Dash} \${id}${void 0!==t?` (${t})`:""}\n\${ago} (\${date})\n\n\${message}`,this.commit,{dateFormat:container_Container.config.defaultDateFormat}),this.commit.isUncommitted||(i.tooltip+=this.commit.getFormattedDiffStatus({expand:!0,prefix:"\n\n",separator:"\n"})),i}getCommand(){return{title:"Compare File with Previous Revision",command:Mi.DiffWithPrevious,arguments:[this.uri,{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class common_MessageNode extends Ni{constructor(e,t,i,o,s,r){super(Ti,e,t),this._message=i,this._description=o,this._tooltip=s,this._iconPath=r}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this._message,r.TreeItemCollapsibleState.None);return e.contextValue=Di.Message,e.description=this._description,e.tooltip=this._tooltip,e.iconPath=this._iconPath,e}}class common_CommandMessageNode extends common_MessageNode{constructor(e,t,i,o,s,r,n){super(e,t,o,s,r,n),this._command=i}getTreeItem(){const e=super.getTreeItem();return e instanceof r.TreeItem?(e.command=this._command,e):e.then(e=>(e.command=this._command,e))}}class common_PagerNode extends Ni{constructor(e,t,i){super(Ti,e,t),this.message=i,this._args={}}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=Di.Pager,e.command=this.getCommand(),e.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-unfold.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-unfold.svg")},e}getCommand(){return{title:"Refresh",command:"gitlens.views.refreshNode",arguments:[this.parent,this._args]}}}class common_ShowMoreNode extends common_PagerNode{constructor(e,t,i,o=container_Container.config.advanced.maxListItems){super(e,t,0===o?`Show All ${i} ${D.Space}${D.Dash}${D.Space} this may take a while`:`Show More ${i}`),this._args.maxCount=o}}async function Bi(e,t){const[i,o]=await Promise.all([container_Container.git.getBranches(e),container_Container.git.getTags(e,{includeRefs:!0})]),s=E.groupByFilterMap(i.concat(o),e=>e.sha,e=>e.name===t?void 0:e.name);return e=>{const t=s.get(e);if(void 0!==t&&0!==t.length)return t.join(", ")}}const Oi=[[0,"Less than a week ago"],[7,"Over a week ago"],[30,"Over a month ago"],[90,"Over 3 months ago"]];function*Ei(e,t,i){let o=i||0,s=void 0;const r=Date.now();let n=!0;for(const i of e){if(o<Oi.length){let[e,a]=Oi[o];if(void 0===s){const t=new Date(r);s=t.setDate(t.getDate()-e)}const c=new Date(i.commit.committedDate.setUTCHours(0,0,0,0)).getTime();if(c<=s){for(;o<Oi.length-1;){[e]=Oi[o+1];const t=new Date(r);if(c>t.setDate(t.getDate()-e))break;o++,s=void 0,[,a]=Oi[o]}(!n||o<Oi.length-1)&&(yield new common_MessageNode(t.view,t,a)),o++,s=void 0}}n=!1,yield i}}class branchTrackingStatusNode_BranchTrackingStatusNode extends Ni{constructor(e,t,i,o,s=!1){super(gitUri_GitUri.fromRepoPath(i.repoPath),e,t),this.status=i,this.direction=o,this._root=s,this.supportsPaging=!0}get id(){return`gitlens:repository(${this.status.repoPath}):${this._root?"root:":""}branch(${this.status.ref}):status:upstream:(${this.status.upstream}):${this.direction}`}async getChildren(){const e="ahead"===this.direction,t=e?`${this.status.upstream}..${this.status.ref}`:`${this.status.ref}..${this.status.upstream}`,i=await container_Container.git.getLog(this.uri.repoPath,{maxCount:this.maxCount||this.view.config.defaultItemLimit,ref:t});if(void 0===i)return[];let o;if(e){const e=[...i.commits.values()],t=e[e.length-1];if(void 0===t.previousSha){const i=await container_Container.git.getLog(this.uri.repoPath,{maxCount:2,ref:t.sha});void 0!==i&&(e[e.length-1]=Ee.first(i.commits.values()))}o=[...Ei(Ee.map(e,e=>new commitNode_CommitNode(this.view,this,e)),this,1)]}else o=[...Ei(Ee.map(i.commits.values(),e=>new commitNode_CommitNode(this.view,this,e)),this,1)];return i.truncated&&o.push(new common_ShowMoreNode(this.view,this,"Commits")),o}async getTreeItem(){const e="ahead"===this.direction,t=e?`${De.pluralize("commit",this.status.state.ahead)} ahead`:`${De.pluralize("commit",this.status.state.behind)} behind`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.Collapsed);i.id=this.id,this._root?i.contextValue=e?Di.StatusAheadOfUpstream:Di.StatusBehindUpstream:i.contextValue=e?Di.BranchStatusAheadOfUpstream:Di.BranchStatusBehindUpstream,i.tooltip=`${t}${e?" of ":""}${this.status.upstream}`;const o=e?"upload":"download";return i.iconPath={dark:container_Container.context.asAbsolutePath(`images/dark/icon-${o}.svg`),light:container_Container.context.asAbsolutePath(`images/light/icon-${o}.svg`)},i}}class branchNode_BranchNode extends ViewRefNode{constructor(e,t,i,o,s=!1){super(e,t,i),this.branch=o,this._root=s,this.supportsPaging=!0}get id(){return`gitlens:repository(${this.branch.repoPath}):${this._root?"root:":""}branch(${this.branch.name})${this.branch.remote?":remote":""}`}get current(){return this.branch.current}get label(){const e=this.branch.getName();return this.view.config.branches.layout===b.List?e:this.current||branch_GitBranch.isDetached(e)?e:this.branch.getBasename()}get ref(){return this.branch.ref}async getChildren(){if(void 0===this._children){const e=[];if(!this._root&&this.branch.tracking){const t={ref:this.branch.ref,repoPath:this.branch.repoPath,state:this.branch.state,upstream:this.branch.tracking};this.branch.state.behind&&e.push(new branchTrackingStatusNode_BranchTrackingStatusNode(this.view,this,t,"behind")),this.branch.state.ahead&&e.push(new branchTrackingStatusNode_BranchTrackingStatusNode(this.view,this,t,"ahead"))}const t=await container_Container.git.getLog(this.uri.repoPath,{maxCount:this.maxCount||this.view.config.defaultItemLimit,ref:this.ref});if(void 0===t)return[new common_MessageNode(this.view,this,"No commits could be found.")];const i=await Bi(this.uri.repoPath,this.branch.name);e.push(...Ei(Ee.map(t.commits.values(),e=>new commitNode_CommitNode(this.view,this,e,this.branch,i)),this)),t.truncated&&e.push(new common_ShowMoreNode(this.view,this,"Commits")),this._children=e}return this._children}async getTreeItem(){const e=this.label;let t,i=`${this.branch.getName()}${this.current?" (current)":""}`,o="";this.branch.remote||void 0===this.branch.tracking||(this.view.config.showTrackingBranch&&(t=`${this.branch.getTrackingStatus({suffix:`${D.Space} `})}${D.ArrowLeftRightLong}${D.Space} ${this.branch.tracking}`),i+=` is tracking ${this.branch.tracking}\n${this.branch.getTrackingStatus({empty:"up-to-date",expand:!0,separator:"\n"})}`,(this.branch.state.ahead||this.branch.state.behind)&&(this.branch.state.behind&&(o="-red"),this.branch.state.ahead&&(o=this.branch.state.behind?"-yellow":"-green")));const s=new r.TreeItem(`${!this._root&&this.current?`${D.Check} ${D.Space}`:""}${e}`,r.TreeItemCollapsibleState.Collapsed);return s.description=t,s.id=this.id,s.tooltip=i,this.branch.remote?s.contextValue=Di.RemoteBranch:this.current?s.contextValue=this.branch.tracking?Di.CurrentBranchWithTracking:Di.CurrentBranch:s.contextValue=this.branch.tracking?Di.BranchWithTracking:Di.Branch,s.iconPath={dark:container_Container.context.asAbsolutePath(`images/dark/icon-branch${o}.svg`),light:container_Container.context.asAbsolutePath(`images/light/icon-branch${o}.svg`)},s}refresh(){this._children=void 0}}new Set;class branchOrTagFolderNode_BranchOrTagFolderNode extends Ni{constructor(e,t,i,o,s,r,n,a=!1){super(gitUri_GitUri.fromRepoPath(o),e,t),this.type=i,this.repoPath=o,this.folderName=s,this.relativePath=r,this.root=n,this._expanded=a}get id(){return`gitlens:repository(${this.repoPath}):${this.type}-folder(${this.relativePath})`}async getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];const e=[];for(const t of O.values(this.root.children))if(void 0!==t.value)e.push(t.value);else{const i=void 0!==t.descendants&&t.descendants.some(e=>e instanceof branchNode_BranchNode&&e.current);e.push(new branchOrTagFolderNode_BranchOrTagFolderNode(this.view,this,this.type,this.repoPath,t.name,t.relativePath,t,i))}return e}async getTreeItem(){const e=new r.TreeItem(this.label,this._expanded?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Di.Folder,e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}}class branchesNode_BranchesNode extends Ni{constructor(e,t,i,o){super(e,t,i),this.repo=o}get id(){return`gitlens:repository(${this.repo.path}):branches`}async getChildren(){if(void 0===this._children){const e=await this.repo.getBranches();if(void 0===e)return[];e.sort((e,t)=>e.name.localeCompare(t.name,void 0,{numeric:!0,sensitivity:"base"}));const t=[...Ee.filterMap(e,e=>e.remote?void 0:new branchNode_BranchNode(this.uri,this.view,this,e))];if(this.view.config.branches.layout===b.List)return t;const i=E.makeHierarchical(t,e=>e.branch.detached?[e.branch.name]:e.branch.getName().split("/"),(...e)=>e.join("/"),this.view.config.files.compact),o=new branchOrTagFolderNode_BranchOrTagFolderNode(this.view,this,"branch",this.repo.path,"",void 0,i);this._children=await o.getChildren()}return this._children}async getTreeItem(){const e=await this.repo.getRemotes(),t=new r.TreeItem("Branches",r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=void 0!==e&&e.length>0?Di.BranchesWithRemotes:Di.Branches,t.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-branch.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-branch.svg")},t}refresh(){this._children=void 0}}class fileHistoryNode_FileHistoryNode extends viewNode_SubscribeableViewNode{constructor(e,t,i){super(e,t,i)}async getChildren(){const e=[],t=Ui.CommitLabel|(this.view.config.avatars?Ui.Gravatar:Ui.StatusIcon);if(void 0===this.uri.sha){const i=await container_Container.git.getStatusForFile(this.uri.repoPath,this.uri.fsPath);if(void 0!==i&&(void 0!==i.indexStatus||void 0!==i.workingTreeStatus)){let o,s;void 0!==i.workingTreeStatus?(o=gitService_GitService.uncommittedSha,void 0!==i.indexStatus?s=gitService_GitService.stagedUncommittedSha:"?"!==i.workingTreeStatus&&(s="HEAD")):(o=gitService_GitService.stagedUncommittedSha,s="HEAD");const r=await container_Container.git.getCurrentUser(this.uri.repoPath),n=new logCommit_GitLogCommit(at.File,this.uri.repoPath,o,"You",void 0!==r?r.email:void 0,new Date,new Date,"",i.fileName,[i],i.status,i.originalFileName,s,i.originalFileName||i.fileName);e.push(new commitFileNode_CommitFileNode(this.view,this,i,n,t))}}const i=await container_Container.git.getLogForFile(this.uri.repoPath,this.uri.fsPath,{ref:this.uri.sha});return void 0!==i&&e.push(...Ei(Ee.map(i.commits.values(),e=>new commitFileNode_CommitFileNode(this.view,this,e.files[0],e,t)),this)),0===e.length?[new common_MessageNode(this.view,this,"No file history could be found.")]:e}getTreeItem(){const e=new r.TreeItem(`${this.uri.getFilename()}${this.uri.sha?` ${this.uri.sha===gitService_GitService.deletedOrMissingSha?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`,r.TreeItemCollapsibleState.Expanded);return e.contextValue=Di.FileHistory,e.description=this.uri.getDirectory(),e.tooltip=`History of ${this.uri.getFilename()}\n${this.uri.getDirectory()}/${void 0===this.uri.sha?"":`\n\n${this.uri.sha}`}`,e.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-history.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-history.svg")},this.ensureSubscription(),e}async subscribe(){const e=await container_Container.git.getRepository(this.uri);if(void 0===e)return;const t=r.Disposable.from(e.onDidChange(this.onRepoChanged,this),e.onDidChangeFileSystem(this.onRepoFileSystemChanged,this),{dispose:()=>e.stopWatchingFileSystem()});return e.startWatchingFileSystem(),t}onRepoChanged(e){e.changed(Ft.Repository)&&(logger_Logger.log(`FileHistoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),this.triggerChange())}onRepoFileSystemChanged(e){e.uris.some(e=>e.toString(!0)===this.uri.toString(!0))&&(logger_Logger.debug(`FileHistoryNode${this.id}.onRepoFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange())}}function Gi(){return!io.get(io.name("advanced")("quickPick")("closeOnFocusOut").value)}function Ii(e,t){const i=new r.CancellationTokenSource;return async function(e,t,i){const o=i&&await container_Container.keyboard.beginScope(i);try{await r.window.showQuickPick(function(e){return new Promise((t,i)=>{const o=e.token.onCancellationRequested(()=>{o.dispose(),t([])})})}(t),{placeHolder:e,ignoreFocusOut:Gi()},t.token)}catch(e){}finally{t.cancel(),o&&o.dispose()}}(e,i,t),i}s([Be()],fileHistoryNode_FileHistoryNode.prototype,"subscribe",null);class commonQuickPicks_CommandQuickPickItem{constructor(e,t,i){void 0===t?(this.command=void 0,this.args=i):"string"==typeof t?(this.command=t,this.args=i):(this.command=t[0],this.args=t.slice(1)),Object.assign(this,e)}execute(){return void 0===this.command?Promise.resolve(void 0):r.commands.executeCommand(this.command,...this.args||[])}onDidPressKey(e){return this.execute()}}class commonQuickPicks_CommitQuickPickItem{constructor(e){this.commit=e;const t=e.getShortMessage();e.isStash?(this.label=t,this.description="",this.detail=`${D.Space} ${e.stashName||e.shortSha} ${De.pad(D.Dot,1,1)} ${e.formattedDate} ${De.pad(D.Dot,1,1)} ${e.getFormattedDiffStatus({compact:!0})}`):(this.label=t,this.description=`${De.pad("$(git-commit)",1,1)} ${e.shortSha}`,this.detail=`${D.Space} ${e.author}, ${e.formattedDate}${e.isFile?"":` ${De.pad(D.Dot,1,1)} ${e.getFormattedDiffStatus({compact:!0})}`}`)}}class commonQuickPicks_ChooseFromBranchesAndTagsQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t,i,o={label:"Choose from Branch or Tag History...",description:`${De.pad(D.Dash,2,2)} shows list of branches and tags`}){super(o,void 0,void 0),this.repoPath=e,this.placeHolder=t,this._goBack=i}execute(){return new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(this.repoPath).show(this.placeHolder,{allowCommitId:!0,goBack:this._goBack})}}class KeyCommandQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t){super({label:"",description:""},e,t)}}class MessageQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e){super({label:e,description:""})}}class commonQuickPicks_OpenFileCommandQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t){super(t,void 0,void 0),this.uri=e}async execute(e){return eo(this.uri,e)}onDidPressKey(e){return this.execute({preserveFocus:!0,preview:!1})}}class commonQuickPicks_OpenFilesCommandQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t){super(t,void 0,void 0),this.uris=e}async execute(e={preserveFocus:!1,preview:!1}){for(const t of this.uris)await eo(t,e)}async onDidPressKey(e){return this.execute({preserveFocus:!0,preview:!1})}}class commonQuickPicks_ShowCommitInViewQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t={label:"Show in View",description:`${De.pad(D.Dash,2,2)} displays the commit in the GitLens Search Commits view`}){super(t,void 0,void 0),this.commit=e}async execute(){await container_Container.searchView.search(this.commit.repoPath,this.commit.sha,hi.Sha,{label:{label:`commits with an id matching '${this.commit.shortSha}'`}})}}class commonQuickPicks_ShowCommitSearchResultsInViewQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t,i,o,s={label:"Show in View",description:`${De.pad(D.Dash,2,2)} displays the search results in the GitLens Search Commits view`}){super(s,void 0,void 0),this.search=e,this.searchBy=t,this.results=i,this.resultsLabel=o}async execute(){await container_Container.searchView.showSearchResults(this.results.repoPath,this.search,this.searchBy,this.results,{label:this.resultsLabel})}}class commonQuickPicks_ShowFileHistoryInViewQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t,i={label:"Show in View",description:`${De.pad(D.Dash,2,2)} displays the file history in the GitLens File History view`}){super(i,void 0,void 0),this.uri=e,this.baseRef=t}async execute(){await container_Container.fileHistoryView.showHistoryForUri(this.uri,this.baseRef)}}class branchesAndTagsQuickPick_RefQuickPickItem{constructor(e,t){this.ref=e,this.label=`${t?`$(check)${D.Space}`:D.Space.repeat(4)} ${gitService_GitService.shortenSha(e)}`,this.description=""}get current(){return!1}get item(){}get remote(){return!1}}class branchesAndTagsQuickPick_BranchQuickPickItem{constructor(e,t){this.branch=e,t=t||void 0===t&&e.current,this.label=`${t?`$(check)${D.Space}`:D.Space.repeat(4)} ${e.name}`,this.description=e.remote?`${D.Space.repeat(2)} remote branch`:e.current?"current branch":""}get current(){return this.branch.current}get item(){return this.branch}get ref(){return this.branch.name}get remote(){return this.branch.remote}}class branchesAndTagsQuickPick_TagQuickPickItem{constructor(e,t){this.tag=e,this.label=`${t?`$(check)${D.Space}`:D.Space.repeat(4)} ${e.name}`,this.description=`${D.Space.repeat(2)} tag`}get current(){return!1}get item(){return this.tag}get ref(){return this.tag.name}get remote(){return!1}}class branchesAndTagsQuickPick_BranchesAndTagsQuickPick{constructor(e){this.repoPath=e}async show(e,t={}){const i=new r.CancellationTokenSource;let o,s;t.goBack&&(o=await container_Container.keyboard.beginScope({left:t.goBack}));try{let n,a=this.getItems(t,i.token);if(t.autoPick&&(a=a.then(e=>(e.length<=1&&(s=e[0],i.cancel()),e))),t.allowCommitId){e+=`${D.Space.repeat(3)}(use # to enter a commit id)`;const t=r.window.createQuickPick();t.busy=!0,t.enabled=!1,t.placeholder=e,t.ignoreFocusOut=Gi(),t.show(),t.items=await a,t.busy=!1,t.enabled=!0,n=await new Promise(e=>{i.token.onCancellationRequested(()=>t.hide()),t.onDidHide(()=>e(void 0)),t.onDidChangeValue(e=>{t.title=e&&e.startsWith("#")?"Please enter a commit id (Press 'Enter' to confirm or 'Escape' to cancel)":void 0}),t.onDidAccept(async()=>{if(0===t.selectedItems.length){let i=t.value;if(!i||!i.startsWith("#"))return;if(i=i.substr(1),t.busy=!0,t.enabled=!1,!await container_Container.git.validateReference(this.repoPath,i))return t.title="You must enter a valid commit id",t.busy=!1,void(t.enabled=!0);e(new branchesAndTagsQuickPick_RefQuickPickItem(i))}else e(t.selectedItems[0]);t.hide()})}),t.dispose()}else n=await r.window.showQuickPick(a,{placeHolder:e,ignoreFocusOut:Gi()},i.token);return void 0===n&&void 0!==s&&(n=s),void 0===n&&i.cancel(),n}finally{void 0!==o&&await o.dispose(),i.dispose()}}async getItems(e,t){const{checked:i,filters:o,goBack:s,include:r}=Object.assign({include:"all"},e);let n,a;switch(r){case"branches":{const e=await xe.cancellable(container_Container.git.getBranches(this.repoPath),t);if(void 0===e||t.isCancellationRequested)return[];n=e;break}case"tags":{const e=await xe.cancellable(container_Container.git.getTags(this.repoPath),t);if(void 0===e||t.isCancellationRequested)return[];a=e;break}default:{const e=await xe.cancellable(Promise.all([container_Container.git.getBranches(this.repoPath),container_Container.git.getTags(this.repoPath)]),t);if(void 0===e||t.isCancellationRequested)return[];[n,a]=e;break}}const c=[];if(void 0!==n){const e=void 0!==o&&"function"==typeof o.branches?o.branches:void 0;n.sort((e,t)=>(t.remote?-1:1)-(e.remote?-1:1)||e.name.localeCompare(t.name,void 0,{numeric:!0,sensitivity:"base"}));for(const t of n)(void 0===e||e(t))&&c.push(new branchesAndTagsQuickPick_BranchQuickPickItem(t,void 0!==i?t.name===i:void 0))}if(void 0!==a){const e=void 0!==o&&"function"==typeof o.tags?o.tags:void 0;a.sort((e,t)=>e.name.localeCompare(t.name,void 0,{numeric:!0,sensitivity:"base"}));for(const t of a)(void 0===e||e(t))&&c.push(new branchesAndTagsQuickPick_TagQuickPickItem(t,void 0!==i?t.name===i:void 0))}return void 0!==s&&c.splice(0,0,s),c}}class remotesQuickPick_OpenRemoteCommandQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t,i){super({label:i?`$(link-external) Copy ${gt(t)} Url to Clipboard from ${e.provider.name}`:`$(link-external) Open ${gt(t)} on ${e.provider.name}`,description:`${De.pad(D.Dash,2,3)} $(repo) ${e.provider.path}`},void 0,void 0),this.clipboard=i,this.remote=e,this.resource=t}async execute(){return this.clipboard?this.remote.provider.copy(this.resource):this.remote.provider.open(this.resource)}}class remotesQuickPick_OpenRemotesCommandQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t,i){const o=gt(t);let s="";switch(t.type){case ut.Branch:s=`$(git-branch) ${t.branch}`;break;case ut.Branches:s="$(git-branch) Branches";break;case ut.Commit:s=`$(git-commit) ${gitService_GitService.shortenSha(t.sha)}`;break;case ut.File:s=`$(file-text) ${G.basename(t.fileName)}`;break;case ut.Repo:s="$(repo) Repository";break;case ut.Revision:if(void 0!==t.commit&&t.commit instanceof logCommit_GitLogCommit)"D"===t.commit.status?(t.sha=t.commit.previousSha,s=`$(file-text) ${G.basename(t.fileName)} in ${D.Space}$(git-commit) ${t.commit.previousShortSha} (deleted in ${D.Space}$(git-commit) ${t.commit.shortSha})`):(t.sha=t.commit.sha,s=`$(file-text) ${G.basename(t.fileName)} in ${D.Space}$(git-commit) ${t.commit.shortSha}`);else{const e=void 0===t.sha?"":gitService_GitService.shortenSha(t.sha);s=`$(file-text) ${G.basename(t.fileName)}${e?` in ${D.Space}$(git-commit) ${e}`:""}`}}const r=e[0];1!==e.length?super({label:`$(link-external) Open ${o} on ${e.every(e=>void 0!==e.provider&&e.provider.name===r.provider.name)?r.provider.name:"Remote"}${D.Ellipsis}`,description:`${De.pad(D.Dash,2,3)} ${s}`},Mi.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}]):super({label:`$(link-external) Open ${o} on ${r.provider.name}`,description:`${De.pad(D.Dash,2,3)} $(repo) ${r.provider.path} ${De.pad(D.Dot,1,1)} ${s}`},Mi.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}])}}class branchHistoryQuickPick_BranchHistoryQuickPick{static showProgress(e){return Ii(`${e} history ${D.Dash} search by commit message, filename, or commit id`,{left:xi,",":xi,".":xi})}static async show(e,t,i,o,s,n){const a=Array.from(Ee.map(e.commits.values(),e=>new commonQuickPicks_CommitQuickPickItem(e))),c=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to ${D.Space}$(git-branch) ${i} history`},Mi.ShowQuickBranchHistory,[t,{branch:i,log:e,maxCount:e.maxCount,goBackCommand:s}]),l=await container_Container.git.getRemotes(t&&t.repoPath||e.repoPath);l.length&&a.splice(0,0,new remotesQuickPick_OpenRemotesCommandQuickPickItem(l,{type:"branch",branch:i},c));let h=void 0;if((e.truncated||e.sha)&&(e.truncated&&a.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${De.pad(D.Dash,2,3)} this may take a while`},Mi.ShowQuickBranchHistory,[gitUri_GitUri.fromRepoPath(e.repoPath),{branch:i,maxCount:0,goBackCommand:s}])),n&&a.splice(0,0,n),e.truncated)){const o=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${De.pad(D.Dash,2,3)} shows ${e.maxCount} newer commits`},Mi.ShowQuickBranchHistory,[t,{branch:i,maxCount:e.maxCount,nextPageCommand:n}]),r=Ee.last(e.commits.values());null!=r&&(h=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${De.pad(D.Dash,2,3)} shows ${e.maxCount} older commits`},Mi.ShowQuickBranchHistory,[new gitUri_GitUri(t||r.uri,r),{branch:i,maxCount:e.maxCount,goBackCommand:s,nextPageCommand:o}]),a.splice(0,0,h))}if(s&&a.splice(0,0,s),o.token.isCancellationRequested)return;const d=await container_Container.keyboard.beginScope({left:s,",":h,".":n});o.cancel();const m=await r.window.showQuickPick(a,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${i} history ${D.Dash} search by commit message, filename, or commit id`,ignoreFocusOut:Gi()});return await d.dispose(),m}}class commitFileQuickPick_ApplyCommitFileChangesCommandQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t){super(t||{label:"$(git-pull-request) Apply Changes",description:`${De.pad(D.Dash,2,3)} $(file-text) ${G.basename(e.fileName)} in ${D.Space}$(git-commit) ${e.shortSha}`},void 0,void 0),this.commit=e}async execute(){const e=this.commit.toGitUri();await eo(e,{preserveFocus:!0,preview:!1}),await container_Container.git.applyChangesToWorkingFile(e)}}class commitFileQuickPick_OpenCommitFileCommandQuickPickItem extends commonQuickPicks_OpenFileCommandQuickPickItem{constructor(e,t){super(gitUri_GitUri.resolveToUri(e.fileName,e.repoPath),t||{label:"$(file-symlink-file) Open File",description:`${De.pad(D.Dash,2,3)} ${G.basename(e.fileName)}`})}}class commitFileQuickPick_OpenCommitFileRevisionCommandQuickPickItem extends commonQuickPicks_OpenFileCommandQuickPickItem{constructor(e,t){let i,o;"D"===e.status?(o=gitUri_GitUri.toRevisionUri(e.previousFileSha,e.previousUri.fsPath,e.repoPath),i=`${De.pad(D.Dash,2,3)} ${G.basename(e.fileName)} in ${D.Space}$(git-commit) ${e.previousShortSha} (deleted in ${D.Space}$(git-commit) ${e.shortSha})`):(o=gitUri_GitUri.toRevisionUri(e.sha,e.uri.fsPath,e.repoPath),i=`${De.pad(D.Dash,2,3)} ${G.basename(e.fileName)} in ${D.Space}$(git-commit) ${e.shortSha}`),super(o,t||{label:"$(file-symlink-file) Open Revision",description:i})}}class commitQuickPick_CommitWithFileStatusQuickPickItem extends commonQuickPicks_OpenFileCommandQuickPickItem{constructor(e,t){const i=st.getStatusOcticon(t.status),o=st.getFormattedDirectory(t,!0);super(gitUri_GitUri.toRevisionUri(e.sha,t,e.repoPath),{label:`${De.pad(i,4,2)} ${G.basename(t.fileName)}`,description:o}),this.commit=e.toFileCommit(t),this.status=t.status}get sha(){return this.commit.sha}onDidPressKey(e){return void 0===this.commit.previousSha?super.onDidPressKey(e):r.commands.executeCommand(Mi.DiffWithPrevious,this.commit.toGitUri(),{commit:this.commit,showOptions:{preserveFocus:!0,preview:!1}})}}class commitQuickPick_OpenCommitFilesCommandQuickPickItem extends commonQuickPicks_OpenFilesCommandQuickPickItem{constructor(e,t=!1,i){const o=e.repoPath;super(E.filterMap(e.files,e=>gitUri_GitUri.fromFile(e,o)),i||{label:"$(file-symlink-file) Open Files",description:""})}}class commitQuickPick_OpenCommitFileRevisionsCommandQuickPickItem extends commonQuickPicks_OpenFilesCommandQuickPickItem{constructor(e,t){super(E.filterMap(e.files,t=>gitUri_GitUri.toRevisionUri("D"===t.status?e.previousFileSha:e.sha,t,e.repoPath)),t||{label:"$(file-symlink-file) Open Revisions",description:`${De.pad(D.Dash,2,3)} in ${D.Space}$(git-commit) ${e.shortSha}`})}}class commitsQuickPick_CommitsQuickPick{static showProgress(e){return Ii(e,{left:xi,",":xi,".":xi})}static async show(e,t,i,o){const s=e&&[...Ee.map(e.commits.values(),e=>new commonQuickPicks_CommitQuickPickItem(e))]||[new MessageQuickPickItem("No results found")];if(void 0!==o.showInViewCommand&&s.splice(0,0,o.showInViewCommand),void 0!==o.showAllCommand&&s.splice(0,0,o.showAllCommand),void 0!==o.goBackCommand&&s.splice(0,0,o.goBackCommand),i.token.isCancellationRequested)return;const n=await container_Container.keyboard.beginScope({left:o.goBackCommand});i.cancel();const a=await r.window.showQuickPick(s,{matchOnDescription:!0,placeHolder:t,ignoreFocusOut:Gi()});return await n.dispose(),a}}class fileHistoryQuickPick_FileHistoryQuickPick{static showProgress(e){return Ii(e,{left:xi,",":xi,".":xi})}static async show(e,t,i,o={}){o=Object.assign({pickerOnly:!1},o);const s=Array.from(Ee.map(e.commits.values(),e=>new commonQuickPicks_CommitQuickPickItem(e)));let n=0;if(n++,s.splice(0,0,new commonQuickPicks_ChooseFromBranchesAndTagsQuickPickItem(e.repoPath,i,o.currentCommand)),void 0!==o.showInViewCommand&&(n++,s.splice(0,0,o.showInViewCommand)),e.truncated||e.sha){if(void 0!==o.showAllCommand)n++,s.splice(0,0,o.showAllCommand);else if(!o.pickerOnly){const[i]=await container_Container.git.findWorkingFileName(G.relative(e.repoPath,t.fsPath),e.repoPath);i&&(n++,s.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:"$(history) Show File History",description:`${De.pad(D.Dash,2,3)} of ${G.basename(i)}`},Mi.ShowQuickFileHistory,[gitUri_GitUri.resolveToUri(i,e.repoPath),{goBackCommand:new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to history of ${D.Space}$(file-text) ${G.basename(t.fsPath)}${t.sha?` from ${D.Space}$(git-commit) ${t.shortSha}`:""}`},Mi.ShowQuickFileHistory,[t,{log:e,maxCount:e.maxCount,range:e.range,goBackCommand:o.goBackCommand}])}])))}void 0!==o.nextPageCommand&&(n++,s.splice(0,0,o.nextPageCommand)),void 0!==o.previousPageCommand&&(n++,s.splice(0,0,o.previousPageCommand))}if(!o.pickerOnly){const i=await container_Container.git.getBranch(t.repoPath);if(void 0!==i){const r=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to history of ${D.Space}$(file-text) ${G.basename(t.fsPath)}${t.sha?` from ${D.Space}$(git-commit) ${t.shortSha}`:""}`},Mi.ShowQuickFileHistory,[t,{log:e,maxCount:e.maxCount,range:e.range}]);void 0===o.goBackCommand&&s.splice(n++,0,new commonQuickPicks_CommandQuickPickItem({label:"$(history) Show Branch History",description:`${De.pad(D.Dash,2,3)} shows  ${D.Space}$(git-branch) ${i.name} history`},Mi.ShowQuickCurrentBranchHistory,[void 0,{goBackCommand:r}]));const a=await container_Container.git.getRemotes(t.repoPath);if(a.length){const e=void 0!==t.sha?{type:"revision",branch:i.name,fileName:t.getRelativePath(),sha:t.sha}:{type:"file",branch:i.name,fileName:t.getRelativePath()};s.splice(n++,0,new remotesQuickPick_OpenRemotesCommandQuickPickItem(a,e,r))}}o.goBackCommand&&s.splice(0,0,o.goBackCommand)}if(void 0!==o.progressCancellation&&o.progressCancellation.token.isCancellationRequested)return;const a=await container_Container.keyboard.beginScope({left:o.goBackCommand,",":o.previousPageCommand,".":o.nextPageCommand});o.progressCancellation&&o.progressCancellation.cancel();const c=await r.window.showQuickPick(s,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:i,ignoreFocusOut:Gi()});return await a.dispose(),c}}class RepositoryQuickPickItem{constructor(e){this.repository=e,this.label=e.name,this.description=e.path}get repoPath(){return this.repository.path}}class repositoriesQuickPick_RepositoriesQuickPick{static async show(e,t){const i=[...Ee.map(await container_Container.git.getRepositories(),e=>new RepositoryQuickPickItem(e))];return void 0!==t&&i.splice(0,0,t),await r.window.showQuickPick(i,{placeHolder:e,ignoreFocusOut:Gi()})}}class repoStatusQuickPick_OpenStatusFileCommandQuickPickItem extends commonQuickPicks_OpenFileCommandQuickPickItem{constructor(e,t,i){const o=e.getOcticon(),s=e.getFormattedDirectory(!0);super(e.uri,i||{label:`${e.staged?"$(check)":D.Space.repeat(3)}${De.pad(o,2,2)} ${G.basename(e.fileName)}`,description:s}),this.status=e,void 0!==e.indexStatus?this.commit=new logCommit_GitLogCommit(at.File,e.repoPath,gitService_GitService.stagedUncommittedSha,"You",void 0,new Date,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName):this.commit=new logCommit_GitLogCommit(at.File,e.repoPath,gitService_GitService.uncommittedSha,"You",void 0,new Date,new Date,"",e.fileName,[e],e.status,e.originalFileName,void 0!==t?gitService_GitService.stagedUncommittedSha:"HEAD",e.fileName)}onDidPressKey(e){return r.commands.executeCommand(Mi.DiffWithPrevious,gitUri_GitUri.fromFile(this.status,this.status.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!1}})}}class repoStatusQuickPick_OpenStatusFilesCommandQuickPickItem extends commonQuickPicks_CommandQuickPickItem{constructor(e,t){const i=e.map(e=>e.uri);super(t||{label:"$(file-symlink-file) Open Changed Files",description:""},Mi.OpenChangedFiles,[void 0,{uris:i}])}}class stashListQuickPick_StashListQuickPick{static showProgress(e){return Ii("apply"===e?`Apply stashed changes to your working tree${D.Ellipsis}`:`stashed changes ${D.Dash} search by message, filename, or commit id`,{left:xi,",":xi,".":xi})}static async show(e,t,i,o,s){const n=e&&Array.from(Ee.map(e.commits.values(),e=>new commonQuickPicks_CommitQuickPickItem(e)))||[];if("list"===t&&n.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:"$(plus) Stash Changes",description:`${De.pad(D.Dash,2,3)} stashes all changes`},Mi.StashSave,[{goBackCommand:s}])),o&&n.splice(0,0,o),i.token.isCancellationRequested)return;const a=await container_Container.keyboard.beginScope({left:o});i.cancel();const c=await r.window.showQuickPick(n,{matchOnDescription:!0,placeHolder:"apply"===t?`Apply stashed changes to your working tree${D.Ellipsis}`:`stashed changes ${D.Dash} search by message, filename, or commit id`,ignoreFocusOut:Gi()});return await a.dispose(),c}}class fileHistoryTrackerNode_FileHistoryTrackerNode extends viewNode_SubscribeableViewNode{constructor(e){super(Ti,e)}dispose(){super.dispose(),this.resetChild()}resetChild(){void 0!==this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(void 0===this._child){if(void 0===this._fileUri&&this.uri===Ti)return[new common_MessageNode(this.view,this,"There are no editors open that can provide file history information.")];const e=this._fileUri||this.uri,t=new gitUri_GitUri(e,Object.assign({},e,{sha:this._baseRef||e.sha}));this._child=new fileHistoryNode_FileHistoryNode(t,this.view,this)}return[this._child]}getTreeItem(){const e=new r.TreeItem("File History",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Di.ActiveFileHistory,this.ensureSubscription(),e}async changeBase(){const e=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(this.uri.repoPath).show(`Change the file history base to${D.Ellipsis}`,{allowCommitId:!0,checked:this._baseRef});void 0===e||e instanceof commonQuickPicks_CommandQuickPickItem||(this._baseRef=e.current?void 0:e.ref,void 0!==this._child&&(this._uri=Ti,await this.triggerChange()))}async refresh(){const e=r.window.activeTextEditor;if(null==e||!container_Container.git.isTrackable(e.document.uri))return!!(this.uri===Ti||container_Container.git.isTrackable(this.uri)&&r.window.visibleTextEditors.some(e=>e.document&&c.equals(e.document.uri,this.uri)))||(this._uri=Ti,this.resetChild(),!1);if(c.equals(e.document.uri,this.uri))return!0;let t,i=await gitUri_GitUri.fromUri(e.document.uri);if(void 0!==i.sha){const[e,o]=await container_Container.git.findWorkingFileName(i.fsPath,i.repoPath,i.sha);void 0!==e&&(t=gitUri_GitUri.resolveToUri(e,o))}return!(this.uri===Ti||!c.equals(t||i,this.uri))||(void 0!==t&&(i=await gitUri_GitUri.fromUri(t)),this._uri=i,this.resetChild(),!1)}setEditorFollowing(e){e&&void 0!==this._fileUri&&(this._fileUri=void 0,this._baseRef=void 0,this._uri=Ti),this.canSubscribe=e}async showHistoryForUri(e,t){this._fileUri=e,this._baseRef=t,this._uri=Ti,await this.triggerChange()}async subscribe(){return r.Disposable.from(r.window.onDidChangeActiveTextEditor(xe.debounce(this.onActiveEditorChanged,500),this))}onActiveEditorChanged(e){this.triggerChange()}}s([Be()],fileHistoryTrackerNode_FileHistoryTrackerNode.prototype,"resetChild",null),s([$e(),Oe()],fileHistoryTrackerNode_FileHistoryTrackerNode.prototype,"changeBase",null),s([$e(),Be()],fileHistoryTrackerNode_FileHistoryTrackerNode.prototype,"refresh",null),s([Oe()],fileHistoryTrackerNode_FileHistoryTrackerNode.prototype,"setEditorFollowing",null),s([$e(),Oe()],fileHistoryTrackerNode_FileHistoryTrackerNode.prototype,"showHistoryForUri",null),s([Be()],fileHistoryTrackerNode_FileHistoryTrackerNode.prototype,"subscribe",null),s([Be({args:!1})],fileHistoryTrackerNode_FileHistoryTrackerNode.prototype,"onActiveEditorChanged",null);class lineHistoryNode_LineHistoryNode extends viewNode_SubscribeableViewNode{constructor(e,t,i,o){super(e,t,i),this.selection=o}async getChildren(){const e=[],t=Ui.CommitLabel|(this.view.config.avatars?Ui.Gravatar:Ui.StatusIcon),i=await container_Container.git.getLogForFile(this.uri.repoPath,this.uri.fsPath,{ref:this.uri.sha,range:this.selection});void 0!==i&&e.push(...Ei(Ee.filterMap(i.commits.values(),e=>new commitFileNode_CommitFileNode(this.view,this,e.files[0],e,t,this.selection)),this));const o=await container_Container.git.getBlameForLine(this.uri,this.selection.active.line);if(void 0!==o){let i=e[0];if(void 0===i||i instanceof commitFileNode_CommitFileNode||(i=e[1]),void 0===i||i.commit.sha!==o.commit.sha){const i={fileName:o.commit.fileName,indexStatus:"?",originalFileName:o.commit.originalFileName,repoPath:this.uri.repoPath,status:"M",workingTreeStatus:"?"},s=new logCommit_GitLogCommit(at.File,this.uri.repoPath,o.commit.sha,"You",o.commit.email,o.commit.date,o.commit.date,o.commit.message,o.commit.fileName,[i],"M",o.commit.originalFileName,o.commit.previousSha,o.commit.originalFileName||o.commit.fileName);e.splice(0,0,new commitFileNode_CommitFileNode(this.view,this,i,s,t,this.selection))}}return 0===e.length?[new common_MessageNode(this.view,this,"No line history could be found.")]:e}getTreeItem(){const e=this.selection.isSingleLine?` #${this.selection.start.line+1}`:` #${this.selection.start.line+1}-${this.selection.end.line+1}`,t=new r.TreeItem(`${this.uri.getFilename()}${e}${this.uri.sha?` ${this.uri.sha===gitService_GitService.deletedOrMissingSha?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`,r.TreeItemCollapsibleState.Expanded);return t.contextValue=Di.LineHistory,t.description=this.uri.getDirectory(),t.tooltip=`History of ${this.uri.getFilename()}${e}\n${this.uri.getDirectory()}/${void 0===this.uri.sha?"":`\n\n${this.uri.sha}`}`,t.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-history.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-history.svg")},this.ensureSubscription(),t}async subscribe(){const e=await container_Container.git.getRepository(this.uri);if(void 0===e)return;const t=r.Disposable.from(e.onDidChange(this.onRepoChanged,this),e.onDidChangeFileSystem(this.onRepoFileSystemChanged,this),{dispose:()=>e.stopWatchingFileSystem()});return e.startWatchingFileSystem(),t}onRepoChanged(e){e.changed(Ft.Repository)&&(logger_Logger.log(`LineHistoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),this.triggerChange())}onRepoFileSystemChanged(e){e.uris.some(e=>e.toString(!0)===this.uri.toString(!0))&&(logger_Logger.debug(`LineHistoryNode.onRepoFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange())}}s([Be()],lineHistoryNode_LineHistoryNode.prototype,"subscribe",null);class lineHistoryTrackerNode_LineHistoryTrackerNode extends viewNode_SubscribeableViewNode{constructor(e){super(Ti,e)}dispose(){super.dispose(),this.resetChild()}resetChild(){void 0!==this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(void 0===this._child){if(this.uri===Ti)return[new common_MessageNode(this.view,this,"There are no editors open that can provide line history information.")];const e=new gitUri_GitUri(this.uri,Object.assign({},this.uri,{sha:this.uri.sha||this._base}));this._child=new lineHistoryNode_LineHistoryNode(e,this.view,this,this._selection)}return[this._child]}getTreeItem(){const e=new r.TreeItem("Line History",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Di.ActiveLineHistory,this.ensureSubscription(),e}async changeBase(){const e=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(this.uri.repoPath).show(`Change the line history base to${D.Ellipsis}`,{allowCommitId:!0,checked:this._base});void 0===e||e instanceof commonQuickPicks_CommandQuickPickItem||(this._base=e.current?void 0:e.ref,void 0!==this._child&&(this._uri=Ti,await this.triggerChange()))}async refresh(){const e=r.window.activeTextEditor;if(null==e||!container_Container.git.isTrackable(e.document.uri))return!!(this.uri===Ti||container_Container.git.isTrackable(this.uri)&&r.window.visibleTextEditors.some(e=>e.document&&c.equals(e.document.uri,this.uri)))||(this._uri=Ti,this._selection=void 0,this.resetChild(),!1);if(c.equals(e.document.uri,this.uri)&&void 0!==this._selection&&e.selection.isEqual(this._selection))return!0;const t=await gitUri_GitUri.fromUri(e.document.uri);return!(this.uri===Ti||!c.equals(t,this.uri)||void 0===this._selection||!e.selection.isEqual(this._selection))||(this._uri=t,this._selection=e.selection,this.resetChild(),!1)}setEditorFollowing(e){this.canSubscribe=e}async subscribe(){if(container_Container.lineTracker.isSubscribed(this))return;const e=xe.debounce(this.onActiveLinesChanged.bind(this),250);return container_Container.lineTracker.start(this,r.Disposable.from(container_Container.lineTracker.onDidChangeActiveLines(t=>{t.pending||e(t)})))}onActiveLinesChanged(e){this.triggerChange()}}s([Be()],lineHistoryTrackerNode_LineHistoryTrackerNode.prototype,"resetChild",null),s([$e(),Oe()],lineHistoryTrackerNode_LineHistoryTrackerNode.prototype,"changeBase",null),s([$e(),Be()],lineHistoryTrackerNode_LineHistoryTrackerNode.prototype,"refresh",null),s([Oe()],lineHistoryTrackerNode_LineHistoryTrackerNode.prototype,"setEditorFollowing",null),s([Be()],lineHistoryTrackerNode_LineHistoryTrackerNode.prototype,"subscribe",null),s([Be({args:!1})],lineHistoryTrackerNode_LineHistoryTrackerNode.prototype,"onActiveLinesChanged",null);class remoteNode_RemoteNode extends Ni{constructor(e,t,i,o,s){super(e,t,i),this.remote=o,this.repo=s}get id(){return`gitlens:repository(${this.remote.repoPath}):remote(${this.remote.name})`}async getChildren(){const e=await this.repo.getBranches();if(void 0===e)return[];e.sort((e,t)=>e.name.localeCompare(t.name,void 0,{numeric:!0,sensitivity:"base"}));const t=[...Ee.filterMap(e,e=>e.remote&&e.name.startsWith(this.remote.name)?new branchNode_BranchNode(this.uri,this.view,this,e):void 0)];if(this.view.config.branches.layout===b.List)return t;const i=E.makeHierarchical(t,e=>e.branch.detached?[e.branch.name]:e.branch.getName().split("/"),(...e)=>e.join("/"),this.view.config.files.compact),o=new branchOrTagFolderNode_BranchOrTagFolderNode(this.view,this,"remote-branch",this.repo.path,"",void 0,i);return await o.getChildren()}getTreeItem(){const e=this.remote.types.find(e=>e.type===mt.Fetch),t=this.remote.types.find(e=>e.type===mt.Push);let i;i=e&&t?D.ArrowLeftRightLong:e?D.ArrowLeft:t?D.ArrowRight:D.Dash;const o=new r.TreeItem(this.remote.name,r.TreeItemCollapsibleState.Collapsed);return o.description=`${i}${D.Space} ${void 0!==this.remote.provider?this.remote.provider.name:this.remote.domain} ${D.Space}${D.Dot}${D.Space} ${this.remote.path}`,o.contextValue=Di.Remote,o.id=this.id,o.tooltip=`${this.remote.name}\n${this.remote.path} (${void 0!==this.remote.provider?this.remote.provider.name:this.remote.domain})`,void 0!==this.remote.provider?o.iconPath={dark:container_Container.context.asAbsolutePath(`images/dark/icon-${this.remote.provider.icon}.svg`),light:container_Container.context.asAbsolutePath(`images/light/icon-${this.remote.provider.icon}.svg`)}:o.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-remote.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-remote.svg")},o}fetch(e={}){return this.repo.fetch(Object.assign({},e,{remote:this.remote.name}))}}s([Oe()],remoteNode_RemoteNode.prototype,"fetch",null);class remotesNode_RemotesNode extends Ni{constructor(e,t,i,o){super(e,t,i),this.repo=o}get id(){return`gitlens:repository(${this.repo.path}):remotes`}async getChildren(){const e=await this.repo.getRemotes();return void 0===e||0===e.length?[new common_MessageNode(this.view,this,"No remotes could be found")]:(e.sort((e,t)=>e.name.localeCompare(t.name,void 0,{numeric:!0,sensitivity:"base"})),[...Ee.map(e,e=>new remoteNode_RemoteNode(this.uri,this.view,this,e,this.repo))])}getTreeItem(){const e=new r.TreeItem("Remotes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Di.Remotes,e.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-remote.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-remote.svg")},e}}var Ai,Mi;!function(e){e.ConfigurationChanged="ConfigurationChanged",e.VisibilityChanged="VisibilityChanged"}(Ai||(Ai={}));class viewBase_ViewBase{constructor(e){this.id=e,this._onDidChangeTreeData=new r.EventEmitter,this._onDidChangeVisibility=new r.EventEmitter,this._onDidChangeNodeState=new r.EventEmitter,this.registerCommands(),container_Container.context.subscriptions.push(io.onDidChange(this.onConfigurationChanged,this)),setImmediate(()=>this.onConfigurationChanged(io.initializingChangeEvent))}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}get onDidChangeVisibility(){return this._onDidChangeVisibility.event}get onDidChangeNodeState(){return this._onDidChangeNodeState.event}dispose(){this._disposable&&this._disposable.dispose()}getQualifiedCommand(e){return`${this.id}.${e}`}initialize(e,t={}){this._disposable&&(this._disposable.dispose(),this._onDidChangeTreeData=new r.EventEmitter),this._tree=r.window.createTreeView(`${this.id}${e?`:${e}`:""}`,Object.assign({},t,{treeDataProvider:this})),this._disposable=r.Disposable.from(this._tree,this._tree.onDidChangeVisibility(xe.debounce(this.onVisibilityChanged,250),this),this._tree.onDidCollapseElement(this.onElementCollapsed,this),this._tree.onDidExpandElement(this.onElementExpanded,this))}ensureRoot(){return void 0===this._root&&(this._root=this.getRoot()),this._root}getChildren(e){if(void 0!==e)return e.getChildren();return this.ensureRoot().getChildren()}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}onElementCollapsed(e){this._onDidChangeNodeState.fire(Object.assign({},e,{state:r.TreeItemCollapsibleState.Collapsed}))}onElementExpanded(e){this._onDidChangeNodeState.fire(Object.assign({},e,{state:r.TreeItemCollapsibleState.Expanded}))}onVisibilityChanged(e){this._onDidChangeVisibility.fire(e)}get selection(){return void 0===this._tree||void 0===this._root?[]:this._tree.selection}get visible(){return void 0!==this._tree&&this._tree.visible}async refresh(e){void 0!==this._root&&await this._root.refresh(e),this.triggerNodeChange()}async refreshNode(e,t){void 0!==t&&function(e){return Boolean(e.supportsPaging)}(e)&&(void 0===t.maxCount||0===t.maxCount?e.maxCount=t.maxCount:e.maxCount=(e.maxCount||t.maxCount)+t.maxCount),!0!==await e.refresh()&&this.triggerNodeChange(e)}async reveal(e,t){if(void 0!==this._tree)try{await this._tree.reveal(e,t)}catch(e){logger_Logger.error(e)}}async show(){try{const e=this.location;return await r.commands.executeCommand(`${this.id}${e?`:${e}`:""}.focus`)}catch(e){return void logger_Logger.error(e)}}triggerNodeChange(e){this._onDidChangeTreeData.fire(void 0!==e&&e!==this._root?e:void 0)}}s([Be()],viewBase_ViewBase.prototype,"refresh",null),s([Be({args:{0:e=>e.toString()}})],viewBase_ViewBase.prototype,"refreshNode",null),s([Oe({args:{0:e=>e.toString()}})],viewBase_ViewBase.prototype,"reveal",null),s([Oe()],viewBase_ViewBase.prototype,"show",null),s([Be({args:{0:e=>null!=e?e.toString():""}})],viewBase_ViewBase.prototype,"triggerNodeChange",null);class stashFileNode_StashFileNode extends commitFileNode_CommitFileNode{constructor(e,t,i,o){super(e,t,i,o,Ui.File)}get resourceType(){return Di.StashFile}getCommitTemplate(){return this.view.config.stashFormat}getCommitDescriptionTemplate(){return this.view.config.stashDescriptionFormat}getCommitFileTemplate(){return this.view.config.stashFileFormat}getCommitFileDescriptionTemplate(){return this.view.config.stashFileDescriptionFormat}}class stashNode_StashNode extends ViewRefNode{constructor(e,t,i){super(i.toGitUri(),e,t),this.commit=i}get id(){return`gitlens:repository(${this.commit.repoPath}):stash(${this.commit.sha})`}get ref(){return this.commit.sha}async getChildren(){const e=this.commit.files,t=await container_Container.git.getLog(this.commit.repoPath,{maxCount:1,ref:`${this.commit.stashName}^3`});if(void 0!==t){const i=Ee.first(t.commits.values());void 0!==i&&0!==i.files.length&&(i.files.forEach(e=>e.status="?"),e.splice(e.length,0,...i.files))}const i=e.map(e=>new stashFileNode_StashFileNode(this.view,this,e,this.commit.toFileCommit(e)));return i.sort((e,t)=>e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"})),i}getTreeItem(){const e=new r.TreeItem(commitFormatter_CommitFormatter.fromTemplate(this.view.config.stashFormat,this.commit,{truncateMessageAtNewLine:!0,dateFormat:container_Container.config.defaultDateFormat}),r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=commitFormatter_CommitFormatter.fromTemplate(this.view.config.stashDescriptionFormat,this.commit,{truncateMessageAtNewLine:!0,dateFormat:container_Container.config.defaultDateFormat}),e.contextValue=Di.Stash,e.tooltip=commitFormatter_CommitFormatter.fromTemplate("${ago} (${date})\n\n${message}",this.commit,{dateFormat:container_Container.config.defaultDateFormat}),e}}class stashesNode_StashesNode extends Ni{constructor(e,t,i,o){super(e,t,i),this.repo=o}get id(){return`gitlens:repository(${this.repo.path}):stashes`}async getChildren(){const e=await this.repo.getStashList();return void 0===e?[new common_MessageNode(this.view,this,"No stashed changes.")]:[...Ee.map(e.commits.values(),e=>new stashNode_StashNode(this.view,this,e))]}getTreeItem(){const e=new r.TreeItem("Stashes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Di.Stashes,e.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-stash.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-stash.svg")},e}}class statusFileNode_StatusFileNode extends Ni{constructor(e,t,i,o,s){super(gitUri_GitUri.fromFile(o,i,"HEAD"),e,t),this.repoPath=i,this.file=o,this.commits=s,this._hasStagedChanges=!1,this._hasUnstagedChanges=!1;for(const e of this.commits)if(e.isStagedUncommitted?this._hasStagedChanges=!0:e.isUncommitted&&(this._hasUnstagedChanges=!0),this._hasStagedChanges&&this._hasUnstagedChanges)break}async getChildren(){return this.commits.map(e=>new commitFileNode_CommitFileNode(this.view,this,this.file,e,Ui.CommitLabel|(this.view.config.avatars?Ui.Gravatar:Ui.CommitIcon)))}async getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.description=this.description,(this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length)this._hasStagedChanges?(e.contextValue=Di.FileStaged,e.tooltip=statusFormatter_StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status} in Index (staged)",this.file)):(e.contextValue=Di.FileUnstaged,e.tooltip=statusFormatter_StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status} in Working Tree",this.file)),e.resourceUri=gitUri_GitUri.resolveToUri(this.file.fileName,this.repoPath),e.iconPath=r.ThemeIcon.File,e.command=this.getCommand();else{if(e.collapsibleState=r.TreeItemCollapsibleState.Collapsed,this._hasStagedChanges||this._hasUnstagedChanges)this._hasStagedChanges&&this._hasUnstagedChanges?e.contextValue=Di.FileStagedAndUnstaged:this._hasStagedChanges?e.contextValue=Di.FileStaged:e.contextValue=Di.FileUnstaged,e.resourceUri=gitUri_GitUri.resolveToUri(this.file.fileName,this.repoPath),e.iconPath=r.ThemeIcon.File;else{e.contextValue=Di.StatusFileCommits;const t=st.getStatusIcon(this.file.status);e.iconPath={dark:container_Container.context.asAbsolutePath(G.join("images","dark",t)),light:container_Container.context.asAbsolutePath(G.join("images","light",t))}}e.tooltip=statusFormatter_StatusFileFormatter.fromTemplate(`\${file}\n\${directory}/\n\n\${status} in ${this.getChangedIn()}`,this.file)}return this._label=void 0,this._description=void 0,e}get description(){return void 0===this._description&&(this._description=statusFormatter_StatusFileFormatter.fromTemplate(this.view.config.statusFileDescriptionFormat,Object.assign({},this.file,{commit:this.commit}),{relativePath:this.relativePath})),this._description}get folderName(){return void 0===this._folderName&&(this._folderName=G.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=statusFormatter_StatusFileFormatter.fromTemplate(this.view.config.statusFileFormat,Object.assign({},this.file,{commit:this.commit}),{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this._hasStagedChanges&&!this._hasUnstagedChanges?-3:this._hasStagedChanges?-2:this._hasUnstagedChanges?-1:0}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getChangedIn(){const e=[];let t=0;return this._hasUnstagedChanges&&(t++,e.push("Working Tree")),this._hasStagedChanges&&(t++,e.push("Index (staged)")),this.commits.length>t&&(t=this.commits.length-t),t>0&&e.push(De.pluralize("commit",t)),e.length>2&&(e[e.length-1]=`and ${e[e.length-1]}`),e.join(e.length>2?", ":" and ")}getCommand(){return{title:"Compare File with Previous Revision",command:Mi.DiffWithPrevious,arguments:[gitUri_GitUri.fromFile(this.file,this.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class statusFilesNode_StatusFilesNode extends Ni{constructor(e,t,i,o){super(gitUri_GitUri.fromRepoPath(i.repoPath),e,t),this.status=i,this.range=o,this.repoPath=i.repoPath}get id(){return`gitlens:repository(${this.status.repoPath}):status:files`}async getChildren(){let e=[];const t=this.repoPath;let i;void 0!==this.range&&void 0!==(i=await container_Container.git.getLog(t,{maxCount:0,ref:this.range}))&&(e=[...Ee.flatMap(i.commits.values(),e=>e.files.map(t=>Object.assign({},t,{commit:e})))]),0!==this.status.files.length&&this.includeWorkingTree&&e.splice(0,0,...Ee.flatMap(this.status.files,e=>{if(void 0!==e.workingTreeStatus&&void 0!==e.indexStatus){const t=new Date;return t.setMilliseconds(t.getMilliseconds()-1),[this.toStatusFile(e,gitService_GitService.uncommittedSha,gitService_GitService.stagedUncommittedSha),this.toStatusFile(e,gitService_GitService.stagedUncommittedSha,"HEAD",t)]}return void 0!==e.indexStatus?[this.toStatusFile(e,gitService_GitService.stagedUncommittedSha,"HEAD")]:[this.toStatusFile(e,gitService_GitService.uncommittedSha,"HEAD")]})),e.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());const o=E.groupBy(e,e=>e.fileName);let s=[...Ee.map(O.values(o),e=>new statusFileNode_StatusFileNode(this.view,this,t,e[e.length-1],e.map(e=>e.commit)))];if(this.view.config.files.layout!==C.List){const e=E.makeHierarchical(s,e=>e.uri.getRelativePath().split("/"),(...e)=>De.normalizePath(G.join(...e)),this.view.config.files.compact),i=new folderNode_FolderNode(this.view,this,t,"",e);s=await i.getChildren()}else s.sort((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"}));return s}async getTreeItem(){let e=void 0!==this.status.files&&this.includeWorkingTree?this.status.files.length:0;if(void 0!==this.status.upstream&&this.status.state.ahead>0)if(e>0){const t=await container_Container.git.getDiffStatus(this.repoPath,`${this.status.upstream}...`);if(void 0!==t){const i=new Set;for(const e of this.status.files)i.add(e.fileName);for(const e of t)i.add(e.fileName);e=i.size}}else{const t=await container_Container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);void 0!==t&&(e+=t.files)}const t=`${De.pluralize("file",e)} changed`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.Collapsed);return i.id=this.id,i.contextValue=Di.StatusFiles,i.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-diff.svg")},i}get includeWorkingTree(){return this.view.config.includeWorkingTree}toStatusFile(e,t,i,o){return{status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,fileName:e.fileName,originalFileName:e.originalFileName,commit:new logCommit_GitLogCommit(at.File,e.repoPath,t,"You",void 0,o||new Date,o||new Date,"",e.fileName,[e],e.status,e.originalFileName,i,e.fileName)}}}class tagNode_TagNode extends ViewRefNode{constructor(e,t,i,o){super(e,t,i),this.tag=o,this.supportsPaging=!0}get id(){return`gitlens:repository(${this.tag.repoPath}):tag(${this.tag.name})`}get label(){return this.view.config.branches.layout===b.Tree?this.tag.getBasename():this.tag.name}get ref(){return this.tag.name}async getChildren(){const e=await container_Container.git.getLog(this.uri.repoPath,{maxCount:this.maxCount||this.view.config.defaultItemLimit,ref:this.tag.name});if(void 0===e)return[new common_MessageNode(this.view,this,"No commits could be found.")];const t=await Bi(this.uri.repoPath,this.tag.name),i=[...Ei(Ee.map(e.commits.values(),e=>new commitNode_CommitNode(this.view,this,e,void 0,t)),this)];return e.truncated&&i.push(new common_ShowMoreNode(this.view,this,"Commits")),i}async getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Di.Tag,e.tooltip=`${this.tag.name}${void 0===this.tag.annotation?"":`\n${this.tag.annotation}`}`,e}}class tagsNode_TagsNode extends Ni{constructor(e,t,i,o){super(e,t,i),this.repo=o}get id(){return`gitlens:repository(${this.repo.path}):tags`}async getChildren(){const e=await this.repo.getTags();if(0===e.length)return[new common_MessageNode(this.view,this,"No tags could be found.")];e.sort((e,t)=>e.name.localeCompare(t.name,void 0,{numeric:!0,sensitivity:"base"}));const t=e.map(e=>new tagNode_TagNode(this.uri,this.view,this,e));if(this.view.config.branches.layout===b.List)return t;const i=E.makeHierarchical(t,e=>e.tag.name.split("/"),(...e)=>e.join("/"),this.view.config.files.compact),o=new branchOrTagFolderNode_BranchOrTagFolderNode(this.view,this,"tag",this.repo.path,"",void 0,i);return await o.getChildren()}async getTreeItem(){const e=new r.TreeItem("Tags",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Di.Tags,e.iconPath={dark:container_Container.context.asAbsolutePath("images/dark/icon-tag.svg"),light:container_Container.context.asAbsolutePath("images/light/icon-tag.svg")},e}}class repositoryNode_RepositoryNode extends viewNode_SubscribeableViewNode{constructor(e,t,i,o){super(e,t,i),this.repo=o,this._lastFetched=0,this._status=this.repo.getStatus()}get id(){return`gitlens:repository(${this.repo.path})`}async getChildren(){if(void 0===this._children){const e=[],t=await this._status;if(void 0!==t){const i=new branch_GitBranch(t.repoPath,t.branch,!0,t.sha,t.upstream,t.state.ahead,t.state.behind,t.detached);if(e.push(new branchNode_BranchNode(this.uri,this.view,this,i,!0)),t.state.behind&&e.push(new branchTrackingStatusNode_BranchTrackingStatusNode(this.view,this,t,"behind",!0)),t.state.ahead&&e.push(new branchTrackingStatusNode_BranchTrackingStatusNode(this.view,this,t,"ahead",!0)),t.state.ahead||0!==t.files.length&&this.includeWorkingTree){const o=t.upstream?`${t.upstream}..${i.ref}`:void 0;e.push(new statusFilesNode_StatusFilesNode(this.view,this,t,o))}this.view.config.repositories.compact||e.push(new common_MessageNode(this.view,this,"",D.Dash.repeat(2),""))}e.push(new branchesNode_BranchesNode(this.uri,this.view,this,this.repo),new remotesNode_RemotesNode(this.uri,this.view,this,this.repo),new stashesNode_StashesNode(this.uri,this.view,this,this.repo),new tagsNode_TagsNode(this.uri,this.view,this,this.repo)),this._children=e}return this._children}async getTreeItem(){const e=this.repo.formattedName||this.uri.repoPath||"";this._lastFetched=await this.repo.getLastFetched();const t=this.formatLastFetched({prefix:`${De.pad(D.Dash,2,2)}Last fetched on `,format:"dddd MMMM Do, YYYY h:mm a"});let i,o=this.repo.formattedName?`${this.repo.formattedName}${t}\n${this.uri.repoPath}`:`${this.uri.repoPath}${t}`,s="",n="";const a=await this._status;if(void 0!==a){o+=`\n\n${a.branch}`,0!==a.files.length&&this.includeWorkingTree&&(n=a.getFormattedDiffStatus({compact:!0,prefix:De.pad(D.Dot,2,2)}));const e=a.getUpstreamStatus({prefix:`${D.Space} `});i=`${a.branch}${e}${n}`,s=n?"-blue":"",void 0!==a.upstream&&(o+=` is tracking ${a.upstream}\n${a.getUpstreamStatus({empty:"up-to-date",expand:!0,separator:"\n",suffix:"\n"})}`,a.state.behind&&(s="-red"),a.state.ahead&&(s=a.state.behind?"-yellow":"-green")),n&&(o+=`\nWorking tree has uncommitted changes${a.getFormattedDiffStatus({expand:!0,prefix:"\n",separator:"\n"})}`)}const c=new r.TreeItem(e,r.TreeItemCollapsibleState.Expanded);return c.contextValue=Di.Repository,c.description=`${i||""}${this.formatLastFetched({prefix:`${De.pad(D.Dot,2,2)}Last fetched `})}`,c.id=this.id,c.tooltip=o,c.iconPath={dark:container_Container.context.asAbsolutePath(`images/dark/icon-repo${s}.svg`),light:container_Container.context.asAbsolutePath(`images/light/icon-repo${s}.svg`)},this.ensureSubscription(),c}fetch(e={}){return this.repo.fetch(e)}pull(e={}){return this.repo.pull(e)}push(e={}){return this.repo.push(e)}async refresh(){this._status=this.repo.getStatus(),this._children=void 0,await this.ensureSubscription()}async subscribe(){const e=[this.repo.onDidChange(this.onRepoChanged,this)];return this.includeWorkingTree&&(e.push(this.repo.onDidChangeFileSystem(this.onFileSystemChanged,this),{dispose:()=>this.repo.stopWatchingFileSystem()},xe.interval(()=>void this.updateLastFetched(),6e4)),this.repo.startWatchingFileSystem()),r.Disposable.from(...e)}get includeWorkingTree(){return this.view.config.includeWorkingTree}onFileSystemChanged(e){this.triggerChange()}onRepoChanged(e){if(e.changed(Ft.Closed))this.dispose();else if(void 0===this._children||e.changed(Ft.Repository)||e.changed(Ft.Config))this.triggerChange();else{if(e.changed(Ft.Stashes)){const e=this._children.find(e=>e instanceof stashesNode_StashesNode);void 0!==e&&this.view.triggerNodeChange(e)}if(e.changed(Ft.Remotes)){const e=this._children.find(e=>e instanceof remotesNode_RemotesNode);void 0!==e&&this.view.triggerNodeChange(e)}if(e.changed(Ft.Tags)){const e=this._children.find(e=>e instanceof tagsNode_TagsNode);void 0!==e&&this.view.triggerNodeChange(e)}}}formatLastFetched(e={}){return 0===this._lastFetched?"":void 0===e.format&&Date.now()-this._lastFetched<Q.MillisecondsPerDay?`${e.prefix||""}${Q.toFormatter(new Date(this._lastFetched)).fromNow()}`:`${e.prefix||""}${Q.toFormatter(new Date(this._lastFetched)).format(e.format||"MMM DD, YYYY")}`}async updateLastFetched(){const e=this._lastFetched;this._lastFetched=await this.repo.getLastFetched(),this._lastFetched===e&&Date.now()-this._lastFetched>=Q.MillisecondsPerDay||this.view.triggerNodeChange(this)}}s([Oe()],repositoryNode_RepositoryNode.prototype,"fetch",null),s([Oe()],repositoryNode_RepositoryNode.prototype,"pull",null),s([Oe()],repositoryNode_RepositoryNode.prototype,"push",null),s([$e(),Be()],repositoryNode_RepositoryNode.prototype,"refresh",null),s([Be()],repositoryNode_RepositoryNode.prototype,"subscribe",null),s([Be({args:{0:e=>`{ repository: ${e.repository?e.repository.name:""}, uris: [${e.uris.map(e=>e.fsPath).join(", ")}] }`}})],repositoryNode_RepositoryNode.prototype,"onFileSystemChanged",null),s([Be({args:{0:e=>`{ repository: ${e.repository?e.repository.name:""}, changes: ${e.changes.join()} }`}})],repositoryNode_RepositoryNode.prototype,"onRepoChanged",null),s([Be()],repositoryNode_RepositoryNode.prototype,"updateLastFetched",null);class repositoriesNode_RepositoriesNode extends viewNode_SubscribeableViewNode{constructor(e){super(Ti,e)}dispose(){if(super.dispose(),void 0!==this._children){for(const e of this._children)e instanceof repositoryNode_RepositoryNode&&e.dispose();this._children=void 0}}async getChildren(){if(void 0===this._children){const e=await container_Container.git.getOrderedRepositories();if(0===e.length)return[new common_MessageNode(this.view,this,"No repositories could be found.")];const t=[];for(const i of e)i.closed||t.push(new repositoryNode_RepositoryNode(gitUri_GitUri.fromRepoPath(i.path),this.view,this,i));this._children=t}return this._children}getTreeItem(){const e=new r.TreeItem("Repositories",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Di.Repositories,this.ensureSubscription(),e}async refresh(e){if(void 0===this._children)return;const t=await container_Container.git.getOrderedRepositories();if(0===t.length&&(void 0===this._children||0===this._children.length))return;if(0===t.length)return void(this._children=[new common_MessageNode(this.view,this,"No repositories could be found.")]);const i=[];for(const e of t){if(e.closed)continue;const t=e.normalizedPath,o=this._children.find(e=>e.repo.normalizedPath===t);void 0!==o?(i.push(o),o.refresh()):i.push(new repositoryNode_RepositoryNode(gitUri_GitUri.fromRepoPath(e.path),this.view,this,e))}for(const e of this._children)i.includes(e)||e.dispose();this._children=i,e===Ai.ConfigurationChanged&&await this.unsubscribe(),this.ensureSubscription()}async subscribe(){const e=[container_Container.git.onDidChangeRepositories(this.onRepositoriesChanged,this)];return this.view.config.autoReveal&&e.push(r.window.onDidChangeActiveTextEditor(xe.debounce(this.onActiveEditorChanged,500),this)),r.Disposable.from(...e)}onActiveEditorChanged(e){if(null!=e&&void 0!==this._children&&1!==this._children.length)try{const t=e.document.uri,i=this._children.find(e=>e instanceof repositoryNode_RepositoryNode&&e.repo.containsUri(t));if(void 0===i)return;let o=0===this.view.selection.length?void 0:this.view.selection[0];for(;void 0!==o;){if(o===i)return;o=o.getParent()}this.view.reveal(i,{expand:!0})}catch(e){logger_Logger.error(e)}}onRepositoriesChanged(){this.triggerChange()}}s([$e(),Be()],repositoriesNode_RepositoriesNode.prototype,"refresh",null),s([Be()],repositoriesNode_RepositoriesNode.prototype,"subscribe",null),s([Be({args:!1})],repositoriesNode_RepositoriesNode.prototype,"onActiveEditorChanged",null),s([Be()],repositoriesNode_RepositoriesNode.prototype,"onRepositoriesChanged",null);class resultsCommitsNode_ResultsCommitsNode extends Ni{constructor(e,t,i,o){super(gitUri_GitUri.fromRepoPath(i),e,t),this.repoPath=i,this._commitsQuery=o,this.supportsPaging=!0}get type(){return Di.ResultsCommits}async getChildren(){const{log:e}=await this.getCommitsQueryResults();if(void 0===e)return[];const t=await Bi(this.uri.repoPath),i=[...Ei(Ee.map(e.commits.values(),e=>new commitNode_CommitNode(this.view,this,e,void 0,t)),this)];return e.truncated&&i.push(new common_ShowMoreNode(this.view,this,"Results")),i}async getTreeItem(){const{label:e,log:t}=await this.getCommitsQueryResults();let i;if(await container_Container.git.getRepositoryCount()>1){const e=await container_Container.git.getRepository(this.repoPath);i=e&&e.formattedName||this.repoPath}const o=new r.TreeItem(e,t&&t.count>0?r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.None);return o.contextValue=this.type,o.description=i,o}refresh(){this._commitsQueryResults=this._commitsQuery(this.maxCount)}getCommitsQueryResults(){return void 0===this._commitsQueryResults&&(this._commitsQueryResults=this._commitsQuery(this.maxCount)),this._commitsQueryResults}}class resultsFileNode_ResultsFileNode extends Ni{constructor(e,t,i,o,s,r){super(gitUri_GitUri.fromFile(o,i,s||(r||void 0)),e,t),this.repoPath=i,this.file=o,this.ref1=s,this.ref2=r}get ref(){return this.ref1?this.ref1:this.ref2?this.ref2:void 0}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);e.contextValue=Di.ResultsFile,e.description=this.description,e.tooltip=statusFormatter_StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status}",this.file);const t=st.getStatusIcon(this.file.status);return e.iconPath={dark:container_Container.context.asAbsolutePath(G.join("images","dark",t)),light:container_Container.context.asAbsolutePath(G.join("images","light",t))},e.command=this.getCommand(),e}get description(){return void 0===this._description&&(this._description=statusFormatter_StatusFileFormatter.fromTemplate("${directory}",this.file,{relativePath:this.relativePath})),this._description}get folderName(){return void 0===this._folderName&&(this._folderName=G.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=statusFormatter_StatusFileFormatter.fromTemplate("${file}",this.file,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}get priority(){return 0}getCommand(){return{title:"Open Changes",command:Mi.DiffWith,arguments:[this.uri,{lhs:{sha:this.ref1,uri:this.uri},rhs:{sha:this.ref2,uri:"R"===this.file.status?gitUri_GitUri.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class resultsFilesNode_ResultsFilesNode extends Ni{constructor(e,t,i,o,s){super(gitUri_GitUri.fromRepoPath(i),e,t),this.repoPath=i,this._ref1=o,this._ref2=s}async getChildren(){const{diff:e}=await this.getFilesQueryResults();if(void 0===e)return[];let t=[...Ee.map(e,e=>new resultsFileNode_ResultsFileNode(this.view,this,this.repoPath,e,this._ref1,this._ref2))];if(this.view.config.files.layout!==C.List){const e=E.makeHierarchical(t,e=>e.uri.getRelativePath().split("/"),(...e)=>De.normalizePath(G.join(...e)),this.view.config.files.compact),i=new folderNode_FolderNode(this.view,this,this.repoPath,"",e);t=await i.getChildren()}else t.sort((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"}));return t}async getTreeItem(){const{diff:e,label:t}=await this.getFilesQueryResults(),i=new r.TreeItem(t,e&&e.length>0?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);return i.contextValue=Di.ResultsFiles,i}refresh(){this._filesQueryResults=this.getFilesQueryResultsCore()}getFilesQueryResults(){return void 0===this._filesQueryResults&&(this._filesQueryResults=this.getFilesQueryResultsCore()),this._filesQueryResults}async getFilesQueryResultsCore(){const e=await container_Container.git.getDiffStatus(this.uri.repoPath,this._ref1,this._ref2);return{label:`${De.pluralize("file",void 0!==e?e.length:0,{zero:"No"})} changed`,diff:e}}}class compareResultsNode_CompareResultsNode extends Ni{constructor(e,t,i,o){super(gitUri_GitUri.fromRepoPath(t),e),this.repoPath=t,this._ref1=i,this._ref2=o}get ref1(){return this._ref1}get ref2(){return this._ref2}async getChildren(){return[new resultsCommitsNode_ResultsCommitsNode(this.view,this,this.uri.repoPath,this.getCommitsQuery.bind(this)),new resultsFilesNode_ResultsFilesNode(this.view,this,this.uri.repoPath,this._ref1.ref,this._ref2.ref)]}async getTreeItem(){let e;if(await container_Container.git.getRepositoryCount()>1){const t=await container_Container.git.getRepository(this.uri.repoPath);e=t&&t.formattedName||this.uri.repoPath}const t=new r.TreeItem(`Comparing ${this._ref1.label||gitService_GitService.shortenSha(this._ref1.ref,{working:"Working Tree"})} to ${this._ref2.label||gitService_GitService.shortenSha(this._ref2.ref,{working:"Working Tree"})}`,r.TreeItemCollapsibleState.Collapsed);return t.contextValue=Di.CompareResults,t.description=e,t}swap(){const e=this._ref1;this._ref1=this._ref2,this._ref2=e,this.view.triggerNodeChange(this)}async getCommitsQuery(e){const t=await container_Container.git.getLog(this.uri.repoPath,{maxCount:e,ref:`${this._ref1.ref}...${this._ref2.ref||"HEAD"}`}),i=void 0!==t?t.count:0,o=void 0!==t&&t.truncated;return{label:De.pluralize("commit",i,{number:o?`${i}+`:void 0,zero:"No"}),log:t}}}class comparePickerNode_ComparePickerNode extends Ni{constructor(e,t){super(Ti,e,t),this.parent=t}getChildren(){return[]}async getTreeItem(){const e=this.parent.selectedRef,t=void 0!==e?e.repoPath:void 0;let i,o;if(void 0!==t&&await container_Container.git.getRepositoryCount()>1){const e=await container_Container.git.getRepository(t);i=e&&e.formattedName||t}return void 0===e?((o=new r.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",r.TreeItemCollapsibleState.None)).contextValue=Di.ComparePicker,o.description=i,o.tooltip=`Click to select branch or tag for compare${D.Ellipsis}`,o.command={title:`Select branch or tag for compare${D.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):((o=new r.TreeItem(`Compare ${e.label} with <branch, tag, or ref>`,r.TreeItemCollapsibleState.None)).contextValue=Di.ComparePickerWithRef,o.description=i,o.tooltip=`Click to compare ${e.label} with${D.Ellipsis}`,o.command={title:`Compare ${e.label} with${D.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),o}}class compareNode_CompareNode extends Ni{constructor(e){super(Ti,e),this._children=[]}get selectedRef(){return this._selectedRef}async getChildren(){if(0===this._children.length)this._comparePickerNode=new comparePickerNode_ComparePickerNode(this.view,this),this._children=[this._comparePickerNode];else if(void 0!==this._selectedRef&&(void 0===this._comparePickerNode||!this._children.includes(this._comparePickerNode))){this._comparePickerNode=new comparePickerNode_ComparePickerNode(this.view,this),this._children.splice(0,0,this._comparePickerNode);const e=this._comparePickerNode;setImmediate(()=>this.view.reveal(e,{focus:!1,select:!0}))}return this._children}getTreeItem(){const e=new r.TreeItem("Compare",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Di.Compare,e}addOrReplace(e,t){if(!this._children.includes(e)){if(0!==this._children.length&&t)this._children.length=0,this._children.push(e);else{if(void 0!==this._comparePickerNode){const e=this._children.indexOf(this._comparePickerNode);-1!==e&&this._children.splice(e,1)}this._children.splice(0,0,e)}this.view.triggerNodeChange()}}clear(){this._selectedRef=void 0,N(F.ViewsCanCompare,!1),this._children.length=0,this.view.triggerNodeChange()}dismiss(e){if(this._selectedRef=void 0,N(F.ViewsCanCompare,!1),0!==this._children.length){const t=this._children.indexOf(e);if(-1===t)return;this._children.splice(t,1)}this.view.triggerNodeChange()}async refresh(){0!==this._children.length&&await Promise.all(this._children.map(e=>e.refresh()).filter(xe.isPromise))}async compareWithSelected(e,t){if(void 0===this._selectedRef)return;if(void 0===e)e=this._selectedRef.repoPath;else if(e!==this._selectedRef.repoPath)return void this.selectForCompare(e,t);if(void 0===t){const i=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(e).show(`Compare ${this.getRefName(this._selectedRef.ref)} with${D.Ellipsis}`,{allowCommitId:!0});if(void 0===i||i instanceof commonQuickPicks_CommandQuickPickItem)return;t=i.ref}const i=this._selectedRef;this._selectedRef=void 0,N(F.ViewsCanCompare,!1),await this.view.compare(e,i.ref,t)}async selectForCompare(e,t){if(void 0===e&&(e=await ji(void 0,`Select branch or tag for compare in which repository${D.Ellipsis}`)),void 0===e)return;let i=!1;if(void 0===t){const o=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(e).show(`Select branch or tag for compare${D.Ellipsis}`,{allowCommitId:!0});if(void 0===o||o instanceof commonQuickPicks_CommandQuickPickItem)return;t=o.ref,i=!0}this._selectedRef={label:this.getRefName(t),repoPath:e,ref:t},N(F.ViewsCanCompare,!0),await this.view.show(),await this.triggerChange(),i&&await this.compareWithSelected()}getRefName(e){return"string"==typeof e?gitService_GitService.shortenSha(e):e.label||gitService_GitService.shortenSha(e.ref)}}s([Oe()],compareNode_CompareNode.prototype,"clear",null),s([Oe({args:{0:e=>e.toString()}})],compareNode_CompareNode.prototype,"dismiss",null),s([$e(),Be()],compareNode_CompareNode.prototype,"refresh",null);class searchNode_SearchNode extends Ni{constructor(e){super(Ti,e),this._children=[]}async getChildren(){if(0===this._children.length){const e={title:" ",command:"gitlens.showCommitSearch"};return[new common_CommandMessageNode(this.view,this,Object.assign({},e,{arguments:[this,{searchBy:hi.Message}]}),"Search commits by message","message-pattern","Click to search commits by message"),new common_CommandMessageNode(this.view,this,Object.assign({},e,{arguments:[this,{searchBy:hi.Author}]}),`${D.Space.repeat(4)} or, by author`,"@ author-pattern","Click to search commits by author"),new common_CommandMessageNode(this.view,this,Object.assign({},e,{arguments:[this,{searchBy:hi.Sha}]}),`${D.Space.repeat(4)} or, by commit id`,"# sha","Click to search commits by commit id"),new common_CommandMessageNode(this.view,this,Object.assign({},e,{arguments:[this,{searchBy:hi.Files}]}),`${D.Space.repeat(4)} or, by files`,": file-path/glob","Click to search commits by files"),new common_CommandMessageNode(this.view,this,Object.assign({},e,{arguments:[this,{searchBy:hi.Changes}]}),`${D.Space.repeat(4)} or, by changes`,"= pattern","Click to search commits by changes"),new common_CommandMessageNode(this.view,this,Object.assign({},e,{arguments:[this,{searchBy:hi.ChangedLines}]}),`${D.Space.repeat(4)} or, by changed lines`,"~ pattern","Click to search commits by changed lines")]}return this._children}getTreeItem(){const e=new r.TreeItem("Search",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Di.Search,e}addOrReplace(e,t){this._children.includes(e)||(0!==this._children.length&&t?(this._children.length=0,this._children.push(e)):this._children.splice(0,0,e),this.view.triggerNodeChange())}clear(){0!==this._children.length&&(this._children.length=0,this.view.triggerNodeChange())}dismiss(e){if(0===this._children.length)return;const t=this._children.findIndex(t=>t===e);-1!==t&&(this._children.splice(t,1),this.view.triggerNodeChange())}async refresh(){0!==this._children.length&&await Promise.all(this._children.map(e=>e.refresh()).filter(xe.isPromise))}}s([Oe()],searchNode_SearchNode.prototype,"clear",null),s([Oe({args:{0:e=>e.toString()}})],searchNode_SearchNode.prototype,"dismiss",null),s([$e(),Be()],searchNode_SearchNode.prototype,"refresh",null),function(e){e.ClearFileAnnotations="gitlens.clearFileAnnotations",e.CloseUnchangedFiles="gitlens.closeUnchangedFiles",e.ComputingFileAnnotations="gitlens.computingFileAnnotations",e.CopyMessageToClipboard="gitlens.copyMessageToClipboard",e.CopyRemoteFileUrlToClipboard="gitlens.copyRemoteFileUrlToClipboard",e.CopyShaToClipboard="gitlens.copyShaToClipboard",e.DiffDirectory="gitlens.diffDirectory",e.DiffDirectoryWithHead="gitlens.diffDirectoryWithHead",e.DiffHeadWithBranch="gitlens.diffHeadWithBranch",e.DiffWorkingWithBranch="gitlens.diffWorkingWithBranch",e.ExternalDiffAll="gitlens.externalDiffAll",e.DiffWith="gitlens.diffWith",e.DiffWithBranch="gitlens.diffWithBranch",e.DiffWithNext="gitlens.diffWithNext",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithPreviousInDiff="gitlens.diffWithPreviousInDiff",e.DiffLineWithPrevious="gitlens.diffLineWithPrevious",e.DiffWithRevision="gitlens.diffWithRevision",e.DiffWithWorking="gitlens.diffWithWorking",e.DiffLineWithWorking="gitlens.diffLineWithWorking",e.ExternalDiff="gitlens.externalDiff",e.FetchRepositories="gitlens.fetchRepositories",e.OpenChangedFiles="gitlens.openChangedFiles",e.OpenBranchesInRemote="gitlens.openBranchesInRemote",e.OpenBranchInRemote="gitlens.openBranchInRemote",e.OpenCommitInRemote="gitlens.openCommitInRemote",e.OpenFileInRemote="gitlens.openFileInRemote",e.OpenFileRevision="gitlens.openFileRevision",e.OpenInRemote="gitlens.openInRemote",e.OpenRepoInRemote="gitlens.openRepoInRemote",e.OpenWorkingFile="gitlens.openWorkingFile",e.PullRepositories="gitlens.pullRepositories",e.PushRepositories="gitlens.pushRepositories",e.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",e.ShowCommitInView="gitlens.showCommitInView",e.SearchCommits="gitlens.showCommitSearch",e.SearchCommitsInView="gitlens.views.search.searchCommits",e.ShowCompareView="gitlens.showCompareView",e.ShowFileHistoryView="gitlens.showFileHistoryView",e.ShowFileHistoryInView="gitlens.showFileHistoryInView",e.ShowLineHistoryView="gitlens.showLineHistoryView",e.ShowLastQuickPick="gitlens.showLastQuickPick",e.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",e.ShowQuickRevisionDetails="gitlens.showQuickRevisionDetails",e.ShowQuickStashList="gitlens.showQuickStashList",e.ShowRepositoriesView="gitlens.showRepositoriesView",e.ShowSearchView="gitlens.showSearchView",e.ShowSettingsPage="gitlens.showSettingsPage",e.ShowWelcomePage="gitlens.showWelcomePage",e.StashApply="gitlens.stashApply",e.StashDelete="gitlens.stashDelete",e.StashSave="gitlens.stashSave",e.StashSaveFiles="gitlens.stashSaveFiles",e.SupportGitLens="gitlens.supportGitLens",e.SwitchMode="gitlens.switchMode",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e.ToggleFileRecentChanges="gitlens.toggleFileRecentChanges",e.ToggleLineBlame="gitlens.toggleLineBlame",e.ToggleReviewMode="gitlens.toggleReviewMode",e.ToggleZenMode="gitlens.toggleZenMode",e.ViewsOpenDirectoryDiff="gitlens.views.openDirectoryDiff",e.ViewsOpenDirectoryDiffWithWorking="gitlens.views.openDirectoryDiffWithWorking"}(Mi||(Mi={}));const Qi=[];function Wi(){return e=>{Qi.push(e)}}function Hi(e,t){if(e instanceof r.Uri)return e;if(null==t)return;const i=t.document;return null!=i?i.uri:void 0}async function Vi(e,t,i,o){let s=await container_Container.git.getRepoPathOrActive(e,t);if(!s){const e=await repositoriesQuickPick_RepositoriesQuickPick.show(i,o);if(e instanceof commonQuickPicks_CommandQuickPickItem)return void await e.execute();if(void 0===e)return void(void 0!==o&&await o.execute());s=e.repoPath}return s}async function ji(e,t,i){let o=await container_Container.git.getRepoPath(e);if(!o){const e=await repositoriesQuickPick_RepositoriesQuickPick.show(t,i);if(e instanceof commonQuickPicks_CommandQuickPickItem)return void await e.execute();if(void 0===e)return void(void 0!==i&&await i.execute());o=e.repoPath}return o}function zi(e){return"viewItem"===e.type&&e.node.branch instanceof branch_GitBranch}function qi(e){return"viewItem"===e.type&&e.node.commit instanceof commit_GitCommit}function Yi(e){return"viewItem"===e.type&&e.node.remote instanceof GitRemote}function Ki(e){return"viewItem"===e.type&&e.node.repo instanceof repository_Repository}function Xi(e){return null!=e&&(void 0!==e.id&&(void 0!==e.handle||void 0!==e.label||void 0!==e.resourceStates))}function Zi(e){return null!=e&&null!=e.resourceUri}class common_Command{constructor(e){if(this.contextParsingOptions={editor:!1,uri:!1},"string"==typeof e)return void(this._disposable=r.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));const t=e.map(e=>r.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));this._disposable=r.Disposable.from(...t)}static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t))}`}dispose(){this._disposable&&this._disposable.dispose()}async preExecute(e,...t){return this.execute(...t)}_execute(e,...t){const[i,o]=common_Command.parseContext(e,Object.assign({},this.contextParsingOptions),...t);return this.preExecute(i,...o)}static parseContext(e,t,...i){let o=void 0,s=i[0];if(t.editor&&(null==s||function(e){return null!=e&&void 0!==e.id&&(void 0!==e.edit||void 0!==e.document)}(s))&&(o=s,s=(i=i.slice(1))[0]),t.uri&&(null==s||s instanceof r.Uri)){const[t,...s]=i;if(void 0!==t)return[{command:e,type:"uri",editor:o,uri:t},s];i=i.slice(1)}if(s instanceof Ni){const[t,...o]=i;return[{command:e,type:"viewItem",node:t,uri:t.uri},o]}if(Zi(s)){const t=[];let o=0;for(const e of i){if(!Zi(e))break;o++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(o)]}if(Xi(s)){const t=[];let o=0;for(const e of i){if(!Xi(e))break;o++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(o)]}return[{command:e,type:"unknown",editor:o},i]}}class common_ActiveEditorCommand extends common_Command{constructor(e){super(e),this.contextParsingOptions={editor:!0,uri:!0}}async preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,r.window.activeTextEditor,...t)}}let Ji=void 0;class ActiveEditorCachedCommand extends common_ActiveEditorCommand{constructor(e){super(e)}_execute(e,...t){return Ji={command:e,args:t},super._execute(e,...t)}}async function eo(e,t={}){const{rethrow:i}=t,s=o(t,["rethrow"]);try{if(e instanceof gitUri_GitUri&&(e=e.documentUri()),e.scheme===$.GitLens&&L[G.extname(e.fsPath)])return void await r.commands.executeCommand(x.Open,e);const t=await r.workspace.openTextDocument(e);return r.window.showTextDocument(t,Object.assign({preserveFocus:!1,preview:!0,viewColumn:r.ViewColumn.Active},s))}catch(t){if(t.toString().includes("File seems to be binary and cannot be opened as text"))return void await r.commands.executeCommand(x.Open,e);if(i)throw t;return void logger_Logger.error(t,"openEditor")}}class searchResultsCommitsNode_SearchResultsCommitsNode extends resultsCommitsNode_ResultsCommitsNode{constructor(e,t,i,o,s,r){super(e,t,i,r),this.search=o,this.searchBy=s}get type(){return Di.SearchResults}async getTreeItem(){const{log:e}=await super.getCommitsQueryResults(),t=await super.getTreeItem();if(null==e||0===e.count){const e={search:this.search,searchBy:this.searchBy,prefillOnly:!0};t.command={title:"Search Commits",command:Mi.SearchCommitsInView,arguments:[e]}}return t}}class compareView_CompareView extends viewBase_ViewBase{constructor(){super("gitlens.views.compare"),N(F.ViewsCompareKeepResults,this.keepResults)}getRoot(){return new compareNode_CompareNode(this)}get location(){return this.config.location}registerCommands(){container_Container.viewCommands,r.commands.registerCommand(this.getQualifiedCommand("clear"),()=>this.clear(),this),r.commands.registerCommand(this.getQualifiedCommand("refresh"),()=>this.refresh(),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout(C.Auto),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout(C.List),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout(C.Tree),this),r.commands.registerCommand(this.getQualifiedCommand("setKeepResultsToOn"),()=>this.setKeepResults(!0),this),r.commands.registerCommand(this.getQualifiedCommand("setKeepResultsToOff"),()=>this.setKeepResults(!1),this),r.commands.registerCommand(this.getQualifiedCommand("swapComparision"),this.swapComparision,this),r.commands.registerCommand(this.getQualifiedCommand("selectForCompare"),this.selectForCompare,this),r.commands.registerCommand(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this)}onConfigurationChanged(e){(io.changed(e,io.name("views")("compare").value)||io.changed(e,io.name("views").value)||io.changed(e,io.name("defaultGravatarsStyle").value))&&(io.changed(e,io.name("views")("compare")("location").value)&&this.initialize(this.config.location,{showCollapseAll:!0}),io.initializing(e)||void 0===this._root||this.refresh(Ai.ConfigurationChanged))}get config(){return Object.assign({},container_Container.config.views,container_Container.config.views.compare)}get keepResults(){return container_Container.context.workspaceState.get(B.ViewsCompareKeepResults,!1)}clear(){void 0!==this._root&&this._root.clear()}dismissNode(e){void 0!==this._root&&this._root.dismiss(e)}compare(e,t,i){return this.addResults(new compareResultsNode_CompareResultsNode(this,e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i))}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t){this.ensureRoot().selectForCompare(e,t)}async addResults(e){this.visible||await this.show(),this.ensureRoot().addOrReplace(e,!this.keepResults),setImmediate(()=>this.reveal(e,{select:!0,expand:!0}))}setFilesLayout(e){return io.updateEffective(io.name("views")("compare")("files")("layout").value,e)}setKeepResults(e){container_Container.context.workspaceState.update(B.ViewsCompareKeepResults,e),N(F.ViewsCompareKeepResults,e)}swapComparision(e){e instanceof compareResultsNode_CompareResultsNode&&e.swap()}}class fileHistoryView_FileHistoryView extends viewBase_ViewBase{constructor(){super("gitlens.views.fileHistory")}getRoot(){return new fileHistoryTrackerNode_FileHistoryTrackerNode(this)}get location(){return this.config.location}registerCommands(){container_Container.viewCommands,r.commands.registerCommand(this.getQualifiedCommand("refresh"),()=>this.refresh(),this),r.commands.registerCommand(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),r.commands.registerCommand(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),r.commands.registerCommand(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),r.commands.registerCommand(this.getQualifiedCommand("setRenameFollowingOn"),()=>this.setRenameFollowing(!0),this),r.commands.registerCommand(this.getQualifiedCommand("setRenameFollowingOff"),()=>this.setRenameFollowing(!1),this)}onConfigurationChanged(e){(io.changed(e,io.name("views")("fileHistory").value)||io.changed(e,io.name("views").value)||io.changed(e,io.name("defaultGravatarsStyle").value)||io.changed(e,io.name("advanced")("fileHistoryFollowsRenames").value))&&(io.changed(e,io.name("views")("fileHistory")("enabled").value)&&N(F.ViewsFileHistoryEditorFollowing,!0),io.changed(e,io.name("views")("fileHistory")("location").value)&&this.initialize(this.config.location),io.initializing(e)||void 0===this._root||this.refresh(Ai.ConfigurationChanged))}get config(){return Object.assign({},container_Container.config.views,container_Container.config.views.fileHistory)}async showHistoryForUri(e,t){const i=this.ensureRoot();return this.setEditorFollowing(!1),await i.showHistoryForUri(e,t),this.show()}changeBase(){void 0!==this._root&&this._root.changeBase()}setEditorFollowing(e){N(F.ViewsFileHistoryEditorFollowing,e),void 0!==this._root&&this._root.setEditorFollowing(e)}setRenameFollowing(e){return io.updateEffective(io.name("advanced")("fileHistoryFollowsRenames").value,e)}}class lineHistoryView_LineHistoryView extends viewBase_ViewBase{constructor(){super("gitlens.views.lineHistory")}getRoot(){return new lineHistoryTrackerNode_LineHistoryTrackerNode(this)}get location(){return this.config.location}registerCommands(){container_Container.viewCommands,r.commands.registerCommand(this.getQualifiedCommand("refresh"),()=>this.refresh(),this),r.commands.registerCommand(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),r.commands.registerCommand(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),r.commands.registerCommand(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),r.commands.registerCommand(this.getQualifiedCommand("setRenameFollowingOn"),()=>this.setRenameFollowing(!0),this),r.commands.registerCommand(this.getQualifiedCommand("setRenameFollowingOff"),()=>this.setRenameFollowing(!1),this)}onConfigurationChanged(e){(io.changed(e,io.name("views")("lineHistory").value)||io.changed(e,io.name("views").value)||io.changed(e,io.name("defaultGravatarsStyle").value)||io.changed(e,io.name("advanced")("fileHistoryFollowsRenames").value))&&(io.changed(e,io.name("views")("lineHistory")("enabled").value)&&N(F.ViewsLineHistoryEditorFollowing,!0),io.changed(e,io.name("views")("lineHistory")("location").value)&&this.initialize(this.config.location),io.initializing(e)||void 0===this._root||this.refresh(Ai.ConfigurationChanged))}get config(){return Object.assign({},container_Container.config.views,container_Container.config.views.lineHistory)}changeBase(){void 0!==this._root&&this._root.changeBase()}setEditorFollowing(e){N(F.ViewsLineHistoryEditorFollowing,e),void 0!==this._root&&this._root.setEditorFollowing(e)}setRenameFollowing(e){return io.updateEffective(io.name("advanced")("fileHistoryFollowsRenames").value,e)}}class repositoriesView_RepositoriesView extends viewBase_ViewBase{constructor(){super("gitlens.views.repositories"),this._onDidChangeAutoRefresh=new r.EventEmitter}get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}getRoot(){return new repositoriesNode_RepositoriesNode(this)}get location(){return this.config.location}registerCommands(){container_Container.viewCommands,r.commands.registerCommand(this.getQualifiedCommand("refresh"),()=>this.refresh(),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout(C.Auto),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout(C.List),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout(C.Tree),this),r.commands.registerCommand(this.getQualifiedCommand("setAutoRefreshToOn"),()=>this.setAutoRefresh(container_Container.config.views.repositories.autoRefresh,!0),this),r.commands.registerCommand(this.getQualifiedCommand("setAutoRefreshToOff"),()=>this.setAutoRefresh(container_Container.config.views.repositories.autoRefresh,!1),this)}onConfigurationChanged(e){(io.changed(e,io.name("views")("repositories").value)||io.changed(e,io.name("views").value)||io.changed(e,io.name("defaultGravatarsStyle").value))&&(io.changed(e,io.name("views")("repositories")("autoRefresh").value)&&this.setAutoRefresh(container_Container.config.views.repositories.autoRefresh),io.changed(e,io.name("views")("repositories")("location").value)&&this.initialize(this.config.location),io.initializing(e)||void 0===this._root||this.refresh(Ai.ConfigurationChanged))}get autoRefresh(){return this.config.autoRefresh&&container_Container.context.workspaceState.get(B.ViewsRepositoriesAutoRefresh,!0)}get config(){return Object.assign({},container_Container.config.views,container_Container.config.views.repositories)}async setAutoRefresh(e,t){e&&(void 0===t?t=container_Container.context.workspaceState.get(B.ViewsRepositoriesAutoRefresh,!0):await container_Container.context.workspaceState.update(B.ViewsRepositoriesAutoRefresh,t)),N(F.ViewsRepositoriesAutoRefresh,e&&t),this._onDidChangeAutoRefresh.fire()}setFilesLayout(e){return io.updateEffective(io.name("views")("repositories")("files")("layout").value,e)}}class searchView_SearchView extends viewBase_ViewBase{constructor(){super("gitlens.views.search"),N(F.ViewsSearchKeepResults,this.keepResults)}getRoot(){return new searchNode_SearchNode(this)}get location(){return this.config.location}registerCommands(){container_Container.viewCommands,r.commands.registerCommand(this.getQualifiedCommand("clear"),()=>this.clear(),this),r.commands.registerCommand(this.getQualifiedCommand("refresh"),()=>this.refresh(),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout(C.Auto),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout(C.List),this),r.commands.registerCommand(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout(C.Tree),this),r.commands.registerCommand(this.getQualifiedCommand("setKeepResultsToOn"),()=>this.setKeepResults(!0),this),r.commands.registerCommand(this.getQualifiedCommand("setKeepResultsToOff"),()=>this.setKeepResults(!1),this)}onConfigurationChanged(e){(io.changed(e,io.name("views")("search").value)||io.changed(e,io.name("views").value)||io.changed(e,io.name("defaultGravatarsStyle").value))&&(io.changed(e,io.name("views")("search")("location").value)&&this.initialize(this.config.location,{showCollapseAll:!0}),io.initializing(e)||void 0===this._root||this.refresh(Ai.ConfigurationChanged))}get config(){return Object.assign({},container_Container.config.views,container_Container.config.views.search)}get keepResults(){return container_Container.context.workspaceState.get(B.ViewsSearchKeepResults,!1)}clear(){void 0!==this._root&&this._root.clear()}dismissNode(e){void 0!==this._root&&this._root.dismiss(e)}async search(e,t,i,o){await this.show();const s=this.getSearchQueryFn(container_Container.git.getLogForSearch(e,t,i,{maxCount:o.maxCount}),o);return this.addResults(new searchResultsCommitsNode_SearchResultsCommitsNode(this,this._root,e,t,i,s))}showSearchResults(e,t,i,o,s){const r=this.getSearchLabel(s.label,o),n=xe.cachedOnce(this.getSearchQueryFn(o,s),{label:r,log:o});return this.addResults(new searchResultsCommitsNode_SearchResultsCommitsNode(this,this._root,e,t,i,n))}addResults(e){this.ensureRoot().addOrReplace(e,!this.keepResults),setImmediate(()=>this.reveal(e,{select:!0,expand:!0}))}getSearchLabel(e,t){if("string"==typeof e)return e;const i=void 0!==t?t.count:0,o=void 0!==t&&t.truncated,s=void 0===e.resultsType?{singular:"result",plural:"results"}:e.resultsType;return`${De.pluralize(s.singular,i,{number:o?`${i}+`:void 0,plural:s.plural,zero:"No"})} for ${e.label}`}getSearchQueryFn(e,t){return async i=>{let o;return xe.isPromise(e)&&(e=await e),void 0!==e&&(o=await(void 0===e.query?t=>Promise.resolve(e):e.query)(i)),{label:this.getSearchLabel(t.label,o),log:o}}}setFilesLayout(e){return io.updateEffective(io.name("views")("search")("files")("layout").value,e)}setKeepResults(e){container_Container.context.workspaceState.update(B.ViewsSearchKeepResults,e),N(F.ViewsSearchKeepResults,e)}}class viewCommands_ViewCommands{constructor(){r.commands.registerCommand("gitlens.views.refreshNode",(e,t)=>e.view.refreshNode(e,t),this),r.commands.registerCommand("gitlens.views.expandNode",e=>e.view.reveal(e,{select:!1,focus:!1,expand:3}),this),r.commands.registerCommand("gitlens.views.dismissNode",e=>(function(e){return"function"==typeof e.dismissNode})(e.view)&&e.view.dismissNode(e),this),r.commands.registerCommand("gitlens.views.fetch",this.fetch,this),r.commands.registerCommand("gitlens.views.pull",this.pull,this),r.commands.registerCommand("gitlens.views.push",this.push,this),r.commands.registerCommand("gitlens.views.pushWithForce",e=>this.push(e,!0),this),r.commands.registerCommand("gitlens.views.closeRepository",this.closeRepository,this),r.commands.registerCommand("gitlens.views.exploreRepoRevision",this.exploreRepoRevision,this),r.commands.registerCommand("gitlens.views.openChanges",this.openChanges,this),r.commands.registerCommand("gitlens.views.openChangesWithWorking",this.openChangesWithWorking,this),r.commands.registerCommand("gitlens.views.openFile",this.openFile,this),r.commands.registerCommand("gitlens.views.openFileRevision",this.openFileRevision,this),r.commands.registerCommand("gitlens.views.openFileRevisionInRemote",this.openFileRevisionInRemote,this),r.commands.registerCommand("gitlens.views.openChangedFiles",this.openChangedFiles,this),r.commands.registerCommand("gitlens.views.openChangedFileChanges",this.openChangedFileChanges,this),r.commands.registerCommand("gitlens.views.openChangedFileChangesWithWorking",this.openChangedFileChangesWithWorking,this),r.commands.registerCommand("gitlens.views.openChangedFileRevisions",this.openChangedFileRevisions,this),r.commands.registerCommand("gitlens.views.applyChanges",this.applyChanges,this),r.commands.registerCommand("gitlens.views.checkout",this.checkout,this),r.commands.registerCommand("gitlens.views.stageFile",this.stageFile,this),r.commands.registerCommand("gitlens.views.unstageFile",this.unstageFile,this),r.commands.registerCommand("gitlens.views.compareAncestryWithWorking",this.compareAncestryWithWorking,this),r.commands.registerCommand("gitlens.views.compareWithHead",this.compareWithHead,this),r.commands.registerCommand("gitlens.views.compareWithRemote",this.compareWithRemote,this),r.commands.registerCommand("gitlens.views.compareWithSelected",this.compareWithSelected,this),r.commands.registerCommand("gitlens.views.selectForCompare",this.selectForCompare,this),r.commands.registerCommand("gitlens.views.compareFileWithSelected",this.compareFileWithSelected,this),r.commands.registerCommand("gitlens.views.selectFileForCompare",this.selectFileForCompare,this),r.commands.registerCommand("gitlens.views.compareWithWorking",this.compareWithWorking,this),r.commands.registerCommand("gitlens.views.terminalCheckoutBranch",this.terminalCheckoutBranch,this),r.commands.registerCommand("gitlens.views.terminalCreateBranch",this.terminalCreateBranch,this),r.commands.registerCommand("gitlens.views.terminalDeleteBranch",this.terminalDeleteBranch,this),r.commands.registerCommand("gitlens.views.terminalMergeBranch",this.terminalMergeBranch,this),r.commands.registerCommand("gitlens.views.terminalRebaseBranch",this.terminalRebaseBranch,this),r.commands.registerCommand("gitlens.views.terminalRebaseBranchToRemote",this.terminalRebaseBranchToRemote,this),r.commands.registerCommand("gitlens.views.terminalSquashBranchIntoCommit",this.terminalSquashBranchIntoCommit,this),r.commands.registerCommand("gitlens.views.terminalCheckoutCommit",this.terminalCheckoutCommit,this),r.commands.registerCommand("gitlens.views.terminalCherryPickCommit",this.terminalCherryPickCommit,this),r.commands.registerCommand("gitlens.views.terminalPushCommit",this.terminalPushCommit,this),r.commands.registerCommand("gitlens.views.terminalRebaseCommit",this.terminalRebaseCommit,this),r.commands.registerCommand("gitlens.views.terminalResetCommit",this.terminalResetCommit,this),r.commands.registerCommand("gitlens.views.terminalRevertCommit",this.terminalRevertCommit,this),r.commands.registerCommand("gitlens.views.terminalRemoveRemote",this.terminalRemoveRemote,this),r.commands.registerCommand("gitlens.views.terminalCreateTag",this.terminalCreateTag,this),r.commands.registerCommand("gitlens.views.terminalDeleteTag",this.terminalDeleteTag,this)}dispose(){this._disposable&&this._disposable.dispose()}fetch(e){return e instanceof remoteNode_RemoteNode?e.fetch():e instanceof repositoryNode_RepositoryNode?e.fetch():void 0}pull(e){if(e instanceof branchTrackingStatusNode_BranchTrackingStatusNode&&(e=e.getParent()),e instanceof repositoryNode_RepositoryNode)return e.pull()}push(e,t){if(e instanceof branchTrackingStatusNode_BranchTrackingStatusNode&&(e=e.getParent()),e instanceof repositoryNode_RepositoryNode)return e.push({force:t})}async applyChanges(e){(e instanceof commitFileNode_CommitFileNode||e instanceof stashFileNode_StashFileNode||e instanceof resultsFileNode_ResultsFileNode)&&(await this.openFile(e),e instanceof resultsFileNode_ResultsFileNode?await container_Container.git.applyChangesToWorkingFile(e.uri,e.ref1,e.ref2):void 0!==e.uri.sha&&"HEAD"!==e.uri.sha&&await container_Container.git.applyChangesToWorkingFile(e.uri))}async checkout(e){if(e instanceof ViewRefNode)return container_Container.git.checkout(e.repoPath,e.ref)}closeRepository(e){e instanceof repositoryNode_RepositoryNode&&(e.repo.closed=!0)}compareWithHead(e){if(e instanceof ViewRefNode)return container_Container.compareView.compare(e.repoPath,e.ref,"HEAD")}compareWithRemote(e){if(e instanceof branchNode_BranchNode&&e.branch.tracking)return container_Container.compareView.compare(e.repoPath,e.branch.tracking,e.ref)}compareWithWorking(e){if(e instanceof ViewRefNode)return container_Container.compareView.compare(e.repoPath,e.ref,"")}async compareAncestryWithWorking(e){if(!(e instanceof branchNode_BranchNode))return;const t=await container_Container.git.getBranch(e.repoPath);if(void 0===t)return;const i=await container_Container.git.getMergeBase(e.repoPath,t.ref,e.ref);return void 0!==i?container_Container.compareView.compare(e.repoPath,{ref:i,label:`ancestry with ${e.ref} (${gitService_GitService.shortenSha(i)})`},""):void 0}compareWithSelected(e){e instanceof ViewRefNode&&container_Container.compareView.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){e instanceof ViewRefNode&&container_Container.compareView.selectForCompare(e.repoPath,e.ref)}compareFileWithSelected(e){if(!(void 0!==this._selectedFile&&(e instanceof commitFileNode_CommitFileNode||e instanceof resultsFileNode_ResultsFileNode)&&void 0!==e.ref))return;if(this._selectedFile.repoPath!==e.repoPath)return void this.selectFileForCompare(e);const t=this._selectedFile;this._selectedFile=void 0,N(F.ViewsCanCompareFile,!1);const i={repoPath:t.repoPath,lhs:{sha:t.ref,uri:t.uri},rhs:{sha:e.ref,uri:e.uri}};return r.commands.executeCommand(Mi.DiffWith,i)}selectFileForCompare(e){(e instanceof commitFileNode_CommitFileNode||e instanceof resultsFileNode_ResultsFileNode)&&void 0!==e.ref&&(this._selectedFile={ref:e.ref,repoPath:e.repoPath,uri:e.uri},N(F.ViewsCanCompareFile,!0))}exploreRepoRevision(e,t={}){if(!(e instanceof ViewRefNode))return;const i=(o=e.ref,s=e.repoPath,gitUri_GitUri.toRevisionUri(o,s,s));var o,s;const n=gitUri_GitUri.fromRevisionUri(i);!function(e,t,i={}){i.openInNewWindow?r.commands.executeCommand(x.OpenFolder,e,!0):r.workspace.updateWorkspaceFolders(void 0!==r.workspace.workspaceFolders?r.workspace.workspaceFolders.length:0,null,{uri:e,name:t})}(i,`${G.basename(n.repoPath)} @ ${n.shortSha}`,t),r.commands.executeCommand(x.FocusFilesExplorer)}openChanges(e){if(!(e instanceof commitFileNode_CommitFileNode||e instanceof resultsFileNode_ResultsFileNode))return;const t=e.getCommand();if(void 0===t||void 0===t.arguments)return;const[i,o]=t.arguments;return o.showOptions.preview=!1,r.commands.executeCommand(t.command,i,o)}async openChangesWithWorking(e){if(!(e instanceof commitFileNode_CommitFileNode||e instanceof resultsFileNode_ResultsFileNode))return;const t={showOptions:{preserveFocus:!0,preview:!1}};return e instanceof resultsFileNode_ResultsFileNode&&(t.commit=await container_Container.git.getLogCommitForFile(e.repoPath,e.uri.fsPath,{ref:e.uri.sha,firstIfNotFound:!0,reverse:!0})),r.commands.executeCommand(Mi.DiffWithWorking,e.uri,t)}openFile(e){if(e instanceof commitFileNode_CommitFileNode||e instanceof resultsFileNode_ResultsFileNode)return eo(e.uri,{preserveFocus:!0,preview:!1})}openFileRevision(e,t={showOptions:{preserveFocus:!0,preview:!1}}){if(!(e instanceof commitFileNode_CommitFileNode||e instanceof resultsFileNode_ResultsFileNode))return;let i=t.uri;return null==i&&(i=e instanceof resultsFileNode_ResultsFileNode?gitUri_GitUri.toRevisionUri(e.uri):"D"===e.commit.status?gitUri_GitUri.toRevisionUri(e.commit.previousSha,e.commit.previousUri.fsPath,e.commit.repoPath):gitUri_GitUri.toRevisionUri(e.uri)),eo(i,t.showOptions||{preserveFocus:!0,preview:!1})}async openChangedFileChanges(e,t={preserveFocus:!1,preview:!1}){if(!(e instanceof commitNode_CommitNode||e instanceof stashNode_StashNode))return;const i=e.commit.repoPath,o=e.commit.files.map(e=>gitUri_GitUri.fromFile(e,i));for(const s of o)await this.openDiffWith(i,{uri:s,sha:void 0!==e.commit.previousSha?e.commit.previousSha:gitService_GitService.deletedOrMissingSha},{uri:s,sha:e.commit.sha},t)}async openChangedFileChangesWithWorking(e,t={preserveFocus:!1,preview:!1}){if(!(e instanceof commitNode_CommitNode||e instanceof stashNode_StashNode))return;const i=e.commit.repoPath,o=E.filterMap(e.commit.files,e=>"D"!==e.status?gitUri_GitUri.fromFile(e,i):void 0);for(const s of o)await this.openDiffWith(i,{uri:s,sha:e.commit.sha},{uri:s,sha:""},t)}async openChangedFiles(e,t={preserveFocus:!1,preview:!1}){if(!(e instanceof commitNode_CommitNode||e instanceof stashNode_StashNode))return;const i=e.commit.repoPath,o=E.filterMap(e.commit.files,e=>gitUri_GitUri.fromFile(e,i));for(const e of o)await eo(e,t)}async openChangedFileRevisions(e,t={preserveFocus:!1,preview:!1}){if(!(e instanceof commitNode_CommitNode||e instanceof stashNode_StashNode))return;const i=E.filterMap(e.commit.files,t=>gitUri_GitUri.toRevisionUri("D"===t.status?e.commit.previousFileSha:e.commit.sha,t,e.commit.repoPath));for(const e of i)await eo(e,t)}async openDiffWith(e,t,i,o={preserveFocus:!1,preview:!1}){const s={repoPath:e,lhs:t,rhs:i,showOptions:o};return r.commands.executeCommand(Mi.DiffWith,s)}async openFileRevisionInRemote(e){if(e instanceof commitFileNode_CommitFileNode||e instanceof statusFileNode_StatusFileNode)return r.commands.executeCommand(Mi.OpenFileInRemote,e.commit.toGitUri("D"===e.commit.status),{range:!1})}async stageFile(e){(e instanceof commitFileNode_CommitFileNode||e instanceof statusFileNode_StatusFileNode)&&await container_Container.git.stageFile(e.repoPath,e.file.fileName)}async unstageFile(e){(e instanceof commitFileNode_CommitFileNode||e instanceof statusFileNode_StatusFileNode)&&await container_Container.git.unStageFile(e.repoPath,e.file.fileName)}async terminalCheckoutBranch(e){e instanceof branchNode_BranchNode&&this.sendTerminalCommand("checkout",`${e.ref}`,e.repoPath)}async terminalCreateBranch(e){if(!(e instanceof ViewRefNode))return;let t=!1,i=void 0;e instanceof branchNode_BranchNode&&e.branch.remote&&(t=!0,i=e.branch.getName());const o=await r.window.showInputBox({prompt:"Please provide a branch name (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Branch name",value:i});void 0!==o&&0!==o.length&&this.sendTerminalCommand("branch",`${t?"-t ":""}${o} ${e.ref}`,e.repoPath)}terminalDeleteBranch(e){e instanceof branchNode_BranchNode&&(e.branch.remote?this.sendTerminalCommand("push",`${e.branch.getRemote()} :${e.branch.getName()}`,e.repoPath):this.sendTerminalCommand("branch",`-d ${e.ref}`,e.repoPath))}terminalMergeBranch(e){e instanceof branchNode_BranchNode&&this.sendTerminalCommand("merge",`${e.ref}`,e.repoPath)}terminalRebaseBranch(e){e instanceof branchNode_BranchNode&&this.sendTerminalCommand("rebase",`-i ${e.ref}`,e.repoPath)}terminalRebaseBranchToRemote(e){if(e instanceof branchNode_BranchNode){if(!e.branch.current||!e.branch.tracking)return;this.sendTerminalCommand("rebase",`-i ${e.branch.tracking}`,e.repoPath)}else e instanceof branchTrackingStatusNode_BranchTrackingStatusNode&&this.sendTerminalCommand("rebase",`-i ${e.status.upstream}`,e.status.repoPath)}terminalSquashBranchIntoCommit(e){e instanceof branchNode_BranchNode&&this.sendTerminalCommand("merge",`--squash ${e.ref}`,e.repoPath)}terminalCheckoutCommit(e){e instanceof commitNode_CommitNode&&this.sendTerminalCommand("checkout",`${e.ref}`,e.repoPath)}terminalCherryPickCommit(e){e instanceof commitNode_CommitNode&&this.sendTerminalCommand("cherry-pick",`-e ${e.ref}`,e.repoPath)}async terminalPushCommit(e){if(!(e instanceof commitNode_CommitNode))return;const t=e.branch||await container_Container.git.getBranch(e.repoPath);void 0!==t&&this.sendTerminalCommand("push",`${t.getRemote()} ${e.ref}:${t.getName()}`,e.repoPath)}terminalRebaseCommit(e){e instanceof commitNode_CommitNode&&this.sendTerminalCommand("rebase",`-i ${e.ref}^`,e.repoPath)}terminalResetCommit(e){e instanceof commitNode_CommitNode&&this.sendTerminalCommand("reset",`--soft ${e.ref}`,e.repoPath)}terminalRevertCommit(e){e instanceof commitNode_CommitNode&&this.sendTerminalCommand("revert",`-e ${e.ref}`,e.repoPath)}terminalRemoveRemote(e){e instanceof remoteNode_RemoteNode&&this.sendTerminalCommand("remote",`remove ${e.remote.name}`,e.remote.repoPath)}async terminalCreateTag(e){if(!(e instanceof ViewRefNode))return;const t=await r.window.showInputBox({prompt:"Please provide a tag name (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Tag name"});if(void 0===t||0===t.length)return;const i=await r.window.showInputBox({prompt:"Please provide an optional message to annotate the tag (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Tag message"});if(void 0===i)return;const o=`${0!==i.length?`-a -m "${i}" `:""}${t} ${e.ref}`;this.sendTerminalCommand("tag",o,e.repoPath)}terminalDeleteTag(e){e instanceof tagNode_TagNode&&this.sendTerminalCommand("tag",`-d ${e.ref}`,e.repoPath)}ensureTerminal(e){return void 0===this._terminal&&(this._terminal=r.window.createTerminal(P),this._disposable=r.window.onDidCloseTerminal(e=>{e.name===P&&(this._terminal=void 0,this._disposable.dispose(),this._disposable=void 0)},this),container_Container.context.subscriptions.push(this._disposable),this._terminalCwd=void 0),this._terminalCwd!==e&&(this._terminal.sendText(`cd "${e}"`,!0),this._terminalCwd=e),this._terminal}sendTerminalCommand(e,t,i){const o=this.ensureTerminal(i);o.show(!1),o.sendText(`git ${e} ${t}`,!1)}}class webviewEditor_WebviewEditor{constructor(){this._disposable=r.Disposable.from(io.onDidChange(this.onConfigurationChanged,this),...this.registerCommands())}dispose(){this._disposable&&this._disposable.dispose(),this._disposablePanel&&this._disposablePanel.dispose()}onConfigurationChanged(e){this.postUpdatedConfiguration()}onPanelDisposed(){this._disposablePanel&&this._disposablePanel.dispose(),this._panel=void 0}onViewStateChanged(e){logger_Logger.log("WebviewEditor.onViewStateChanged",`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`),e.webviewPanel.active&&this.postUpdatedConfiguration()}async onMessageReceived(e){if(null!=e)switch(logger_Logger.log(`WebviewEditor.onMessageReceived: type=${e.type}, data=${JSON.stringify(e)}`),e.type){case"saveSettings":const t="workspace"===e.scope?r.ConfigurationTarget.Workspace:r.ConfigurationTarget.Global;for(const i in e.changes){const o=await io.inspect(i),s=e.changes[i];await io.update(i,s===o.defaultValue?void 0:s,t)}for(const i of e.removes)await io.update(i,void 0,t)}}get visible(){return void 0!==this._panel&&this._panel.visible}hide(){void 0!==this._panel&&this._panel.dispose()}async show(){const e=await this.getHtml();void 0===this._panel?(this._panel=r.window.createWebviewPanel(this.id,this.title,{viewColumn:r.ViewColumn.Active,preserveFocus:!1},{retainContextWhenHidden:!0,enableFindWidget:!0,enableCommandUris:!0,enableScripts:!0}),this._panel.iconPath=r.Uri.file(container_Container.context.asAbsolutePath("images/gitlens-icon.png")),this._disposablePanel=r.Disposable.from(this._panel,this._panel.onDidDispose(this.onPanelDisposed,this),this._panel.onDidChangeViewState(this.onViewStateChanged,this),this._panel.webview.onDidReceiveMessage(this.onMessageReceived,this)),this._panel.webview.html=e):(this._panel.webview.html="",this._panel.webview.html=e,this._panel.reveal(r.ViewColumn.Active,!1))}async getHtml(){let e;if(logger_Logger.isDebugging)e=await new Promise((e,t)=>{We.readFile(container_Container.context.asAbsolutePath(this.filename),"utf8",(i,o)=>{i?t(i):e(o)})});else{if(void 0!==this._html)return this._html;e=(await r.workspace.openTextDocument(container_Container.context.asAbsolutePath(this.filename))).getText()}return this._html=e.replace(/{{root}}/g,r.Uri.file(container_Container.context.asAbsolutePath(".")).with({scheme:"vscode-resource"}).toString()),this._html.includes("'{{bootstrap}}'")&&(this._html=this._html.replace("'{{bootstrap}}'",JSON.stringify(this.getBootstrap()))),this._html}postMessage(e){return void 0!==this._panel&&this._panel.webview.postMessage(e)}postUpdatedConfiguration(){return this.postMessage({type:"settingsChanged",config:io.get()})}}class settingsEditor_SettingsEditor extends webviewEditor_WebviewEditor{constructor(){super()}get filename(){return"settings.html"}get id(){return"gitlens.settings"}get title(){return"GitLens Settings"}getBootstrap(){return{config:io.get(),scope:"user",scopes:this.getAvailableScopes()}}registerCommands(){return[r.commands.registerCommand(Mi.ShowSettingsPage,this.show,this)]}getAvailableScopes(){const e=[["user","User"]];return void 0!==r.workspace.workspaceFolders&&r.workspace.workspaceFolders.length&&e.push(["workspace","Workspace"]),e}}class welcomeEditor_WelcomeEditor extends webviewEditor_WebviewEditor{constructor(){super()}get filename(){return"welcome.html"}get id(){return"gitlens.welcome"}get title(){return"Welcome to GitLens"}getBootstrap(){return{config:container_Container.config}}registerCommands(){return[r.commands.registerCommand(Mi.ShowWelcomePage,this.show,this)]}}class container_Container{static initialize(e,t){if(this._context=e,this._config=container_Container.applyMode(t),e.subscriptions.push(this._lineTracker=new gitLineTracker_GitLineTracker),e.subscriptions.push(this._tracker=new gitDocumentTracker_GitDocumentTracker),e.subscriptions.push(this._vsls=new vsls_VslsController),e.subscriptions.push(this._git=new gitService_GitService),this._tracker.initialize(),e.subscriptions.push(this._fileAnnotationController=new fileAnnotationController_FileAnnotationController),e.subscriptions.push(this._lineAnnotationController=new lineAnnotationController_LineAnnotationController),e.subscriptions.push(this._lineHoverController=new lineHoverController_LineHoverController),e.subscriptions.push(this._statusBarController=new statusBarController_StatusBarController),e.subscriptions.push(this._codeLensController=new codeLensController_GitCodeLensController),e.subscriptions.push(this._keyboard=new keyboard_Keyboard),e.subscriptions.push(this._settingsEditor=new settingsEditor_SettingsEditor),e.subscriptions.push(this._welcomeEditor=new welcomeEditor_WelcomeEditor),t.views.compare.enabled)e.subscriptions.push(this._compareView=new compareView_CompareView);else{let t;t=io.onDidChange(i=>{io.changed(i,io.name("views")("compare")("enabled").value)&&(t.dispose(),e.subscriptions.push(this._compareView=new compareView_CompareView))})}if(t.views.fileHistory.enabled)e.subscriptions.push(this._fileHistoryView=new fileHistoryView_FileHistoryView);else{let t;t=io.onDidChange(i=>{io.changed(i,io.name("views")("fileHistory")("enabled").value)&&(t.dispose(),e.subscriptions.push(this._fileHistoryView=new fileHistoryView_FileHistoryView))})}if(t.views.lineHistory.enabled)e.subscriptions.push(this._lineHistoryView=new lineHistoryView_LineHistoryView);else{let t;t=io.onDidChange(i=>{io.changed(i,io.name("views")("lineHistory")("enabled").value)&&(t.dispose(),e.subscriptions.push(this._lineHistoryView=new lineHistoryView_LineHistoryView))})}if(t.views.repositories.enabled)e.subscriptions.push(this._repositoriesView=new repositoriesView_RepositoriesView);else{let t;t=io.onDidChange(i=>{io.changed(i,io.name("views")("repositories")("enabled").value)&&(t.dispose(),e.subscriptions.push(this._repositoriesView=new repositoriesView_RepositoriesView))})}if(t.views.search.enabled)e.subscriptions.push(this._searchView=new searchView_SearchView);else{let t;t=io.onDidChange(i=>{io.changed(i,io.name("views")("search")("enabled").value)&&(t.dispose(),e.subscriptions.push(this._searchView=new searchView_SearchView))})}e.subscriptions.push(new fsProvider_GitFileSystemProvider)}static get codeLens(){return this._codeLensController}static get compareView(){return void 0===this._compareView&&this._context.subscriptions.push(this._compareView=new compareView_CompareView),this._compareView}static get config(){return void 0===this._config&&(this._config=container_Container.applyMode(io.get())),this._config}static get context(){return this._context}static get fileAnnotations(){return this._fileAnnotationController}static get fileHistoryView(){return void 0===this._fileHistoryView&&this._context.subscriptions.push(this._fileHistoryView=new fileHistoryView_FileHistoryView),this._fileHistoryView}static get git(){return this._git}static get keyboard(){return this._keyboard}static get lineAnnotations(){return this._lineAnnotationController}static get lineHistoryView(){return void 0===this._lineHistoryView&&this._context.subscriptions.push(this._lineHistoryView=new lineHistoryView_LineHistoryView),this._lineHistoryView}static get lineHovers(){return this._lineHoverController}static get lineTracker(){return this._lineTracker}static get repositoriesView(){return this._repositoriesView}static get searchView(){return void 0===this._searchView&&this._context.subscriptions.push(this._searchView=new searchView_SearchView),this._searchView}static get settingsEditor(){return this._settingsEditor}static get statusBar(){return this._statusBarController}static get tracker(){return this._tracker}static get viewCommands(){return void 0===this._viewCommands&&this._context.subscriptions.push(this._viewCommands=new viewCommands_ViewCommands),this._viewCommands}static get vsls(){return this._vsls}static get welcomeEditor(){return this._welcomeEditor}static resetConfig(){this._config=void 0}static applyMode(e){if(!e.mode.active)return e;const t=e.modes[e.mode.active];return null==t?e:(null!=t.codeLens&&(e.codeLens.enabled=t.codeLens),null!=t.currentLine&&(e.currentLine.enabled=t.currentLine),null!=t.hovers&&(e.hovers.enabled=t.hovers),null!=t.statusBar&&(e.statusBar.enabled=t.statusBar),null!=t.views&&(e.views.compare.enabled=t.views),null!=t.views&&(e.views.fileHistory.enabled=t.views),null!=t.views&&(e.views.lineHistory.enabled=t.views),null!=t.views&&(e.views.repositories.enabled=t.views),null!=t.views&&(e.views.search.enabled=t.views),e)}}const to=new Proxy({},{get:(e,t,i)=>to});class configuration_Configuration{constructor(){this._onDidChange=new r.EventEmitter,this.initializingChangeEvent={affectsConfiguration:(e,t)=>!0},this._configAffectedByMode=[`gitlens.${this.name("mode").value}`,`gitlens.${this.name("modes").value}`,`gitlens.${this.name("codeLens").value}`,`gitlens.${this.name("currentLine").value}`,`gitlens.${this.name("hovers").value}`,`gitlens.${this.name("statusBar").value}`,`gitlens.${this.name("views")("compare").value}`,`gitlens.${this.name("views")("fileHistory").value}`,`gitlens.${this.name("views")("lineHistory").value}`,`gitlens.${this.name("views")("repositories").value}`,`gitlens.${this.name("views")("search").value}`]}static configure(e){e.subscriptions.push(r.workspace.onDidChangeConfiguration(io.onConfigurationChanged,io))}get onDidChange(){return this._onDidChange.event}onConfigurationChanged(e){if(e.affectsConfiguration(y,null)){if(container_Container.resetConfig(),io.changed(e,io.name("defaultGravatarsStyle").value)&&rt.clear(),io.changed(e,io.name("mode").value)||io.changed(e,io.name("modes").value)){const t=e.affectsConfiguration;e=Object.assign({},e,{affectsConfiguration:(e,i)=>!!this._configAffectedByMode.some(t=>e.startsWith(t))||t(e,i)})}this._onDidChange.fire(e)}}get(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0===e?void 0:y,t).get(void 0===e?y:e):r.workspace.getConfiguration(void 0===e?void 0:y,t).get(void 0===e?y:e,i)}changed(e,t,i){return e.affectsConfiguration(`${y}.${t}`,i)}initializing(e){return e===this.initializingChangeEvent}inspect(e,t){return r.workspace.getConfiguration(void 0===e?void 0:y,t).inspect(void 0===e?y:e)}async migrate(e,t,i={}){const o=io.inspect(e);if(void 0===o)return!1;let s=!1;return void 0!==o.globalValue&&(await this.update(t,i.migrationFn?i.migrationFn(o.globalValue):o.globalValue,r.ConfigurationTarget.Global),s=!0),void 0!==o.workspaceValue&&(await this.update(t,i.migrationFn?i.migrationFn(o.workspaceValue):o.workspaceValue,r.ConfigurationTarget.Workspace),s=!0),void 0!==o.workspaceFolderValue&&(await this.update(t,i.migrationFn?i.migrationFn(o.workspaceFolderValue):o.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder),s=!0),s||void 0===i.fallbackValue||(await this.update(t,i.fallbackValue,r.ConfigurationTarget.Global),s=!0),s}async migrateIfMissing(e,t,i={}){const o=io.inspect(e);if(void 0===o)return;const s=io.inspect(t);void 0!==o.globalValue&&(void 0!==s&&void 0!==s.globalValue||await this.update(t,i.migrationFn?i.migrationFn(o.globalValue):o.globalValue,r.ConfigurationTarget.Global)),void 0!==o.workspaceValue&&(void 0!==s&&void 0!==s.workspaceValue||await this.update(t,i.migrationFn?i.migrationFn(o.workspaceValue):o.workspaceValue,r.ConfigurationTarget.Workspace)),void 0!==o.workspaceFolderValue&&(void 0!==s&&void 0!==s.workspaceFolderValue||await this.update(t,i.migrationFn?i.migrationFn(o.workspaceFolderValue):o.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder))}name(e){return xe.propOf(to,e)}update(e,t,i,o){return r.workspace.getConfiguration(y,i===r.ConfigurationTarget.Global?void 0:o).update(e,t,i)}async updateEffective(e,t,i=null){const o=await io.inspect(e,i);if(void 0!==o.workspaceFolderValue){if(t===o.workspaceFolderValue)return;return await io.update(e,t,r.ConfigurationTarget.WorkspaceFolder,i)}if(void 0!==o.workspaceValue){if(t===o.workspaceValue)return;return await io.update(e,t,r.ConfigurationTarget.Workspace)}if(o.globalValue!==t&&(void 0!==o.globalValue||t!==o.defaultValue))return await io.update(e,t===o.defaultValue?void 0:t,r.ConfigurationTarget.Global)}}const io=new configuration_Configuration;let oo=class ClearFileAnnotationsCommand extends class common_EditorCommand{constructor(e){Array.isArray(e)||(e=[e]);const t=[];for(const i of e)t.push(r.commands.registerTextEditorCommand(i,(e,t,...o)=>this.executeCore(i,e,t,...o),this));this._disposable=r.Disposable.from(...t)}dispose(){this._disposable&&this._disposable.dispose()}executeCore(e,t,i,...o){return this.execute(t,i,...o)}}{constructor(){super([Mi.ClearFileAnnotations,Mi.ComputingFileAnnotations])}async execute(e,t,i){if(null!=e&&!U(e)&&null!=i&&!c.equals(i,e.document.uri)){const t=r.window.visibleTextEditors.find(e=>c.equals(i,e.document.uri));void 0!==t&&(e=t)}try{return container_Container.fileAnnotations.clear(e)}catch(e){return logger_Logger.error(e,"ClearFileAnnotationsCommand"),messages_Messages.showGenericErrorMessage("Unable to clear file annotations")}}};oo=s([Wi()],oo);let so=class ToggleFileBlameCommand extends common_ActiveEditorCommand{constructor(){super(Mi.ToggleFileBlame)}async execute(e,t,i={}){if(null!=e&&!U(e)&&null!=t&&!c.equals(t,e.document.uri)){const i=r.window.visibleTextEditors.find(e=>c.equals(t,e.document.uri));void 0!==i&&(e=i)}try{return void 0===i.type&&(i=Object.assign({},i,{type:g.Blame})),container_Container.fileAnnotations.toggle(e,i.type,void 0!==i.sha?i.sha:e&&e.selection.active.line)}catch(e){return logger_Logger.error(e,"ToggleFileBlameCommand"),r.window.showErrorMessage(`Unable to toggle file ${i.type} annotations. See output channel for more details`)}}};so=s([Wi()],so);let ro=class ToggleFileHeatmapCommand extends common_ActiveEditorCommand{constructor(){super(Mi.ToggleFileHeatmap)}async execute(e,t){r.commands.executeCommand(Mi.ToggleFileBlame,t,{type:g.Heatmap})}};ro=s([Wi()],ro);let no=class ToggleFileRecentChangesCommand extends common_ActiveEditorCommand{constructor(){super(Mi.ToggleFileRecentChanges)}async execute(e,t){r.commands.executeCommand(Mi.ToggleFileBlame,t,{type:g.RecentChanges})}};no=s([Wi()],no);let ao=class ToggleLineBlameCommand extends common_ActiveEditorCommand{constructor(){super(Mi.ToggleLineBlame)}async execute(e,t){try{return container_Container.lineAnnotations.toggle(e)}catch(e){return logger_Logger.error(e,"ToggleLineBlameCommand"),r.window.showErrorMessage("Unable to toggle line blame annotations. See output channel for more details")}}};ao=s([Wi()],ao);let co=class CloseUnchangedFilesCommand extends common_ActiveEditorCommand{constructor(){super(Mi.CloseUnchangedFiles)}async execute(e,t,i={}){t=Hi(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=await ji(void 0,`Close all files except those changed in which repository${D.Ellipsis}`);if(!e)return;const t=await container_Container.git.getStatusForRepo(e);if(void 0===t)return r.window.showWarningMessage("Unable to close unchanged files");i.uris=t.files.map(e=>e.uri)}if(0===i.uris.length)return r.commands.executeCommand(x.CloseAllEditors);const t=r.window.onDidChangeActiveTextEditor(xe.debounce(e=>this._onEditorChangedFn&&this._onEditorChangedFn(e),50));e=r.window.activeTextEditor;let o=0,s=0;const n=[];for(;;){if(null!=e){let t=!1;for(const i of n)if(a.equals(i,e,{useId:!0,usePosition:!0})){t=!0;break}if(t)break;o++,n.push(e)}else 0!==o&&o++;if(e=await this.nextEditor(),++s>=4&&0===n.length)break}if(n.length){e=r.window.activeTextEditor;for(let t=0;t<=o;t++)e=null==e||void 0!==e.document&&(e.document.isDirty||i.uris.some(t=>c.equals(t,e.document&&e.document.uri)))?await this.nextEditor():await this.closeEditor()}return void t.dispose()}catch(e){return logger_Logger.error(e,"CloseUnchangedFilesCommand"),messages_Messages.showGenericErrorMessage("Unable to close all unchanged files")}}async closeEditor(e=500){const t=r.window.activeTextEditor;return await r.commands.executeCommand(x.CloseActiveEditor),t!==r.window.activeTextEditor?r.window.activeTextEditor:this.waitForEditorChange(e)}async nextEditor(e=500){const t=r.window.activeTextEditor;return await r.commands.executeCommand(x.NextEditor),t!==r.window.activeTextEditor?r.window.activeTextEditor:this.waitForEditorChange(e)}waitForEditorChange(e=500){return new Promise((t,i)=>{let o;this._onEditorChangedFn=(e=>{o&&(clearTimeout(o),o=void 0,t(e))}),o=setTimeout(()=>{o=void 0,t(r.window.activeTextEditor)},e)})}};co=s([Wi()],co);let lo=class CopyMessageToClipboardCommand extends common_ActiveEditorCommand{constructor(){super(Mi.CopyMessageToClipboard)}async preExecute(e,t={}){return qi(e)?((t=Object.assign({},t)).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){t=Hi(t,e);try{if(i=Object.assign({},i),null==t){const t=await container_Container.git.getActiveRepoPath(e);if(!t)return;const o=await container_Container.git.getLog(t,{maxCount:1});if(!o)return;i.message=Ee.first(o.commits.values()).message}else if(void 0===i.message){const o=await gitUri_GitUri.fromUri(t);if(void 0===i.sha){const t=e&&e.selection.active.line||0;if(t<0)return;try{const s=e&&e.document&&e.document.isDirty?await container_Container.git.getBlameForLineContents(o,t,e.document.getText()):await container_Container.git.getBlameForLine(o,t);if(!s)return;if(s.commit.isUncommitted)return;i.sha=s.commit.sha,o.repoPath||(o.repoPath=s.commit.repoPath)}catch(e){return logger_Logger.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),messages_Messages.showGenericErrorMessage("Unable to copy message")}}const s=await container_Container.git.getLogCommit(o.repoPath,i.sha);if(void 0===s)return;i.message=s.message}return void await r.env.clipboard.writeText(i.message)}catch(e){return e.message.includes("Couldn't find the required `xsel` binary")?void r.window.showErrorMessage("Unable to copy message, xsel is not installed. Please install it via your package manager, e.g. `sudo apt install xsel`"):(logger_Logger.error(e,"CopyMessageToClipboardCommand"),messages_Messages.showGenericErrorMessage("Unable to copy message"))}}};lo=s([Wi()],lo);let ho=class CopyRemoteFileUrlToClipboardCommand extends common_ActiveEditorCommand{constructor(){super(Mi.CopyRemoteFileUrlToClipboard)}async preExecute(e,t={range:!0}){return qi(e)?((t=Object.assign({},t)).range=!1,zi(e)&&(t.branch=void 0!==e.node.branch?e.node.branch.name:void 0),this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i={range:!0}){return r.commands.executeCommand(Mi.OpenFileInRemote,t,Object.assign({},i,{clipboard:!0}))}};ho=s([Wi()],ho);let mo=class CopyShaToClipboardCommand extends common_ActiveEditorCommand{constructor(){super(Mi.CopyShaToClipboard)}async preExecute(e,t={}){return qi(e)?((t=Object.assign({},t)).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){t=Hi(t,e);try{if(i=Object.assign({},i),null==t){const t=await container_Container.git.getActiveRepoPath(e);if(!t)return;const o=await container_Container.git.getLog(t,{maxCount:1});if(!o)return;i.sha=Ee.first(o.commits.values()).sha}else if(void 0===i.sha){const o=e&&e.selection.active.line||0;if(o<0)return;try{const s=await gitUri_GitUri.fromUri(t),r=e&&e.document&&e.document.isDirty?await container_Container.git.getBlameForLineContents(s,o,e.document.getText()):await container_Container.git.getBlameForLine(s,o);if(void 0===r)return;i.sha=r.commit.sha}catch(e){return logger_Logger.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${o})`),messages_Messages.showGenericErrorMessage("Unable to copy commit id")}}return void await r.env.clipboard.writeText(i.sha)}catch(e){return e.message.includes("Couldn't find the required `xsel` binary")?void r.window.showErrorMessage("Unable to copy commit id, xsel is not installed. Please install it via your package manager, e.g. `sudo apt install xsel`"):(logger_Logger.error(e,"CopyShaToClipboardCommand"),messages_Messages.showGenericErrorMessage("Unable to copy commit id"))}}};mo=s([Wi()],mo);let uo=class DiffBranchWithBranchCommand extends common_ActiveEditorCommand{constructor(){super([Mi.DiffHeadWithBranch,Mi.DiffWorkingWithBranch])}async preExecute(e,t={}){switch(e.command){case Mi.DiffHeadWithBranch:t.ref2="HEAD";break;case Mi.DiffWorkingWithBranch:t.ref2=""}return this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){if(void 0!==i.ref2){t=Hi(t,e);try{const o=await Vi(t,e,`Compare with branch or tag in which repository${D.Ellipsis}`);if(!o)return;if(!i.ref1){let e;switch(i.ref2){case"":e=`Compare Working Tree with${D.Ellipsis}`;break;case"HEAD":e=`Compare HEAD with${D.Ellipsis}`;break;default:e=`Compare ${i.ref2} with${D.Ellipsis}`}const t=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(o).show(e,{allowCommitId:!0});if(void 0===t)return;if(t instanceof commonQuickPicks_CommandQuickPickItem)return t.execute();if(i.ref1=t.ref,void 0===i.ref1)return}return void await container_Container.compareView.compare(o,i.ref1,i.ref2)}catch(e){return logger_Logger.error(e,"DiffBranchWithBranchCommand"),messages_Messages.showGenericErrorMessage("Unable to open branch compare")}}}};uo=s([Wi()],uo);let go=class DiffDirectoryCommand extends common_ActiveEditorCommand{constructor(){super([Mi.DiffDirectory,Mi.DiffDirectoryWithHead,Mi.ViewsOpenDirectoryDiff,Mi.ViewsOpenDirectoryDiffWithWorking])}async preExecute(e,t={}){switch(e.command){case Mi.DiffDirectoryWithHead:t.ref1="HEAD",t.ref2=void 0;break;case Mi.ViewsOpenDirectoryDiff:"viewItem"===e.type&&e.node instanceof compareResultsNode_CompareResultsNode&&(t.ref1=e.node.ref1.ref,t.ref2=e.node.ref2.ref);break;case Mi.ViewsOpenDirectoryDiffWithWorking:(function(e){return"viewItem"===e.type&&e.node instanceof ViewRefNode})(e)&&(t.ref1=e.node.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){t=Hi(t,e);try{const o=await Vi(t,e,`Compare directory in which repository${D.Ellipsis}`);if(!o)return;if(!i.ref1){i=Object.assign({},i);const e=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(o).show(`Compare Working Tree with${D.Ellipsis}`,{allowCommitId:!0});if(void 0===e)return;if(e instanceof commonQuickPicks_CommandQuickPickItem)return e.execute();if(i.ref1=e.ref,void 0===i.ref1)return}return void await container_Container.git.openDirectoryDiff(o,i.ref1,i.ref2)}catch(e){if("No diff tool found"===(e&&e.toString())){if(!await r.window.showWarningMessage("Unable to open directory compare because there is no Git diff tool configured","View Git Docs"))return;return r.commands.executeCommand(x.Open,r.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}return logger_Logger.error(e,"DiffDirectoryCommand"),messages_Messages.showGenericErrorMessage("Unable to open directory compare")}}};go=s([Wi()],go);let po=class DiffLineWithPreviousCommand extends common_ActiveEditorCommand{constructor(){super(Mi.DiffLineWithPrevious)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;const o=await gitUri_GitUri.fromUri(t);if(void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line),void 0===i.commit||gitService_GitService.isUncommitted(i.commit.sha)){const t=i.line;if(t<0)return;try{const s=e&&e.document&&e.document.isDirty?await container_Container.git.getBlameForLineContents(o,t,e.document.getText()):await container_Container.git.getBlameForLine(o,t);if(void 0===s)return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=s.commit,i.commit.isUncommitted){const e=await container_Container.git.getStatusForFile(o.repoPath,o.fsPath);void 0!==e&&void 0!==e.indexStatus&&(i.commit=i.commit.with({sha:gitService_GitService.stagedUncommittedSha}))}}catch(e){return logger_Logger.error(e,"DiffLineWithPreviousCommand",`getBlameForLine(${t})`),messages_Messages.showGenericErrorMessage("Unable to open compare")}}const s={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:gitService_GitService.deletedOrMissingSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,s)}};po=s([Wi()],po);let fo=class DiffLineWithWorkingCommand extends common_ActiveEditorCommand{constructor(){super(Mi.DiffLineWithWorking)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;const o=await gitUri_GitUri.fromUri(t);if(void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line),void 0===i.commit||gitService_GitService.isUncommitted(i.commit.sha)){const t=i.line;if(t<0)return;try{const s=e&&e.document&&e.document.isDirty?await container_Container.git.getBlameForLineContents(o,t,e.document.getText()):await container_Container.git.getBlameForLine(o,t);if(void 0===s)return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=s.commit,i.commit.isUncommitted){const e=await container_Container.git.getStatusForFile(o.repoPath,o.fsPath);i.commit=i.commit.with({sha:void 0!==e&&void 0!==e.indexStatus?gitService_GitService.stagedUncommittedSha:i.commit.previousSha,fileName:i.commit.previousFileName,originalFileName:null,previousSha:null,previousFileName:null}),i.line=s.line.line+1}}catch(e){return logger_Logger.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),messages_Messages.showGenericErrorMessage("Unable to open compare")}}const s={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.workingUri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,s)}};fo=s([Wi()],fo);let vo=class DiffWithCommand extends common_ActiveEditorCommand{constructor(){super(Mi.DiffWith)}static getMarkdownCommandArgs(e,t){let i;if(e instanceof commit_GitCommit){const o=e;i=void 0===t?o.isUncommitted?{repoPath:o.repoPath,lhs:{sha:"HEAD",uri:o.uri},rhs:{sha:"",uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:void 0!==o.previousSha?o.previousSha:gitService_GitService.deletedOrMissingSha,uri:o.previousUri},rhs:{sha:o.sha,uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:o.sha,uri:o.uri},rhs:{sha:t.sha,uri:t.uri}}}else i=e;return super.getMarkdownCommandArgsCore(Mi.DiffWith,i)}async execute(e,t,i={}){if(void 0!==(i=Object.assign({},i,{lhs:Object.assign({},i.lhs),rhs:Object.assign({},i.rhs),showOptions:Object.assign({},i.showOptions)})).repoPath&&void 0!==i.lhs&&void 0!==i.rhs)try{let e=i.lhs.sha,t=i.rhs.sha;if([i.lhs.sha,i.rhs.sha]=await Promise.all([await container_Container.git.resolveReference(i.repoPath,i.lhs.sha,i.lhs.uri),await container_Container.git.resolveReference(i.repoPath,i.rhs.sha,i.rhs.uri)]),i.lhs.sha!==gitService_GitService.deletedOrMissingSha&&(e=i.lhs.sha),i.rhs.sha&&i.rhs.sha!==gitService_GitService.deletedOrMissingSha){const e=await container_Container.git.getFileStatusForCommit(i.repoPath,i.rhs.uri.fsPath,i.rhs.sha);void 0!==e&&"D"===e.status?i.rhs.sha=gitService_GitService.deletedOrMissingSha:t=i.rhs.sha}const[o,s]=await Promise.all([container_Container.git.getVersionedUri(i.repoPath,i.lhs.uri.fsPath,i.lhs.sha),container_Container.git.getVersionedUri(i.repoPath,i.rhs.uri.fsPath,i.rhs.sha)]);let n=gitService_GitService.shortenSha(t,{uncommitted:"Working Tree"})||"";void 0===s?n=gitService_GitService.isUncommitted(i.rhs.sha)?"deleted":0===n.length&&i.rhs.sha===gitService_GitService.deletedOrMissingSha?"not in Working Tree":`deleted in ${n}`:void 0===o&&(n=`added in ${n}`);let a=i.lhs.sha!==gitService_GitService.deletedOrMissingSha&&gitService_GitService.shortenSha(e)||"";void 0===o&&0===i.rhs.sha.length&&(void 0!==s?(a=`not in ${a}`,n=""):a=`deleted in ${a})`),void 0!==i.lhs.title||void 0===o&&0===a.length||(i.lhs.title=`${G.basename(i.lhs.uri.fsPath)}${a?` (${a})`:""}`),void 0===i.rhs.title&&(i.rhs.title=`${G.basename(i.rhs.uri.fsPath)}${n?` (${n})`:""}`);const c=void 0!==i.lhs.title&&void 0!==i.rhs.title?`${i.lhs.title} ${D.ArrowLeftRightLong} ${i.rhs.title}`:i.lhs.title||i.rhs.title;return void 0===i.showOptions&&(i.showOptions={}),void 0===i.showOptions.viewColumn&&(i.showOptions.viewColumn=r.ViewColumn.Active),void 0!==i.line&&0!==i.line&&(i.showOptions.selection=new r.Range(i.line,0,i.line,0)),await r.commands.executeCommand(x.Diff,void 0===o?gitUri_GitUri.toRevisionUri(gitService_GitService.deletedOrMissingSha,i.lhs.uri.fsPath,i.repoPath):o,void 0===s?gitUri_GitUri.toRevisionUri(gitService_GitService.deletedOrMissingSha,i.rhs.uri.fsPath,i.repoPath):s,c,i.showOptions)}catch(e){return logger_Logger.error(e,"DiffWithCommand","getVersionedFile"),messages_Messages.showGenericErrorMessage("Unable to open compare")}}};vo=s([Wi()],vo);let _o=class DiffWithBranchCommand extends common_ActiveEditorCommand{constructor(){super(Mi.DiffWithBranch)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line);const o=await gitUri_GitUri.fromUri(t);if(!o.repoPath)return messages_Messages.showNoRepositoryWarningMessage("Unable to open file compare");const s=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(o.repoPath).show(`Compare ${G.basename(o.fsPath)} with${D.Ellipsis}`,{allowCommitId:!0,goBack:i.goBackCommand});if(void 0===s)return;if(s instanceof commonQuickPicks_CommandQuickPickItem)return s.execute();const n=s.ref;if(void 0===n)return;let a,c;const l=await container_Container.git.getDiffStatus(o.repoPath,"HEAD",n,{filter:"R"});if(void 0!==l){const e=De.normalizePath(G.relative(o.repoPath,o.fsPath)),t=l.find(t=>t.fileName===e);void 0!==t&&void 0!==t.originalFileName&&(a=gitUri_GitUri.resolveToUri(t.originalFileName,o.repoPath),c=`${G.basename(t.originalFileName)} (${n})`)}const h={repoPath:o.repoPath,lhs:{sha:s.remote?`remotes/${n}`:n,uri:a||o,title:c||`${G.basename(o.fsPath)} (${n})`},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,h)}};_o=s([Wi()],_o);let wo=class DiffWithNextCommand extends common_ActiveEditorCommand{constructor(){super(Mi.DiffWithNext)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line);const o=await gitUri_GitUri.fromUri(t);let s;if(void 0===i.commit||!(i.commit instanceof logCommit_GitLogCommit)||void 0!==i.range)try{const e=void 0===i.commit?o.sha:i.commit.sha;if(gitService_GitService.isStagedUncommitted(e)){const t={repoPath:o.repoPath,lhs:{sha:e,uri:o},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,t)}let n=await container_Container.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:void 0!==e?void 0:2,range:i.range,renames:!0});if(void 0===n){const t=await container_Container.git.findNextFileName(o.repoPath,o.fsPath);if(void 0!==t&&(n=await container_Container.git.getLogForFile(o.repoPath,t,{maxCount:void 0!==e?void 0:2,range:i.range,renames:!0})),void 0===n)return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare")}if(i.commit=e&&n.commits.get(e)||Ee.first(n.commits.values()),void 0===o.sha&&void 0!==(s=await container_Container.git.getStatusForFile(o.repoPath,o.fsPath)))return r.commands.executeCommand(Mi.DiffWithWorking,t)}catch(e){return logger_Logger.error(e,"DiffWithNextCommand",`getLogForFile(${o.repoPath}, ${o.fsPath})`),messages_Messages.showGenericErrorMessage("Unable to open compare")}if(void 0===i.commit.nextSha){if(void 0!==(s=s||await container_Container.git.getStatusForFile(o.repoPath,o.fsPath))&&"M"===s.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:gitService_GitService.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,e)}return r.commands.executeCommand(Mi.DiffWithWorking,t)}const n={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:i.commit.nextSha,uri:i.commit.nextUri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,n)}};wo=s([Wi()],wo);let bo=class DiffWithPreviousCommand extends common_ActiveEditorCommand{constructor(){super([Mi.DiffWithPrevious,Mi.DiffWithPreviousInDiff])}async preExecute(e,t={}){return e.command===Mi.DiffWithPreviousInDiff&&(t.inDiffEditor=!0),this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;if(void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line),void 0===i.commit||!i.commit.isFile){const e=await gitUri_GitUri.fromUri(t);try{let o=void 0===i.commit?e.sha:i.commit.sha;if(o===gitService_GitService.deletedOrMissingSha)return messages_Messages.showCommitHasNoPreviousCommitWarningMessage();let s=!1;gitService_GitService.isStagedUncommitted(o)&&(e.sha=o=void 0,s=!0);const n=o;i.inDiffEditor&&void 0!==o&&(o=`${o}^`),i.commit=void 0;let a=await container_Container.git.getLogForFile(e.repoPath,e.fsPath,{maxCount:2,ref:o,renames:!0});if(void 0!==a)i.commit=o&&a.commits.get(o)||Ee.first(a.commits.values());else{if(void 0===o||!o.endsWith("^"))return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(void 0===(a=await container_Container.git.getLogForFile(e.repoPath,e.fsPath,{maxCount:3,ref:n,renames:!0})))return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=Ee.next(Ee.skip(a.commits.values(),1))||Ee.first(a.commits.values()),i.commit.sha===n)return messages_Messages.showCommitHasNoPreviousCommitWarningMessage()}if(void 0===e.sha){const o=await container_Container.git.getStatusForFile(e.repoPath,e.fsPath);if(void 0!==o){if(s){const e={repoPath:i.commit.repoPath,lhs:{sha:i.inDiffEditor?i.commit.previousSha||gitService_GitService.deletedOrMissingSha:i.commit.sha,uri:i.inDiffEditor?i.commit.previousUri:i.commit.uri},rhs:{sha:i.inDiffEditor?i.commit.sha:gitService_GitService.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,e)}if(void 0!==o.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:i.inDiffEditor?i.commit.sha:gitService_GitService.stagedUncommittedSha,uri:i.commit.uri},rhs:{sha:i.inDiffEditor?gitService_GitService.stagedUncommittedSha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,e)}if(!i.inDiffEditor)return r.commands.executeCommand(Mi.DiffWithWorking,t,{commit:i.commit,showOptions:i.showOptions})}}}catch(t){return logger_Logger.error(t,"DiffWithPreviousCommand",`getLogForFile(${e.repoPath}, ${e.fsPath})`),messages_Messages.showGenericErrorMessage("Unable to open compare")}}const o={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:gitService_GitService.deletedOrMissingSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,o)}};bo=s([Wi()],bo);let Co=class DiffWithRevisionCommand extends common_ActiveEditorCommand{constructor(){super(Mi.DiffWithRevision)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line);const o=await gitUri_GitUri.fromUri(t),s=`Compare ${o.getFormattedPath({suffix:i.branchOrTag?` (${i.branchOrTag.name})`:void 0})}${o.sha?` ${De.pad(D.Dot,1,1)} ${o.shortSha}`:""} with revision${D.Ellipsis}`,n=fileHistoryQuickPick_FileHistoryQuickPick.showProgress(s);try{const e=await container_Container.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,ref:i.branchOrTag&&i.branchOrTag.ref||o.sha});if(void 0===e)return i.branchOrTag?r.window.showWarningMessage(`The file could not be found in ${i.branchOrTag.name}`):messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(n.token.isCancellationRequested)return;let a=void 0;if(e.truncated){const o=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${De.pad(D.Dash,2,3)} shows ${e.maxCount} newer commits`},Mi.DiffWithRevision,[t,Object.assign({},i)]),s=Ee.last(e.commits.values());null!=s&&(a=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${De.pad(D.Dash,2,3)} shows ${e.maxCount} older commits`},Mi.DiffWithRevision,[new gitUri_GitUri(t,s),Object.assign({},i,{nextPageCommand:o})]))}const c=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to history of ${D.Space}$(file-text) ${o.getFormattedPath()}${i.branchOrTag?` from ${D.Space}${i.branchOrTag instanceof GitTag?"$(tag)":"$(git-branch)"} ${i.branchOrTag.name}`:o.sha?` from ${D.Space}$(git-commit) ${o.shortSha}`:""}`},Mi.DiffWithRevision,[t,Object.assign({},i)]),l=await fileHistoryQuickPick_FileHistoryQuickPick.show(e,o,s,{pickerOnly:!0,progressCancellation:n,currentCommand:c,nextPageCommand:i.nextPageCommand,previousPageCommand:a,showAllCommand:e.truncated?new commonQuickPicks_CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${De.pad(D.Dash,2,3)} this may take a while`},Mi.DiffWithRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===l)return;let h;if(l instanceof commonQuickPicks_ChooseFromBranchesAndTagsQuickPickItem){const e=await l.execute();if(void 0===e)return;return e instanceof commonQuickPicks_CommandQuickPickItem?e.execute():r.commands.executeCommand(Mi.DiffWithRevision,o,Object.assign({},i,{branchOrTag:e.item,goBackCommand:c}))}if(l instanceof commonQuickPicks_CommandQuickPickItem)return l.execute();h=l.commit.sha;const d={repoPath:o.repoPath,lhs:{sha:h,uri:o},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return await r.commands.executeCommand(Mi.DiffWith,d)}catch(e){return logger_Logger.error(e,"DiffWithRevisionCommand"),messages_Messages.showGenericErrorMessage("Unable to open compare")}finally{n.cancel()}}};Co=s([Wi()],Co);let yo=class DiffWithWorkingCommand extends common_ActiveEditorCommand{constructor(){super(Mi.DiffWithWorking)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;const o=await gitUri_GitUri.fromUri(t);if(void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line),void 0===i.commit||gitService_GitService.isUncommitted(i.commit.sha)){if(void 0===o.sha)return r.window.showInformationMessage("File matches the working tree");if(o.sha===gitService_GitService.deletedOrMissingSha)return r.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");if(gitService_GitService.isStagedUncommitted(o.sha)){o.sha=void 0;const e=await container_Container.git.getStatusForFile(o.repoPath,o.fsPath);if(void 0!==e&&void 0!==e.indexStatus){const e={repoPath:o.repoPath,lhs:{sha:gitService_GitService.stagedUncommittedSha,uri:o.documentUri()},rhs:{sha:"",uri:o.documentUri()},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,e)}}try{if(i.commit=await container_Container.git.getLogCommitForFile(o.repoPath,o.fsPath,{ref:o.sha,firstIfNotFound:!0}),void 0===i.commit)return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare")}catch(e){return logger_Logger.error(e,"DiffWithWorkingCommand",`getLogCommit(${o.repoPath}, ${o.fsPath}, ${o.sha})`),messages_Messages.showGenericErrorMessage("Unable to open compare")}}const[s]=await container_Container.git.findWorkingFileName(o.fsPath,o.repoPath);if(void 0===s)return r.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");i.commit.workingFileName=s;const n={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.workingUri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(Mi.DiffWith,n)}};var ko,So;yo=s([Wi()],yo),function(e){e[e.INDEX_MODIFIED=0]="INDEX_MODIFIED",e[e.INDEX_ADDED=1]="INDEX_ADDED",e[e.INDEX_DELETED=2]="INDEX_DELETED",e[e.INDEX_RENAMED=3]="INDEX_RENAMED",e[e.INDEX_COPIED=4]="INDEX_COPIED",e[e.MODIFIED=5]="MODIFIED",e[e.DELETED=6]="DELETED",e[e.UNTRACKED=7]="UNTRACKED",e[e.IGNORED=8]="IGNORED",e[e.ADDED_BY_US=9]="ADDED_BY_US",e[e.ADDED_BY_THEM=10]="ADDED_BY_THEM",e[e.DELETED_BY_US=11]="DELETED_BY_US",e[e.DELETED_BY_THEM=12]="DELETED_BY_THEM",e[e.BOTH_ADDED=13]="BOTH_ADDED",e[e.BOTH_DELETED=14]="BOTH_DELETED",e[e.BOTH_MODIFIED=15]="BOTH_MODIFIED"}(ko||(ko={})),function(e){e[e.Merge=0]="Merge",e[e.Index=1]="Index",e[e.WorkingTree=2]="WorkingTree"}(So||(So={}));let Po=class ExternalDiffCommand extends common_Command{constructor(){super([Mi.ExternalDiff,Mi.ExternalDiffAll])}async preExecute(e,t={}){if(function(e){if("viewItem"!==e.type)return!1;const t=e.node;return void 0!==t.file&&t.commit instanceof commit_GitCommit&&(void 0!==t.file.repoPath||void 0!==t.repoPath)}(e)){t=Object.assign({},t);const i=gitService_GitService.isUncommitted(e.node.commit.previousFileSha)?"":e.node.commit.previousFileSha,o=e.node.commit.isUncommitted?"":e.node.commit.sha;return t.files=[{uri:gitUri_GitUri.fromFile(e.node.file,e.node.file.repoPath||e.node.repoPath),staged:e.node.commit.isStagedUncommitted||void 0!==e.node.file.indexStatus,ref1:i,ref2:o}],this.execute(t)}if(function(e){if("viewItem"!==e.type)return!1;const t=e.node;return void 0!==t.file&&void 0!==t.ref1&&void 0!==t.ref2&&(void 0!==t.file.repoPath||void 0!==t.repoPath)}(e))return(t=Object.assign({},t)).files=[{uri:gitUri_GitUri.fromFile(e.node.file,e.node.file.repoPath||e.node.repoPath),staged:void 0!==e.node.file.indexStatus,ref1:e.node.ref1,ref2:e.node.ref2}],this.execute(t);if(void 0===t.files&&("scm-states"===e.type?(t=Object.assign({},t)).files=e.scmResourceStates.map(e=>({uri:e.resourceUri,staged:e.resourceGroupType===So.Index})):"scm-groups"===e.type&&((t=Object.assign({},t)).files=E.filterMap(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?{uri:e.resourceUri,staged:e.resourceGroupType===So.Index}:void 0))),e.command===Mi.ExternalDiffAll&&void 0===t.files){const e=await ji(void 0,`Open changes from which repository${D.Ellipsis}`);if(!e)return;const i=await container_Container.git.getStatusForRepo(e);if(void 0===i)return r.window.showInformationMessage("The repository doesn't have any changes");t.files=[];for(const e of i.files)"M"===e.indexStatus&&t.files.push({uri:e.uri,staged:!0}),"M"===e.workingTreeStatus&&t.files.push({uri:e.uri,staged:!1})}return this.execute(t)}isModified(e){const t=e.type;return t===ko.BOTH_MODIFIED||t===ko.INDEX_MODIFIED||t===ko.MODIFIED}async execute(e={}){try{let t;if(void 0===e.files){const i=r.window.activeTextEditor;if(void 0===i)return;if(!(t=await container_Container.git.getRepoPathOrActive(void 0,i)))return;const o=i.document.uri,s=await container_Container.git.getStatusForFile(t,o.fsPath);if(void 0===s)return r.window.showInformationMessage("The current file doesn't have any changes");e.files=[],"M"===s.indexStatus&&e.files.push({uri:s.uri,staged:!0}),"M"===s.workingTreeStatus&&e.files.push({uri:s.uri,staged:!1})}else if(!(t=await container_Container.git.getRepoPath(e.files[0].uri.fsPath)))return;const i=await container_Container.git.getDiffTool(t);if(void 0===i){if(!await r.window.showWarningMessage("Unable to open changes in diff tool. No Git diff tool is configured","View Git Docs"))return;return r.commands.executeCommand(x.Open,r.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}for(const o of e.files)container_Container.git.openDiffTool(t,o.uri,{ref1:o.ref1,ref2:o.ref2,staged:o.staged,tool:i});return}catch(e){return logger_Logger.error(e,"ExternalDiffCommand"),messages_Messages.showGenericErrorMessage("Unable to open changes in diff tool")}}};Po=s([Wi()],Po);let xo=class OpenBranchesInRemoteCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenBranchesInRemote)}async preExecute(e,t={}){return Yi(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){const o=(t=Hi(t,e))&&await gitUri_GitUri.fromUri(t),s=await Vi(o,e,`Open branches on remote for which repository${D.Ellipsis}`);if(s)try{const e=await container_Container.git.getRemotes(s);return r.commands.executeCommand(Mi.OpenInRemote,t,{resource:{type:"branches"},remote:i.remote,remotes:e})}catch(e){return logger_Logger.error(e,"OpenBranchesInRemoteCommand"),r.window.showErrorMessage("Unable to open branches on remote provider. See output channel for more details")}}};xo=s([Wi()],xo);let Fo=class OpenBranchInRemoteCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenBranchInRemote)}async preExecute(e,t={}){return zi(e)&&((t=Object.assign({},t)).branch=e.node.branch.name,t.remote=e.node.branch.getRemote()),this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){const o=(t=Hi(t,e))&&await gitUri_GitUri.fromUri(t),s=await Vi(o,e,`Open branch on remote for which repository${D.Ellipsis}`);if(s)try{if(void 0===i.branch){i=Object.assign({},i);const e=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(s).show(`Open which branch on remote${D.Ellipsis}`,{autoPick:!0,filters:{branches:e=>void 0!==e.tracking},include:"branches"});if(void 0===e||e instanceof commonQuickPicks_CommandQuickPickItem)return;i.branch=e.ref}const e=await container_Container.git.getRemotes(s);return r.commands.executeCommand(Mi.OpenInRemote,t,{resource:{type:"branch",branch:i.branch||"HEAD"},remote:i.remote,remotes:e})}catch(e){return logger_Logger.error(e,"OpenBranchInRemoteCommandArgs"),r.window.showErrorMessage("Unable to open branch on remote provider. See output channel for more details")}}};Fo=s([Wi()],Fo);let $o=class OpenChangedFilesCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenChangedFiles)}async execute(e,t,i={}){t=Hi(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=await ji(void 0,`Open all files changed in which repository${D.Ellipsis}`);if(!e)return;const t=await container_Container.git.getStatusForRepo(e);if(void 0===t)return r.window.showWarningMessage("Unable to open changed files");i.uris=E.filterMap(t.files,e=>"D"!==e.status?e.uri:void 0)}for(const e of i.uris)await eo(e,{preserveFocus:!0,preview:!1});return}catch(e){return logger_Logger.error(e,"OpenChangedFilesCommand"),messages_Messages.showGenericErrorMessage("Unable to open all changed files")}}};$o=s([Wi()],$o);let Do=class OpenCommitInRemoteCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenCommitInRemote)}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Mi.OpenCommitInRemote,t)}async preExecute(e,t={}){return qi(e)?((t=Object.assign({},t)).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;const o=await gitUri_GitUri.fromUri(t);if(o.repoPath)try{if(void 0===i.sha){const t=null==e?0:e.selection.active.line;if(t<0)return;const s=e&&e.document&&e.document.isDirty?await container_Container.git.getBlameForLineContents(o,t,e.document.getText()):await container_Container.git.getBlameForLine(o,t);if(void 0===s)return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open commit on remote provider");let r=s.commit;r.isUncommitted&&(r=r.with({sha:r.previousSha,fileName:r.previousFileName,previousSha:null,previousFileName:null})),i.sha=r.sha}const s=await container_Container.git.getRemotes(o.repoPath);return r.commands.executeCommand(Mi.OpenInRemote,t,{resource:{type:"commit",sha:i.sha},remotes:s})}catch(e){return logger_Logger.error(e,"OpenCommitInRemoteCommand"),r.window.showErrorMessage("Unable to open commit on remote provider. See output channel for more details")}}};Do=s([Wi()],Do);let To=class OpenFileInRemoteCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenFileInRemote)}async preExecute(e,t={range:!0}){return qi(e)?((t=Object.assign({},t)).range=!1,zi(e)&&(t.branch=void 0!==e.node.branch?e.node.branch.name:void 0),this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i={range:!0}){if(null==(t=Hi(t,e)))return;const o=await gitUri_GitUri.fromUri(t);if(o.repoPath){if(void 0===i.branch){const e=await container_Container.git.getBranch(o.repoPath);if(void 0===e||void 0===e.tracking){const e=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(o.repoPath).show(i.clipboard?`Copy url for ${o.getRelativePath()} to clipboard for which branch${D.Ellipsis}`:`Open ${o.getRelativePath()} on remote for which branch${D.Ellipsis}`,{autoPick:!0,filters:{branches:e=>void 0!==e.tracking},include:"branches"});if(void 0===e||e instanceof commonQuickPicks_CommandQuickPickItem)return;i.branch=e.ref}else i.branch=e.name}try{const s=await container_Container.git.getRemotes(o.repoPath),n=i.range&&null!=e?new r.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+1})):void 0;return r.commands.executeCommand(Mi.OpenInRemote,t,{resource:{type:void 0===o.sha?"file":"revision",branch:i.branch||"HEAD",fileName:o.getRelativePath(),range:n,sha:o.sha},remotes:s,clipboard:i.clipboard})}catch(e){return logger_Logger.error(e,"OpenFileInRemoteCommand"),r.window.showErrorMessage("Unable to open file on remote provider. See output channel for more details")}}}};To=s([Wi()],To);let No=class OpenFileRevisionCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenFileRevision)}static getMarkdownCommandArgs(e,t,i){let o;if(e instanceof r.Uri){o={uri:e,line:i,annotationType:t}}else o=e;return super.getMarkdownCommandArgsCore(Mi.OpenFileRevision,o)}async execute(e,t,i={}){let o;void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line);try{if(null==i.uri){if(null==(t=Hi(t,e)))return;const s=await gitUri_GitUri.fromUri(t),n=`Open revision of ${s.getFormattedPath({suffix:i.branchOrTag?` (${i.branchOrTag.name})`:void 0})}${s.sha?` ${De.pad(D.Dot,1,1)} ${s.shortSha}`:""}${D.Ellipsis}`;o=fileHistoryQuickPick_FileHistoryQuickPick.showProgress(n);const a=await container_Container.git.getLogForFile(s.repoPath,s.fsPath,{maxCount:i.maxCount,ref:i.branchOrTag&&i.branchOrTag.ref||s.sha});if(void 0===a)return i.branchOrTag?r.window.showWarningMessage(`The file could not be found in ${i.branchOrTag.name}`):messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(o.token.isCancellationRequested)return;let c=void 0;if(a.truncated){const e=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${De.pad(D.Dash,2,3)} shows ${a.maxCount} newer commits`},Mi.OpenFileRevision,[t,Object.assign({},i)]),o=Ee.last(a.commits.values());null!=o&&(c=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${De.pad(D.Dash,2,3)} shows ${a.maxCount} older commits`},Mi.OpenFileRevision,[new gitUri_GitUri(t,o),Object.assign({},i,{nextPageCommand:e})]))}const l=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to history of ${D.Space}$(file-text) ${s.getFormattedPath()}${i.branchOrTag?` from ${D.Space}${i.branchOrTag instanceof GitTag?"$(tag)":"$(git-branch)"} ${i.branchOrTag.name}`:s.sha?` from ${D.Space}$(git-commit) ${s.shortSha}`:""}`},Mi.OpenFileRevision,[t,Object.assign({},i)]),h=await fileHistoryQuickPick_FileHistoryQuickPick.show(a,s,n,{pickerOnly:!0,progressCancellation:o,currentCommand:l,nextPageCommand:i.nextPageCommand,previousPageCommand:c,showAllCommand:a.truncated?new commonQuickPicks_CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${De.pad(D.Dash,2,3)} this may take a while`},Mi.OpenFileRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===h)return;if(h instanceof commonQuickPicks_ChooseFromBranchesAndTagsQuickPickItem){const e=await h.execute();if(void 0===e)return;return e instanceof commonQuickPicks_CommandQuickPickItem?e.execute():r.commands.executeCommand(Mi.OpenFileRevision,s,Object.assign({},i,{branchOrTag:e.item,goBackCommand:l}))}if(h instanceof commonQuickPicks_CommandQuickPickItem)return h.execute();i.uri=gitUri_GitUri.toRevisionUri(h.commit.sha,h.commit.uri.fsPath,h.commit.repoPath)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new r.Range(i.line,0,i.line,0));const s=await eo(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?s:container_Container.fileAnnotations.show(s,i.annotationType,i.line)}catch(e){return logger_Logger.error(e,"OpenFileRevisionCommand"),messages_Messages.showGenericErrorMessage("Unable to open file revision")}finally{o&&o.cancel()}}};No=s([Wi()],No);let Ro=class OpenInRemoteCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenInRemote)}async execute(e,t,i={}){if(void 0!==(i=Object.assign({},i)).remotes&&void 0!==i.resource){if(void 0!==i.remote){const e=i.remotes.filter(e=>e.name===i.remote);e.length>0&&(i.remotes=e)}try{if(1===i.remotes.length){this.ensureRemoteBranchName(i);const e=new remotesQuickPick_OpenRemoteCommandQuickPickItem(i.remotes[0],i.resource,i.clipboard);return await e.execute()}const e=i.clipboard?"Copy url for":"Open",t=i.clipboard?`to clipboard from${D.Ellipsis}`:`on${D.Ellipsis}`;let o="";switch(i.resource.type){case ut.Branch:this.ensureRemoteBranchName(i),o=`${e} ${i.resource.branch} branch ${t}`;break;case ut.Commit:o=`${e} commit ${gitService_GitService.shortenSha(i.resource.sha)} ${t}`;break;case ut.File:o=`${e} ${i.resource.fileName} ${t}`;break;case ut.Revision:if(void 0!==i.resource.commit&&i.resource.commit instanceof logCommit_GitLogCommit)"D"===i.resource.commit.status?(i.resource.sha=i.resource.commit.previousSha,o=`${e} ${i.resource.fileName} ${De.pad(D.Dot,1,1)} ${i.resource.commit.previousShortSha} ${t}`):(i.resource.sha=i.resource.commit.sha,o=`${e} ${i.resource.fileName} ${De.pad(D.Dot,1,1)} ${i.resource.commit.shortSha} ${t}`);else{const s=void 0===i.resource.sha?"":gitService_GitService.shortenSha(i.resource.sha),r=s?` ${De.pad(D.Dot,1,1)} ${s}`:"";o=`${e} ${i.resource.fileName}${r} ${t}`}}const s=await class remotesQuickPick_RemotesQuickPick{static async show(e,t,i,o,s){const n=e.map(e=>new remotesQuickPick_OpenRemoteCommandQuickPickItem(e,i,o));s&&n.splice(0,0,s);const a=await r.window.showQuickPick(n,{placeHolder:t,ignoreFocusOut:Gi()});if(void 0!==a)return a}}.show(i.remotes,o,i.resource,i.clipboard,i.goBackCommand);if(void 0===s)return;return await s.execute()}catch(e){return logger_Logger.error(e,"OpenInRemoteCommand"),messages_Messages.showGenericErrorMessage("Unable to open in remote provider")}}}ensureRemoteBranchName(e){if(void 0===e.remotes||void 0===e.resource||"branch"!==e.resource.type)return;const t=e.resource.branch.indexOf("/");if(t>=0){const i=e.resource.branch.substring(0,t),o=e.remotes.find(e=>e.name===i);void 0!==o&&(e.resource.branch=e.resource.branch.substring(t+1),e.remotes=[o])}}};Ro=s([Wi()],Ro);let Uo=class OpenRepoInRemoteCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenRepoInRemote)}async preExecute(e,t={}){return Yi(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){const o=(t=Hi(t,e))&&await gitUri_GitUri.fromUri(t),s=await Vi(o,e,`Open which repository on remote${D.Ellipsis}`);if(s)try{const e=await container_Container.git.getRemotes(s);return r.commands.executeCommand(Mi.OpenInRemote,t,{resource:{type:"repo"},remote:i.remote,remotes:e})}catch(e){return logger_Logger.error(e,"OpenRepoInRemoteCommand"),r.window.showErrorMessage("Unable to open repository on remote provider. See output channel for more details")}}};Uo=s([Wi()],Uo);let Lo=class OpenWorkingFileCommand extends common_ActiveEditorCommand{constructor(){super(Mi.OpenWorkingFile)}async execute(e,t,i={}){void 0===(i=Object.assign({},i)).line&&(i.line=null==e?0:e.selection.active.line);try{if(null==i.uri){if(null==(t=Hi(t,e)))return;if(i.uri=await gitUri_GitUri.fromUri(t),i.uri instanceof gitUri_GitUri&&i.uri.sha){const[e,t]=await container_Container.git.findWorkingFileName(i.uri.fsPath,i.uri.repoPath);if(void 0===e)return r.window.showWarningMessage("Unable to open working file. File could not be found in the working tree");i.uri=new gitUri_GitUri(gitUri_GitUri.resolveToUri(e,t),t)}}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new r.Range(i.line,0,i.line,0));const o=await eo(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?o:container_Container.fileAnnotations.show(o,i.annotationType,i.line)}catch(e){return logger_Logger.error(e,"OpenWorkingFileCommand"),messages_Messages.showGenericErrorMessage("Unable to open working file")}}};Lo=s([Wi()],Lo);let Bo=class FetchRepositoriesCommand extends common_Command{constructor(){super(Mi.FetchRepositories)}async execute(){return container_Container.git.fetchAll()}};Bo=s([Wi()],Bo);let Oo=class PullRepositoriesCommand extends common_Command{constructor(){super(Mi.PullRepositories)}async execute(){return container_Container.git.pullAll()}};Oo=s([Wi()],Oo);let Eo=class PushRepositoriesCommand extends common_Command{constructor(){super(Mi.PushRepositories)}async execute(){return container_Container.git.pushAll()}};Eo=s([Wi()],Eo);let Go=class ResetSuppressedWarningsCommand extends common_Command{constructor(){super(Mi.ResetSuppressedWarnings)}async execute(){await io.update(io.name("advanced")("messages").value,void 0,r.ConfigurationTarget.Global)}};Go=s([Wi()],Go);const Io=/^([@~=:#])/,Ao=new Map([["@",hi.Author],["~",hi.ChangedLines],["=",hi.Changes],[":",hi.Files],["#",hi.Sha]]),Mo=new Map([[hi.Author,"@"],[hi.ChangedLines,"~"],[hi.Changes,"="],[hi.Files,":"],[hi.Sha,"#"]]);let Qo=class SearchCommitsCommand extends ActiveEditorCachedCommand{constructor(){super([Mi.SearchCommits,Mi.SearchCommitsInView])}async preExecute(e,t={}){if("viewItem"===e.type){if((t=Object.assign({},t)).showInView=!0,e.node instanceof searchResultsCommitsNode_SearchResultsCommitsNode&&(t.search=e.node.search,t.searchBy=e.node.searchBy,t.prefillOnly=!0),Ki(e))return this.execute(e.editor,e.node.uri,t)}else e.command===Mi.SearchCommitsInView&&((t=Object.assign({},t)).showInView=!0);return this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){const o=(t=Hi(t,e))&&await gitUri_GitUri.fromUri(t),s=await Vi(o,e,`Search for commits in which repository${D.Ellipsis}`,i.goBackCommand);if(!s)return;i=Object.assign({},i);const n=Object.assign({},i);if(i.prefillOnly&&i.search&&i.searchBy&&(i.search=`${Mo.get(i.searchBy)||""}${i.search}`,i.searchBy=void 0),!i.search||null==i.searchBy){let e;if(i.search||(null!=i.searchBy?(i.search=Mo.get(i.searchBy),e=[1,1]):i.search=this._lastSearch),i.showInView&&await container_Container.searchView.show(),i.search=await r.window.showInputBox({value:i.search,prompt:"Please enter a search string",placeHolder:"Search commits by message, author (@<pattern>), files (:<path/glob>), commit id (#<sha>), changes (=<pattern>), changed lines (~<pattern>)",valueSelection:e}),void 0===i.search)return void 0===i.goBackCommand?void 0:i.goBackCommand.execute();this._lastSearch=n.search=i.search;const t=Io.exec(i.search);t&&t[1]?(i.searchBy=Ao.get(t[1]),i.search=i.search.substring(" "===i.search[1]?2:1)):gitService_GitService.isShaLike(i.search)?i.searchBy=hi.Sha:i.searchBy=hi.Message}void 0===i.searchBy&&(i.searchBy=hi.Message);let a=void 0;switch(i.searchBy){case hi.Author:a=`commits with an author matching '${i.search}'`;break;case hi.ChangedLines:a=`commits with changed lines matching '${i.search}'`;break;case hi.Changes:a=`commits with changes matching '${i.search}'`;break;case hi.Files:a=`commits with files matching '${i.search}'`;break;case hi.Message:a=i.search?`commits with a message matching '${i.search}'`:"all commits";break;case hi.Sha:a=`commits with an id matching '${i.search}'`}if(i.showInView)return void container_Container.searchView.search(s,i.search,i.searchBy,{maxCount:i.maxCount,label:{label:a}});const c=commitsQuickPick_CommitsQuickPick.showProgress(a);try{const e=await container_Container.git.getLogForSearch(s,i.search,i.searchBy,{maxCount:i.maxCount});if(c.token.isCancellationRequested)return;let o,l=i.goBackCommand||new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to commit search`},Mi.SearchCommits,[t,n]);if(i.searchBy!==hi.Sha||void 0===e||1!==e.count){const s=await commitsQuickPick_CommitsQuickPick.show(e,a,c,{goBackCommand:l,showAllCommand:void 0!==e&&e.truncated?new commonQuickPicks_CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${De.pad(D.Dash,2,3)} this may take a while`},Mi.SearchCommits,[t,Object.assign({},i,{maxCount:0,goBackCommand:l})]):void 0,showInViewCommand:void 0!==e?new commonQuickPicks_ShowCommitSearchResultsInViewQuickPickItem(i.search,i.searchBy,e,{label:a}):void 0});if(void 0===s)return;if(s instanceof commonQuickPicks_CommandQuickPickItem)return s.execute();o=s.commit,l=void 0}else o=Ee.first(e.commits.values());return r.commands.executeCommand(Mi.ShowQuickCommitDetails,o.toGitUri(),{sha:o.sha,commit:o,goBackCommand:l||new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,2)} to search for ${a}`},Mi.SearchCommits,[t,i])})}catch(e){return logger_Logger.error(e,"ShowCommitSearchCommand"),messages_Messages.showGenericErrorMessage("Unable to find commits")}finally{c.cancel()}}};Qo=s([Wi()],Qo);let Wo=class ShowLastQuickPickCommand extends common_Command{constructor(){super(Mi.ShowLastQuickPick)}async execute(){const e=Ji;if(void 0!==e)try{return r.commands.executeCommand(e.command,...e.args)}catch(e){return logger_Logger.error(e,"ShowLastQuickPickCommand"),messages_Messages.showGenericErrorMessage("Unable to show last quick pick")}}};Wo=s([Wi()],Wo);let Ho=class ShowQuickBranchHistoryCommand extends ActiveEditorCachedCommand{constructor(){super(Mi.ShowQuickBranchHistory)}async execute(e,t,i={}){const o=(t=Hi(t,e))&&await gitUri_GitUri.fromUri(t);let s=void 0===(i=Object.assign({},i)).branch?void 0:branchHistoryQuickPick_BranchHistoryQuickPick.showProgress(i.branch);try{const n=i.repoPath||await Vi(o,e,`Show branch history in which repository${D.Ellipsis}`);if(!n)return;if(void 0===i.branch){let o;await container_Container.git.getRepoPathOrActive(t,e)||(o=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to which repository`},Mi.ShowQuickBranchHistory,[t,i]));const r=await new branchesAndTagsQuickPick_BranchesAndTagsQuickPick(n).show(`Show history for branch${D.Ellipsis}`,{goBack:o,include:"branches"});if(void 0===r)return;if(r instanceof commonQuickPicks_CommandQuickPickItem)return r.execute();if(i.branch=r.ref,void 0===i.branch)return;s=branchHistoryQuickPick_BranchHistoryQuickPick.showProgress(i.branch)}if(void 0===i.log&&(i.log=await container_Container.git.getLog(n,{maxCount:i.maxCount,ref:o&&o.sha||i.branch}),void 0===i.log))return r.window.showWarningMessage("Unable to show branch history");if(void 0!==s&&s.token.isCancellationRequested)return;const a=await branchHistoryQuickPick_BranchHistoryQuickPick.show(i.log,o,i.branch,s,i.goBackCommand,i.nextPageCommand);if(void 0===a)return;if(a instanceof commonQuickPicks_CommandQuickPickItem)return a.execute();const c=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to ${D.Space}$(git-branch) ${i.branch} history`},Mi.ShowQuickBranchHistory,[t,Object.assign({},i)]);return r.commands.executeCommand(Mi.ShowQuickCommitDetails,a.commit.toGitUri(),{sha:a.commit.sha,commit:a.commit,repoLog:i.log,goBackCommand:c})}catch(e){return logger_Logger.error(e,"ShowQuickBranchHistoryCommand"),messages_Messages.showGenericErrorMessage("Unable to show branch history")}finally{s&&s.cancel()}}};Ho=s([Wi()],Ho);let Vo=class ShowQuickCommitDetailsCommand extends ActiveEditorCachedCommand{constructor(){super([Mi.ShowCommitInView,Mi.ShowQuickCommitDetails])}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Mi.ShowQuickCommitDetails,t)}async preExecute(e,t={}){return e.command===Mi.ShowCommitInView&&((t=Object.assign({},t)).showInView=!0),"viewItem"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,qi(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;const o=await gitUri_GitUri.fromUri(t);let s=o.repoPath,n=s?G.relative(s,o.fsPath):o.fsPath;if(void 0===(i=Object.assign({},i)).sha){if(null==e)return;const t=e.selection.active.line;if(t<0)return;try{const e=await container_Container.git.getBlameForLine(o,t);if(void 0===e)return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to show commit details");if(e.commit.isUncommitted)return messages_Messages.showLineUncommittedWarningMessage("Unable to show commit details");i.sha=e.commit.sha,s=e.commit.repoPath,n=e.commit.fileName,i.commit=e.commit}catch(e){return logger_Logger.error(e,"ShowQuickCommitDetailsCommand",`getBlameForLine(${t})`),messages_Messages.showGenericErrorMessage("Unable to show commit details")}}try{if((void 0===i.commit||i.commit.isFile)&&(void 0!==i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),void 0===i.commit&&(i.repoLog=void 0)),void 0===i.repoLog)){const e=await container_Container.git.getLog(s,{maxCount:2,ref:i.sha});if(void 0===e)return messages_Messages.showCommitNotFoundWarningMessage("Unable to show commit details");i.commit=e.commits.get(i.sha)}if(void 0===i.commit)return messages_Messages.showCommitNotFoundWarningMessage("Unable to show commit details");if(void 0===i.commit.workingFileName&&(i.commit.workingFileName=n),i.showInView)return void await container_Container.searchView.search(s,i.commit.sha,hi.Sha,{label:{label:`commits with an id matching '${i.commit.shortSha}'`}});if(void 0===i.goBackCommand){const e=await container_Container.git.getBranch(i.commit.repoPath);void 0!==e&&(i.goBackCommand=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to ${e.name} history`},Mi.ShowQuickCurrentBranchHistory,[i.commit.toGitUri()]))}const e=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to details of ${D.Space}$(git-commit) ${i.commit.shortSha}`},Mi.ShowQuickCommitDetails,[i.commit.toGitUri(),i]),o=await class commitQuickPick_CommitQuickPick{static async show(e,t,i,o,s){await e.resolvePreviousFileSha();const n=e.files.map(t=>new commitQuickPick_CommitWithFileStatusQuickPickItem(e,t)),a=e.isStash;let c=0;if(a)n.splice(c++,0,new commonQuickPicks_CommandQuickPickItem({label:"$(git-pull-request) Apply Stashed Changes",description:`${De.pad(D.Dash,2,3)} ${e.getShortMessage()}`},Mi.StashApply,[{confirm:!0,deleteAfter:!1,stashItem:e,goBackCommand:o}])),n.splice(c++,0,new commonQuickPicks_CommandQuickPickItem({label:"$(x) Delete Stashed Changes",description:`${De.pad(D.Dash,2,3)} ${e.getShortMessage()}`},Mi.StashDelete,[{confirm:!0,stashItem:e,goBackCommand:o}])),n.splice(c++,0,new commonQuickPicks_ShowCommitInViewQuickPickItem(e));else{n.splice(c++,0,new commonQuickPicks_ShowCommitInViewQuickPickItem(e));const t=await container_Container.git.getRemotes(e.repoPath);t.length&&n.splice(c++,0,new remotesQuickPick_OpenRemotesCommandQuickPickItem(t,{type:"commit",sha:e.sha},o))}n.splice(c++,0,new commitQuickPick_OpenCommitFilesCommandQuickPickItem(e)),n.splice(c++,0,new commitQuickPick_OpenCommitFileRevisionsCommandQuickPickItem(e)),n.splice(c++,0,new commonQuickPicks_CommandQuickPickItem({label:"$(git-compare) Open Directory Compare with Previous Revision",description:`${De.pad(D.Dash,2,3)} $(git-commit) ${e.previousFileShortSha} ${D.Space} $(git-compare) ${D.Space} $(git-commit) ${e.shortSha}`},Mi.DiffDirectory,[e.uri,{ref1:e.previousFileSha,ref2:e.sha}])),n.splice(c++,0,new commonQuickPicks_CommandQuickPickItem({label:"$(git-compare) Open Directory Compare with Working Tree",description:`${De.pad(D.Dash,2,3)} $(git-commit) ${e.shortSha} ${D.Space} $(git-compare) ${D.Space} $(file-directory) Working Tree`},Mi.DiffDirectory,[t,{ref1:e.sha}])),a||n.splice(c++,0,new commonQuickPicks_CommandQuickPickItem({label:"$(clippy) Copy Commit ID to Clipboard",description:`${De.pad(D.Dash,2,3)} ${e.shortSha}`},Mi.CopyShaToClipboard,[t,{sha:e.sha}])),n.splice(c++,0,new commonQuickPicks_CommandQuickPickItem({label:"$(clippy) Copy Commit Message to Clipboard",description:`${De.pad(D.Dash,2,3)} ${e.getShortMessage()}`},Mi.CopyMessageToClipboard,[t,{message:e.message,sha:e.sha}])),n.splice(c++,0,new commonQuickPicks_CommandQuickPickItem({label:"Changed Files",description:e.getFormattedDiffStatus()},Mi.ShowQuickCommitDetails,[t,{commit:e,repoLog:s,sha:e.sha,goBackCommand:i}])),i&&n.splice(0,0,i);let l=void 0,h=void 0;a||(void 0===s||s.truncated||void 0!==s.sha?(l=(async()=>{let t=s,o=t&&t.commits.get(e.sha);return void 0!==o&&void 0!==o.previousSha||(o=(t=await container_Container.git.getLog(e.repoPath,{maxCount:container_Container.config.advanced.maxListItems,ref:e.sha}))&&t.commits.get(e.sha))&&(o.nextSha=e.nextSha),void 0===o||void 0===o.previousSha?xi:new KeyCommandQuickPickItem(Mi.ShowQuickCommitDetails,[o.previousUri,{repoLog:t,sha:o.previousSha,goBackCommand:i}])}),h=(async()=>{let t=s,o=t&&t.commits.get(e.sha);if(void 0===o||void 0===o.nextSha){t=void 0,o=void 0;const i=await container_Container.git.getLog(e.repoPath,{maxCount:1,reverse:!0,ref:e.sha}),s=i&&Ee.first(i.commits.values());void 0!==s&&s.sha!==e.sha&&((o=e).nextSha=s.sha)}return void 0===o||void 0===o.nextSha?xi:new KeyCommandQuickPickItem(Mi.ShowQuickCommitDetails,[o.nextUri,{repoLog:t,sha:o.nextSha,goBackCommand:i}])})):(l=void 0===e.previousSha?void 0:new KeyCommandQuickPickItem(Mi.ShowQuickCommitDetails,[e.previousUri,{repoLog:s,sha:e.previousSha,goBackCommand:i}]),h=void 0===e.nextSha?void 0:new KeyCommandQuickPickItem(Mi.ShowQuickCommitDetails,[e.nextUri,{repoLog:s,sha:e.nextSha,goBackCommand:i}])));const d=await container_Container.keyboard.beginScope({left:i,",":l,".":h}),m=await r.window.showQuickPick(n,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${e.shortSha} ${De.pad(D.Dot,1,1)} ${e.author?`${e.author}, `:""}${e.formattedDate} ${De.pad(D.Dot,1,1)} ${e.getShortMessage()}`,ignoreFocusOut:Gi(),onDidSelectItem:e=>{d.setKeyCommand("right",e),"function"==typeof e.onDidSelect&&e.onDidSelect()}});return await d.dispose(),m}}.show(i.commit,t,i.goBackCommand,e,i.repoLog);if(void 0===o)return;return o instanceof commitQuickPick_CommitWithFileStatusQuickPickItem?r.commands.executeCommand(Mi.ShowQuickCommitFileDetails,o.commit.toGitUri(),{commit:o.commit,sha:o.sha,goBackCommand:e}):o.execute()}catch(e){return logger_Logger.error(e,"ShowQuickCommitDetailsCommand"),messages_Messages.showGenericErrorMessage("Unable to show commit details")}}};Vo=s([Wi()],Vo);let jo=class ShowQuickCommitFileDetailsCommand extends ActiveEditorCachedCommand{constructor(){super([Mi.ShowQuickCommitFileDetails,Mi.ShowQuickRevisionDetails])}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Mi.ShowQuickCommitFileDetails,t)}async preExecute(e,t={}){if(e.command===Mi.ShowQuickRevisionDetails&&void 0!==e.editor){t=Object.assign({},t);const i=await gitUri_GitUri.fromUri(e.editor.document.uri);t.sha=i.sha}return"viewItem"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,qi(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return;let o=i.commit&&i.commit.workingFileName;const s=await gitUri_GitUri.fromUri(t);if(void 0===(i=Object.assign({},i)).sha){if(null==e)return;const t=e.selection.active.line;if(t<0)return;try{const e=await container_Container.git.getBlameForLine(s,t);if(void 0===e)return messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to show commit file details");if(e.commit.isUncommitted)return messages_Messages.showLineUncommittedWarningMessage("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit,o=G.relative(i.commit.repoPath,s.fsPath)}catch(e){return logger_Logger.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),r.window.showErrorMessage("Unable to show commit file details. See output channel for more details")}}try{if((void 0===i.commit||!i.commit.isFile)&&(void 0!==i.commit&&(o=void 0),void 0!==i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),void 0===i.commit&&(i.fileLog=void 0)),void 0===i.fileLog&&(i.commit=await container_Container.git.getLogCommitForFile(void 0===i.commit?s.repoPath:i.commit.repoPath,s.fsPath,{ref:i.sha}),void 0===i.commit)))return messages_Messages.showCommitNotFoundWarningMessage("Unable to show commit file details");if(void 0===i.commit)return messages_Messages.showCommitNotFoundWarningMessage("Unable to show commit file details");i.commit.workingFileName=o,[i.commit.workingFileName]=await container_Container.git.findWorkingFileName(i.commit);const e=gitService_GitService.shortenSha(i.sha);void 0===i.goBackCommand&&(i.goBackCommand=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to details of ${D.Space}$(git-commit) ${e}`},Mi.ShowQuickCommitDetails,[i.commit.toGitUri(),{commit:i.commit,sha:i.sha}]));const n=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to details of ${D.Space}$(file-text) ${G.basename(i.commit.fileName)} in ${D.Space}$(git-commit) ${e}`},Mi.ShowQuickCommitFileDetails,[i.commit.toGitUri(),i]),a=await class commitFileQuickPick_CommitFileQuickPick{static async show(e,t,i,o,s){const n=[],a=e.isStash,c=e.workingFileName&&G.basename(e.workingFileName)||G.basename(e.fileName),l=e.isUncommitted;if(l){const t=await container_Container.git.getRecentLogCommitForFile(void 0,e.uri.fsPath);if(void 0===t)return;e=t}await e.resolvePreviousFileSha(),a&&n.push(new commitFileQuickPick_ApplyCommitFileChangesCommandQuickPickItem(e)),e.previousFileShortSha&&n.push(new commonQuickPicks_CommandQuickPickItem({label:"$(git-compare) Open Changes",description:`${De.pad(D.Dash,2,3)} $(git-commit) ${e.previousFileShortSha} ${D.Space} $(git-compare) ${D.Space} $(git-commit) ${e.shortSha}`},Mi.DiffWithPrevious,[e.uri,{commit:e}])),e.workingFileName&&n.push(new commonQuickPicks_CommandQuickPickItem({label:"$(git-compare) Open Changes with Working File",description:`${De.pad(D.Dash,2,3)} $(git-commit) ${e.shortSha} ${D.Space} $(git-compare) ${D.Space} $(file-text) ${c}`},Mi.DiffWithWorking,[gitUri_GitUri.resolveToUri(e.workingFileName,e.repoPath),{commit:e}])),e.workingFileName&&"D"!==e.status&&n.push(new commitFileQuickPick_OpenCommitFileCommandQuickPickItem(e)),n.push(new commitFileQuickPick_OpenCommitFileRevisionCommandQuickPickItem(e));const h=await container_Container.git.getRemotes(e.repoPath);if(h.length){if(e.workingFileName&&"D"!==e.status){const t=await container_Container.git.getBranch(e.repoPath);void 0!==t&&n.push(new remotesQuickPick_OpenRemotesCommandQuickPickItem(h,{type:"file",fileName:e.workingFileName,branch:t.name},o))}a||n.push(new remotesQuickPick_OpenRemotesCommandQuickPickItem(h,{type:"revision",fileName:e.fileName,commit:e},o))}a||(n.push(new commitFileQuickPick_ApplyCommitFileChangesCommandQuickPickItem(e)),n.push(new commonQuickPicks_CommandQuickPickItem({label:"$(clippy) Copy Commit ID to Clipboard",description:`${De.pad(D.Dash,2,3)} ${e.shortSha}`},Mi.CopyShaToClipboard,[t,{sha:e.sha}])),n.push(new commonQuickPicks_CommandQuickPickItem({label:"$(clippy) Copy Commit Message to Clipboard",description:`${De.pad(D.Dash,2,3)} ${e.getShortMessage()}`},Mi.CopyMessageToClipboard,[t,{message:e.message,sha:e.sha}]))),e.workingFileName&&n.push(new commonQuickPicks_CommandQuickPickItem({label:"$(history) Show File History",description:`${De.pad(D.Dash,2,3)} of ${G.basename(e.fileName)}`},Mi.ShowQuickFileHistory,[gitUri_GitUri.resolveToUri(e.workingFileName,e.repoPath),{fileLog:s,goBackCommand:o}])),a||(n.push(new commonQuickPicks_CommandQuickPickItem({label:`$(history) Show ${e.workingFileName?"Previous ":""}File History`,description:`${De.pad(D.Dash,2,3)} of ${G.basename(e.fileName)} ${De.pad(D.Dot,1,1)} from ${D.Space}$(git-commit) ${e.shortSha}`},Mi.ShowQuickFileHistory,[e.toGitUri(),{goBackCommand:o}])),n.push(new commonQuickPicks_CommandQuickPickItem({label:"$(git-commit) Show Commit Details",description:`${De.pad(D.Dash,2,3)} $(git-commit) ${e.shortSha}`},Mi.ShowQuickCommitDetails,[e.toGitUri(),{commit:e,sha:e.sha,goBackCommand:o}]))),i&&n.splice(0,0,i);let d=void 0,m=void 0;a||(void 0===s||s.truncated||void 0!==s.sha?(d=(async()=>{let o=s,r=o&&o.commits.get(e.sha);if(void 0===r||void 0===r.previousSha){if(void 0===(o=await container_Container.git.getLogForFile(e.repoPath,t.fsPath,{maxCount:container_Container.config.advanced.maxListItems,ref:e.sha,renames:!0})))return xi;void 0===(r=o&&o.commits.get(e.sha))&&e.isMerge&&(r=Ee.first(o.commits.values())),r&&(r.nextSha=e.nextSha,r.nextFileName=e.nextFileName)}return void 0===r||void 0===r.previousSha?xi:new KeyCommandQuickPickItem(Mi.ShowQuickCommitFileDetails,[r.previousUri,{fileLog:o,sha:r.previousSha,goBackCommand:i}])}),m=(async()=>{let o=s,r=o&&o.commits.get(e.sha);if(void 0===r||void 0===r.nextSha){o=void 0,r=void 0;const i=await container_Container.git.findNextCommit(e.repoPath,t.fsPath,e.sha);void 0!==i&&i.sha!==e.sha&&((r=e).nextSha=i.sha,r.nextFileName=i.originalFileName||i.fileName)}return void 0===r||void 0===r.nextSha?xi:new KeyCommandQuickPickItem(Mi.ShowQuickCommitFileDetails,[r.nextUri,{fileLog:o,sha:r.nextSha,goBackCommand:i}])})):(d=void 0===e.previousSha?void 0:new KeyCommandQuickPickItem(Mi.ShowQuickCommitFileDetails,[e.previousUri,{fileLog:s,sha:e.previousSha,goBackCommand:i}]),m=void 0===e.nextSha?void 0:new KeyCommandQuickPickItem(Mi.ShowQuickCommitFileDetails,[e.nextUri,{fileLog:s,sha:e.nextSha,goBackCommand:i}])));const u=await container_Container.keyboard.beginScope({left:i,",":d,".":m}),g=await r.window.showQuickPick(n,{matchOnDescription:!0,placeHolder:`${e.getFormattedPath()} ${De.pad(D.Dot,1,1)} ${l?`Uncommitted ${D.ArrowRightHollow} `:""}${e.shortSha} ${De.pad(D.Dot,1,1)} ${e.author}, ${e.formattedDate} ${De.pad(D.Dot,1,1)} ${e.getShortMessage()}`,ignoreFocusOut:Gi(),onDidSelectItem:e=>{u.setKeyCommand("right",e)}});return await u.dispose(),g}}.show(i.commit,t,i.goBackCommand,n,i.fileLog);if(void 0===a)return;return a instanceof commonQuickPicks_CommandQuickPickItem?a.execute():void 0}catch(e){return logger_Logger.error(e,"ShowQuickCommitFileDetailsCommand"),messages_Messages.showGenericErrorMessage("Unable to show commit file details")}}};jo=s([Wi()],jo);let zo=class ShowQuickCurrentBranchHistoryCommand extends ActiveEditorCachedCommand{constructor(){super(Mi.ShowQuickCurrentBranchHistory)}async execute(e,t,i={}){t=Hi(t,e);try{const o=await Vi(t,e,`Show current branch history for which repository${D.Ellipsis}`);if(!o)return;const s=await container_Container.git.getBranch(o);if(void 0===s)return;return r.commands.executeCommand(Mi.ShowQuickBranchHistory,t,{branch:s.name,repoPath:o,goBackCommand:i.goBackCommand})}catch(e){return logger_Logger.error(e,"ShowQuickCurrentBranchHistoryCommand"),messages_Messages.showGenericErrorMessage("Unable to show branch history")}}};zo=s([Wi()],zo);let qo=class ShowQuickFileHistoryCommand extends ActiveEditorCachedCommand{constructor(){super([Mi.ShowFileHistoryInView,Mi.ShowQuickFileHistory])}async preExecute(e,t={}){return e.command===Mi.ShowFileHistoryInView&&((t=Object.assign({},t)).showInView=!0),this.execute(e.editor,e.uri,t)}async execute(e,t,i={}){if(null==(t=Hi(t,e)))return r.commands.executeCommand(Mi.ShowQuickCurrentBranchHistory);const o=await gitUri_GitUri.fromUri(t);if(i.showInView)return void await container_Container.fileHistoryView.showHistoryForUri(o);i=Object.assign({},i);const s=`${o.getFormattedPath({suffix:i.branchOrTag?` (${i.branchOrTag.name})`:void 0})}${o.sha?` ${De.pad(D.Dot,1,1)} ${o.shortSha}`:""}`,n=fileHistoryQuickPick_FileHistoryQuickPick.showProgress(s);try{if(void 0===i.log&&(i.log=await container_Container.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,range:i.range,ref:i.branchOrTag&&i.branchOrTag.ref||o.sha}),void 0===i.log))return i.branchOrTag?r.window.showWarningMessage(`The file could not be found in ${i.branchOrTag.name}`):messages_Messages.showFileNotUnderSourceControlWarningMessage("Unable to show file history");if(void 0!==n&&n.token.isCancellationRequested)return;let e=void 0;if(i.log.truncated){const s=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${De.pad(D.Dash,2,3)} shows ${i.log.maxCount} newer commits`},Mi.ShowQuickFileHistory,[o,Object.assign({},i,{log:void 0})]),r=Ee.last(i.log.commits.values());null!=r&&(e=new commonQuickPicks_CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${De.pad(D.Dash,2,3)} shows ${i.log.maxCount} older commits`},Mi.ShowQuickFileHistory,[new gitUri_GitUri(t,r),Object.assign({},i,{log:void 0,nextPageCommand:s})]))}const a=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to history of ${D.Space}$(file-text) ${G.basename(o.fsPath)}${i.branchOrTag?` from ${D.Space}${i.branchOrTag instanceof GitTag?"$(tag)":"$(git-branch)"} ${i.branchOrTag.name}`:o.sha?` from ${D.Space}$(git-commit) ${o.shortSha}`:""}`},Mi.ShowQuickFileHistory,[t,i]),c=await fileHistoryQuickPick_FileHistoryQuickPick.show(i.log,o,s,{progressCancellation:n,currentCommand:a,goBackCommand:i.goBackCommand,nextPageCommand:i.nextPageCommand,previousPageCommand:e,showAllCommand:void 0!==i.log&&i.log.truncated?new commonQuickPicks_CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${De.pad(D.Dash,2,3)} this may take a while`},Mi.ShowQuickFileHistory,[t,Object.assign({},i,{log:void 0,maxCount:0})]):void 0,showInViewCommand:void 0!==i.log?new commonQuickPicks_ShowFileHistoryInViewQuickPickItem(o,i.branchOrTag&&i.branchOrTag.ref||o.sha):void 0});if(void 0===c)return;if(c instanceof commonQuickPicks_ChooseFromBranchesAndTagsQuickPickItem){const e=await c.execute();if(void 0===e)return;return e instanceof commonQuickPicks_CommandQuickPickItem?e.execute():r.commands.executeCommand(Mi.ShowQuickFileHistory,o,Object.assign({},i,{log:void 0,branchOrTag:e.item,goBackCommand:a}))}return c instanceof commonQuickPicks_CommandQuickPickItem?c.execute():r.commands.executeCommand(Mi.ShowQuickCommitFileDetails,c.commit.toGitUri(),{commit:c.commit,fileLog:i.log,sha:c.commit.sha,goBackCommand:a})}catch(e){return logger_Logger.error(e,"ShowQuickFileHistoryCommand"),messages_Messages.showGenericErrorMessage("Unable to show file history")}finally{n&&n.cancel()}}};qo=s([Wi()],qo);let Yo=class ShowQuickRepoStatusCommand extends ActiveEditorCachedCommand{constructor(){super(Mi.ShowQuickRepoStatus)}async execute(e,t,i={}){t=Hi(t,e);try{const o=await Vi(t,e,`Show status for which repository${D.Ellipsis}`);if(!o)return;const s=await container_Container.git.getStatusForRepo(o);if(void 0===s)return r.window.showWarningMessage("Unable to show repository status");const n=await class repoStatusQuickPick_RepoStatusQuickPick{static computeStatus(e){let t=0,i=0,o=0,s=0,r=0,n=0;const a=[],c=[];for(const l of e){switch(l.indexStatus){case"A":case"?":t++,a.push(l);break;case"D":r++;break;case void 0:break;default:o++,a.push(l)}switch(l.workingTreeStatus){case"A":case"?":i++,c.push(l);break;case"D":n++;break;case void 0:break;default:s++,c.push(l)}}const l=t+o+r,h=i+s+n;return{staged:l,stagedStatus:l>0?`+${t} ~${o} -${r}`:"",stagedAddsAndChanges:a,unstaged:h,unstagedStatus:h>0?`+${i} ~${s} -${n}`:"",unstagedAddsAndChanges:c}}static async show(e,t){const i=[...Ee.flatMap(e.files,e=>void 0!==e.workingTreeStatus&&void 0!==e.indexStatus?[new repoStatusQuickPick_OpenStatusFileCommandQuickPickItem(e.with({indexStatus:null}),e.indexStatus),new repoStatusQuickPick_OpenStatusFileCommandQuickPickItem(e.with({workTreeStatus:null}))]:[new repoStatusQuickPick_OpenStatusFileCommandQuickPickItem(e)])];i.sort((e,t)=>(e.status.staged?-1:1)-(t.status.staged?-1:1)||e.status.fileName.localeCompare(t.status.fileName,void 0,{numeric:!0,sensitivity:"base"}));const o=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to ${D.Space}$(git-branch) ${e.branch} status`},Mi.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]),s=this.computeStatus(e.files);if(s.staged>0){let o=0;const r=s.unstaged>0?e.files.findIndex(e=>!e.staged):-1;r>-1&&(i.splice(r,0,new commonQuickPicks_CommandQuickPickItem({label:"Unstaged Files",description:s.unstagedStatus},Mi.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(r,0,new repoStatusQuickPick_OpenStatusFilesCommandQuickPickItem(s.stagedAddsAndChanges,{label:`${D.Space.repeat(4)} $(file-symlink-file) Open Staged Files`,description:""})),i.push(new repoStatusQuickPick_OpenStatusFilesCommandQuickPickItem(s.unstagedAddsAndChanges,{label:`${D.Space.repeat(4)} $(file-symlink-file) Open Unstaged Files`,description:""}))),i.splice(o++,0,new commonQuickPicks_CommandQuickPickItem({label:"Staged Files",description:s.stagedStatus},Mi.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]))}else e.files.some(e=>!e.staged)&&i.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:"Unstaged Files",description:s.unstagedStatus},Mi.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]));e.files.length?(i.push(new repoStatusQuickPick_OpenStatusFilesCommandQuickPickItem(s.stagedAddsAndChanges.concat(s.unstagedAddsAndChanges))),i.push(new commonQuickPicks_CommandQuickPickItem({label:"$(x) Close Unchanged Files",description:""},Mi.CloseUnchangedFiles))):i.push(new commonQuickPicks_CommandQuickPickItem({label:"No changes in the working tree",description:""},Mi.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:"$(inbox) Show Stashed Changes",description:`${De.pad(D.Dash,2,3)} shows stashed changes in the repository`},Mi.ShowQuickStashList,[gitUri_GitUri.fromRepoPath(e.repoPath),{goBackCommand:o}])),e.upstream&&e.state.ahead&&i.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:`$(cloud-upload)${D.Space} ${e.state.ahead} Commit${e.state.ahead>1?"s":""} ahead of ${D.Space}$(git-branch) ${e.upstream}`,description:`${De.pad(D.Dash,2,3)} shows commits in ${D.Space}$(git-branch) ${e.branch} but not ${D.Space}$(git-branch) ${e.upstream}`},Mi.ShowQuickBranchHistory,[gitUri_GitUri.fromRepoPath(e.repoPath,`${e.upstream}..${e.ref}`),{branch:e.ref,maxCount:0,goBackCommand:o}])),e.upstream&&e.state.behind&&i.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:`$(cloud-download)${D.Space} ${e.state.behind} Commit${e.state.behind>1?"s":""} behind ${D.Space}$(git-branch) ${e.upstream}`,description:`${De.pad(D.Dash,2,3)} shows commits in ${D.Space}$(git-branch) ${e.upstream} but not ${D.Space}$(git-branch) ${e.branch}${e.sha?` (since ${D.Space}$(git-commit) ${gitService_GitService.shortenSha(e.sha)})`:""}`},Mi.ShowQuickBranchHistory,[gitUri_GitUri.fromRepoPath(e.repoPath,`${e.ref}..${e.upstream}`),{branch:e.upstream,maxCount:0,goBackCommand:o}])),!e.upstream||e.state.ahead||e.state.behind||i.splice(0,0,new commonQuickPicks_CommandQuickPickItem({label:`$(git-branch) ${e.branch} is up-to-date with ${D.Space}$(git-branch) ${e.upstream}`,description:""},Mi.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),t&&i.splice(0,0,t);const n=await container_Container.keyboard.beginScope({left:t}),a=await r.window.showQuickPick(i,{matchOnDescription:!0,placeHolder:`status of ${e.branch}${e.upstream?` ${De.pad(D.ArrowLeftRightLong,1,1)} ${e.upstream}`:""}`,ignoreFocusOut:Gi(),onDidSelectItem:e=>{n.setKeyCommand("right",e)}});return await n.dispose(),a}}.show(s,i.goBackCommand);if(void 0===n)return;return n instanceof commonQuickPicks_CommandQuickPickItem?n.execute():void 0}catch(e){return logger_Logger.error(e,"ShowQuickRepoStatusCommand"),messages_Messages.showGenericErrorMessage("Unable to show repository status")}}};Yo=s([Wi()],Yo);let Ko=class ShowQuickStashListCommand extends ActiveEditorCachedCommand{constructor(){super(Mi.ShowQuickStashList)}async execute(e,t,i={}){t=Hi(t,e);const o=stashListQuickPick_StashListQuickPick.showProgress("list");try{const s=await Vi(t,e,`Show stashed changes for which repository${D.Ellipsis}`);if(!s)return;const n=await container_Container.git.getStashList(s);if(void 0===n)return r.window.showWarningMessage("Unable to show stashed changes");if(o.token.isCancellationRequested)return;const a=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to stashed changes`},Mi.ShowQuickStashList,[t,{goBackCommand:i.goBackCommand}]),c=await stashListQuickPick_StashListQuickPick.show(n,"list",o,i.goBackCommand,a);if(void 0===c)return;return c instanceof commonQuickPicks_CommandQuickPickItem?c.execute():r.commands.executeCommand(Mi.ShowQuickCommitDetails,c.commit.toGitUri(),{commit:c.commit,sha:c.commit.sha,goBackCommand:a})}catch(e){return logger_Logger.error(e,"ShowQuickStashListCommand"),messages_Messages.showGenericErrorMessage("Unable to show stashed changes")}finally{o.cancel()}}};Ko=s([Wi()],Ko);let Xo=class ShowViewCommand extends common_Command{constructor(){super([Mi.ShowCompareView,Mi.ShowFileHistoryView,Mi.ShowLineHistoryView,Mi.ShowRepositoriesView,Mi.ShowSearchView])}async preExecute(e){return this.execute(e.command)}execute(e){switch(e){case Mi.ShowCompareView:return container_Container.compareView.show();case Mi.ShowFileHistoryView:return container_Container.fileHistoryView.show();case Mi.ShowLineHistoryView:return container_Container.lineHistoryView.show();case Mi.ShowRepositoriesView:return container_Container.repositoriesView.show();case Mi.ShowSearchView:return container_Container.searchView.show()}}};Xo=s([Wi()],Xo);let Zo=class StashApplyCommand extends common_Command{constructor(){super(Mi.StashApply)}async preExecute(e,t={confirm:!0,deleteAfter:!1}){return qi(e)?((t=Object.assign({},t)).stashItem=e.node.commit,this.execute(t)):(Ki(e)&&((t=Object.assign({},t)).repoPath=e.node.repo.path),this.execute(t))}async execute(e={confirm:!0,deleteAfter:!1}){if(void 0===(e=Object.assign({},e)).stashItem||void 0===e.stashItem.stashName){if(void 0===e.repoPath&&(e.repoPath=await ji(void 0,`Apply stashed changes from which repository${D.Ellipsis}`,e.goBackCommand)),!e.repoPath)return;const t=stashListQuickPick_StashListQuickPick.showProgress("apply");try{const i=await container_Container.git.getStashList(e.repoPath);if(void 0===i)return r.window.showInformationMessage("There are no stashed changes");if(t.token.isCancellationRequested)return;const o=new commonQuickPicks_CommandQuickPickItem({label:`go back ${D.ArrowBack}`,description:`${De.pad(D.Dash,2,3)} to apply stashed changes`},Mi.StashApply,[e]),s=await stashListQuickPick_StashListQuickPick.show(i,"apply",t,e.goBackCommand,o);if(s instanceof commonQuickPicks_CommandQuickPickItem)return s.execute();if(void 0===s)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.goBackCommand=o,e.stashItem=s.commit}finally{t.cancel()}}try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${D.Ellipsis}`:e.stashItem.message,i=await r.window.showWarningMessage(`Apply stashed changes '${t}' to your working tree?`,{title:"Yes, delete after applying"},{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"No"===i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.deleteAfter="Yes"!==i.title}return await container_Container.git.stashApply(e.stashItem.repoPath,e.stashItem.stashName,e.deleteAfter)}catch(e){return logger_Logger.error(e,"StashApplyCommand"),e.message.includes("Your local changes to the following files would be overwritten by merge")?r.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten."):e.message.includes("Auto-merging")&&e.message.includes("CONFLICT")?r.window.showInformationMessage("Stash applied with conflicts"):messages_Messages.showGenericErrorMessage(`Unable to apply stash â ${e.message.trim().replace(/\n+?/g,"; ")}`)}}};Zo=s([Wi()],Zo);let Jo=class StashDeleteCommand extends common_Command{constructor(){super(Mi.StashDelete)}async preExecute(e,t={confirm:!0}){return qi(e)?((t=Object.assign({},t)).stashItem=e.node.commit,this.execute(t)):this.execute(t)}async execute(e={confirm:!0}){if(void 0!==(e=Object.assign({},e)).stashItem&&void 0!==e.stashItem.stashName&&void 0!==e.stashItem.repoPath){void 0===e.confirm&&(e.confirm=!0);try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${D.Ellipsis}`:e.stashItem.message,i=await r.window.showWarningMessage(`Delete stashed changes '${t}'?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"Yes"!==i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute()}return await container_Container.git.stashDelete(e.stashItem.repoPath,e.stashItem.stashName)}catch(e){return logger_Logger.error(e,"StashDeleteCommand"),messages_Messages.showGenericErrorMessage("Unable to delete stash")}}}};Jo=s([Wi()],Jo);let es=class StashSaveCommand extends common_Command{constructor(){super([Mi.StashSave,Mi.StashSaveFiles])}async preExecute(e,t={}){return!function(e){if("viewItem"!==e.type)return!1;const t=e.node;return void 0!==t.file&&(void 0!==t.file.repoPath||void 0!==t.repoPath)}(e)?Ki(e)?(t=Object.assign({},t)).repoPath=e.node.repo.path:!function(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}(e)?"scm-states"===e.type?(t=Object.assign({},t)).uris=e.scmResourceStates.map(e=>e.resourceUri):"scm-groups"===e.type&&((t=Object.assign({},t)).uris=e.scmResourceGroups.reduce((e,t)=>e.concat(t.resourceStates.map(e=>e.resourceUri)),[])):(t=Object.assign({},t)).repoPath=e.node.repoPath:(t=Object.assign({},t)).uris=[gitUri_GitUri.fromFile(e.node.file,e.node.file.repoPath||e.node.repoPath)],this.execute(t)}async execute(e={}){const t=void 0!==(e=Object.assign({},e)).uris&&0!==e.uris.length?e.uris[0]:void 0;if(void 0===e.repoPath&&(e.repoPath=await ji(t,`Stash changes for which repository${D.Ellipsis}`,e.goBackCommand)),e.repoPath)try{return null==e.message&&(e.message=await r.window.showInputBox({prompt:"Please provide a stash message",placeHolder:"Stash message"}),void 0===e.message)?void 0===e.goBackCommand?void 0:e.goBackCommand.execute():await container_Container.git.stashSave(e.repoPath,e.message,e.uris)}catch(e){logger_Logger.error(e,"StashSaveCommand");const t=e&&e.message;return t.includes("newer version of Git")?r.window.showErrorMessage(`Unable to save stash. ${t}`):messages_Messages.showGenericErrorMessage("Unable to save stash")}}};es=s([Wi()],es);let ts=class SupportGitLensCommand extends common_Command{constructor(){super(Mi.SupportGitLens)}async execute(){return messages_Messages.showSupportGitLensMessage()}};ts=s([Wi()],ts);let is=class SwitchModeCommand extends common_Command{constructor(){super(Mi.SwitchMode)}async execute(){const e=await class modesQuickPick_ModesQuickPick{static async show(){const e=Object.keys(container_Container.config.modes);if(0===e.length)return;const t=container_Container.config.mode.active,i=e.map(e=>{const i=container_Container.config.modes[e];return{label:`${t===e?"$(check)Â Â ":"Â Â Â Â Â "}${i.name} mode`,description:i.description?`Â ${D.Dash}Â  ${i.description}`:"",key:e}});return t&&i.splice(0,0,{label:`Exit ${container_Container.config.modes[t].name} mode`,key:void 0}),await r.window.showQuickPick(i,{placeHolder:"select a GitLens mode to enter"})}}.show();void 0!==e&&await io.update(io.name("mode")("active").value,e.key,r.ConfigurationTarget.Global)}};is=s([Wi()],is);let os=class ToggleReviewModeCommand extends common_Command{constructor(){super(Mi.ToggleReviewMode)}async execute(){if(!Object.keys(container_Container.config.modes).includes("review"))return;const e="review"===container_Container.config.mode.active?void 0:"review";await io.update(io.name("mode")("active").value,e,r.ConfigurationTarget.Global)}};os=s([Wi()],os);let ss=class ToggleZenModeCommand extends common_Command{constructor(){super(Mi.ToggleZenMode)}async execute(){if(!Object.keys(container_Container.config.modes).includes("zen"))return;const e="zen"===container_Container.config.mode.active?void 0:"zen";await io.update(io.name("mode")("active").value,e,r.ConfigurationTarget.Global)}};ss=s([Wi()],ss);let rs=class ToggleCodeLensCommand extends common_Command{constructor(){super(Mi.ToggleCodeLens)}execute(){return container_Container.codeLens.toggleCodeLens()}};async function ns(e){const t=process.hrtime();N(F.Enabled,!0),logger_Logger.configure(e,e=>e instanceof gitUri_GitUri?`GitUri(${e.toString(!0)}${e.repoPath?` repoPath=${e.repoPath}`:""}${e.sha?` sha=${e.sha}`:""})`:e instanceof commit_GitCommit?`GitCommit(${e.sha?` sha=${e.sha}`:""}${e.repoPath?` repoPath=${e.repoPath}`:""})`:void 0);const i=r.extensions.getExtension(S).packageJSON.version;if(!r.workspace.getConfiguration("git",null).get("enabled",!0))return logger_Logger.log(`GitLens(v${i}) was NOT activated -- "git.enabled": false`),N(F.Enabled,!1),void messages_Messages.showGitDisabledErrorMessage();configuration_Configuration.configure(e);const s=io.get(),n=e.globalState.get(T.GitLensVersion);await async function(e,t){if(void 0===t)return;const i=Ge.fromString(t);try{1!==Ge.compare(i,Ge.from(9,0,0))&&(await io.migrate("gitExplorer.autoRefresh",io.name("views")("repositories")("autoRefresh").value),await io.migrate("gitExplorer.branches.layout",io.name("views")("repositories")("branches")("layout").value),await io.migrate("gitExplorer.enabled",io.name("views")("repositories")("enabled").value),await io.migrate("gitExplorer.files.compact",io.name("views")("repositories")("files")("compact").value),await io.migrate("gitExplorer.files.layout",io.name("views")("repositories")("files")("layout").value),await io.migrate("gitExplorer.files.threshold",io.name("views")("repositories")("files")("threshold").value),await io.migrate("gitExplorer.includeWorkingTree",io.name("views")("repositories")("includeWorkingTree").value),await io.migrate("gitExplorer.location",io.name("views")("repositories")("location").value),await io.migrate("gitExplorer.showTrackingBranch",io.name("views")("repositories")("showTrackingBranch").value),await io.migrate("historyExplorer.avatars",io.name("views")("fileHistory")("avatars").value),await io.migrate("historyExplorer.enabled",io.name("views")("fileHistory")("enabled").value),await io.migrate("historyExplorer.location",io.name("views")("fileHistory")("location").value),await io.migrate("historyExplorer.avatars",io.name("views")("lineHistory")("avatars").value),await io.migrate("historyExplorer.enabled",io.name("views")("lineHistory")("enabled").value),await io.migrate("historyExplorer.location",io.name("views")("lineHistory")("location").value),await io.migrate("resultsExplorer.files.compact",io.name("views")("compare")("files")("compact").value),await io.migrate("resultsExplorer.files.layout",io.name("views")("compare")("files")("layout").value),await io.migrate("resultsExplorer.files.threshold",io.name("views")("compare")("files")("threshold").value),await io.migrate("resultsExplorer.location",io.name("views")("compare")("location").value),await io.migrate("resultsExplorer.files.compact",io.name("views")("search")("files")("compact").value),await io.migrate("resultsExplorer.files.layout",io.name("views")("search")("files")("layout").value),await io.migrate("resultsExplorer.files.threshold",io.name("views")("search")("files")("threshold").value),await io.migrate("resultsExplorer.location",io.name("views")("search")("location").value),await io.migrate("explorers.avatars",io.name("views")("avatars").value),await io.migrate("explorers.commitFileFormat",io.name("views")("commitFileFormat").value),await io.migrate("explorers.commitFormat",io.name("views")("commitFormat").value),await io.migrate("explorers.defaultItemLimit",io.name("views")("defaultItemLimit").value),await io.migrate("explorers.files.compact",io.name("views")("files")("compact").value),await io.migrate("explorers.files.layout",io.name("views")("files")("layout").value),await io.migrate("explorers.files.threshold",io.name("views")("files")("threshold").value),await io.migrate("explorers.stashFileFormat",io.name("views")("stashFileFormat").value),await io.migrate("explorers.stashFormat",io.name("views")("stashFormat").value),await io.migrate("explorers.statusFileFormat",io.name("views")("statusFileFormat").value),await io.migrate("modes",io.name("modes").value,{migrationFn:e=>{const t=Object.create(null);for(const i in e){const s=e[i],{explorers:r}=s,n=o(s,["explorers"]);t[i]=Object.assign({},n,{views:r})}return t}}))}catch(e){logger_Logger.error(e,"migrateSettings")}}(0,n);try{await gitService_GitService.initialize()}catch(e){return logger_Logger.error(e,`GitLens(v${i}).activate`),N(F.Enabled,!1),void(e.message.includes("Unable to find git")&&await r.window.showErrorMessage("GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that 'git.path' is pointed to its installed location."))}container_Container.initialize(e,s),function(e){for(const t of Qi)e.subscriptions.push(new t)}(e),function(e){if(-1!==gitService_GitService.compareGitVersion("2.2.0"))return;messages_Messages.showGitVersionUnsupportedErrorMessage(e)}(gitService_GitService.getGitVersion()),async function(e,t){if(void 0===t)return logger_Logger.log("GitLens first-time install"),void(container_Container.config.showWhatsNewAfterUpgrades&&await r.commands.executeCommand(Mi.ShowWelcomePage));t!==e&&logger_Logger.log(`GitLens upgraded from v${t} to v${e}`);const[i,o]=e.split("."),[s,n]=t.split(".");if(i===s&&o===n||i<s||i===s&&o<n)return;container_Container.config.showWhatsNewAfterUpgrades&&i!==s?await r.commands.executeCommand(Mi.ShowWelcomePage):await messages_Messages.showWhatsNewMessage(e)}(i,n),e.globalState.update(T.GitLensVersion,i),logger_Logger.log(`GitLens(v${i}) activated ${D.Dot} ${De.getDurationMilliseconds(t)} ms`)}function as(){}rs=s([Wi()],rs),i.d(t,"activate",function(){return ns}),i.d(t,"deactivate",function(){return as})}]);
//# sourceMappingURL=extension.js.map