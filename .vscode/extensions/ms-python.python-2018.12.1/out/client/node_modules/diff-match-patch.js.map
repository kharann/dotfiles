{"version":3,"sources":["../../webpack/bootstrap","../.././node_modules/diff-match-patch/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","diff_match_patch","this","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","Diff","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","text","chars","lineStart","lineEnd","lineArrayLength","line","undefined","String","fromCharCode","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","op","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","data","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","parseInt","isNaN","match_main","match_bitap_","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","slice","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","sign","toString"],"mappings":"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","file":"node_modules/diff-match-patch.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 877);\n","'use strict'\r\n\r\n/**\r\n * Diff Match and Patch\r\n *\r\n * Copyright 2006 Google Inc.\r\n * http://code.google.com/p/google-diff-match-patch/\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Computes the difference between two texts to create a patch.\r\n * Applies the patch onto another text, allowing for errors.\r\n * @author fraser@google.com (Neil Fraser)\r\n */\r\n\r\n/**\r\n * Class containing the diff, match and patch methods.\r\n * @constructor\r\n */\r\nfunction diff_match_patch() {\r\n\r\n  // Defaults.\r\n  // Redefine these in your program to override the defaults.\r\n\r\n  // Number of seconds to map a diff before giving up (0 for infinity).\r\n  this.Diff_Timeout = 1.0;\r\n  // Cost of an empty edit operation in terms of edit characters.\r\n  this.Diff_EditCost = 4;\r\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\r\n  this.Match_Threshold = 0.5;\r\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\r\n  // A match this many characters away from the expected location will add\r\n  // 1.0 to the score (0.0 is a perfect match).\r\n  this.Match_Distance = 1000;\r\n  // When deleting a large block of text (over ~64 characters), how close do\r\n  // the contents have to be to match the expected contents. (0.0 = perfection,\r\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\r\n  // end points of a delete need to match.\r\n  this.Patch_DeleteThreshold = 0.5;\r\n  // Chunk size for context length.\r\n  this.Patch_Margin = 4;\r\n\r\n  // The number of bits in an int.\r\n  this.Match_MaxBits = 32;\r\n}\r\n\r\n\r\n//  DIFF FUNCTIONS\r\n\r\n\r\n/**\r\n * The data structure representing a diff is an array of tuples:\r\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\r\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\r\n */\r\nvar DIFF_DELETE = -1;\r\nvar DIFF_INSERT = 1;\r\nvar DIFF_EQUAL = 0;\r\n\r\n/** @typedef {{0: number, 1: string}} */\r\ndiff_match_patch.Diff;\r\n\r\n\r\n/**\r\n * Find the differences between two texts.  Simplifies the problem by stripping\r\n * any common prefix or suffix off the texts before diffing.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\r\n *     then don't run a line-level diff first to identify the changed areas.\r\n *     Defaults to true, which does a faster, slightly less optimal diff.\r\n * @param {number} opt_deadline Optional time when the diff should be complete\r\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\r\n *     instead.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\r\n    opt_deadline) {\r\n  // Set a deadline by which time the diff must be complete.\r\n  if (typeof opt_deadline == 'undefined') {\r\n    if (this.Diff_Timeout <= 0) {\r\n      opt_deadline = Number.MAX_VALUE;\r\n    } else {\r\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\r\n    }\r\n  }\r\n  var deadline = opt_deadline;\r\n\r\n  // Check for null inputs.\r\n  if (text1 == null || text2 == null) {\r\n    throw new Error('Null input. (diff_main)');\r\n  }\r\n\r\n  // Check for equality (speedup).\r\n  if (text1 == text2) {\r\n    if (text1) {\r\n      return [[DIFF_EQUAL, text1]];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  if (typeof opt_checklines == 'undefined') {\r\n    opt_checklines = true;\r\n  }\r\n  var checklines = opt_checklines;\r\n\r\n  // Trim off common prefix (speedup).\r\n  var commonlength = this.diff_commonPrefix(text1, text2);\r\n  var commonprefix = text1.substring(0, commonlength);\r\n  text1 = text1.substring(commonlength);\r\n  text2 = text2.substring(commonlength);\r\n\r\n  // Trim off common suffix (speedup).\r\n  commonlength = this.diff_commonSuffix(text1, text2);\r\n  var commonsuffix = text1.substring(text1.length - commonlength);\r\n  text1 = text1.substring(0, text1.length - commonlength);\r\n  text2 = text2.substring(0, text2.length - commonlength);\r\n\r\n  // Compute the diff on the middle block.\r\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\r\n\r\n  // Restore the prefix and suffix.\r\n  if (commonprefix) {\r\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\r\n  }\r\n  if (commonsuffix) {\r\n    diffs.push([DIFF_EQUAL, commonsuffix]);\r\n  }\r\n  this.diff_cleanupMerge(diffs);\r\n  return diffs;\r\n};\r\n\r\n\r\n/**\r\n * Find the differences between two texts.  Assumes that the texts do not\r\n * have any common prefix or suffix.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\r\n *     line-level diff first to identify the changed areas.\r\n *     If true, then run a faster, slightly less optimal diff.\r\n * @param {number} deadline Time when the diff should be complete by.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\r\n    deadline) {\r\n  var diffs;\r\n\r\n  if (!text1) {\r\n    // Just add some text (speedup).\r\n    return [[DIFF_INSERT, text2]];\r\n  }\r\n\r\n  if (!text2) {\r\n    // Just delete some text (speedup).\r\n    return [[DIFF_DELETE, text1]];\r\n  }\r\n\r\n  var longtext = text1.length > text2.length ? text1 : text2;\r\n  var shorttext = text1.length > text2.length ? text2 : text1;\r\n  var i = longtext.indexOf(shorttext);\r\n  if (i != -1) {\r\n    // Shorter text is inside the longer text (speedup).\r\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\r\n             [DIFF_EQUAL, shorttext],\r\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\r\n    // Swap insertions for deletions if diff is reversed.\r\n    if (text1.length > text2.length) {\r\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\r\n    }\r\n    return diffs;\r\n  }\r\n\r\n  if (shorttext.length == 1) {\r\n    // Single character string.\r\n    // After the previous speedup, the character can't be an equality.\r\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\r\n  }\r\n\r\n  // Check to see if the problem can be split in two.\r\n  var hm = this.diff_halfMatch_(text1, text2);\r\n  if (hm) {\r\n    // A half-match was found, sort out the return data.\r\n    var text1_a = hm[0];\r\n    var text1_b = hm[1];\r\n    var text2_a = hm[2];\r\n    var text2_b = hm[3];\r\n    var mid_common = hm[4];\r\n    // Send both pairs off for separate processing.\r\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\r\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\r\n    // Merge the results.\r\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\r\n  }\r\n\r\n  if (checklines && text1.length > 100 && text2.length > 100) {\r\n    return this.diff_lineMode_(text1, text2, deadline);\r\n  }\r\n\r\n  return this.diff_bisect_(text1, text2, deadline);\r\n};\r\n\r\n\r\n/**\r\n * Do a quick line-level diff on both strings, then rediff the parts for\r\n * greater accuracy.\r\n * This speedup can produce non-minimal diffs.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {number} deadline Time when the diff should be complete by.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\r\n  // Scan the text on a line-by-line basis first.\r\n  var a = this.diff_linesToChars_(text1, text2);\r\n  text1 = a.chars1;\r\n  text2 = a.chars2;\r\n  var linearray = a.lineArray;\r\n\r\n  var diffs = this.diff_main(text1, text2, false, deadline);\r\n\r\n  // Convert the diff back to original text.\r\n  this.diff_charsToLines_(diffs, linearray);\r\n  // Eliminate freak matches (e.g. blank lines)\r\n  this.diff_cleanupSemantic(diffs);\r\n\r\n  // Rediff any replacement blocks, this time character-by-character.\r\n  // Add a dummy entry at the end.\r\n  diffs.push([DIFF_EQUAL, '']);\r\n  var pointer = 0;\r\n  var count_delete = 0;\r\n  var count_insert = 0;\r\n  var text_delete = '';\r\n  var text_insert = '';\r\n  while (pointer < diffs.length) {\r\n    switch (diffs[pointer][0]) {\r\n      case DIFF_INSERT:\r\n        count_insert++;\r\n        text_insert += diffs[pointer][1];\r\n        break;\r\n      case DIFF_DELETE:\r\n        count_delete++;\r\n        text_delete += diffs[pointer][1];\r\n        break;\r\n      case DIFF_EQUAL:\r\n        // Upon reaching an equality, check for prior redundancies.\r\n        if (count_delete >= 1 && count_insert >= 1) {\r\n          // Delete the offending records and add the merged ones.\r\n          diffs.splice(pointer - count_delete - count_insert,\r\n                       count_delete + count_insert);\r\n          pointer = pointer - count_delete - count_insert;\r\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\r\n          for (var j = a.length - 1; j >= 0; j--) {\r\n            diffs.splice(pointer, 0, a[j]);\r\n          }\r\n          pointer = pointer + a.length;\r\n        }\r\n        count_insert = 0;\r\n        count_delete = 0;\r\n        text_delete = '';\r\n        text_insert = '';\r\n        break;\r\n    }\r\n    pointer++;\r\n  }\r\n  diffs.pop();  // Remove the dummy entry at the end.\r\n\r\n  return diffs;\r\n};\r\n\r\n\r\n/**\r\n * Find the 'middle snake' of a diff, split the problem in two\r\n * and return the recursively constructed diff.\r\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {number} deadline Time at which to bail if not yet complete.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\r\n  // Cache the text lengths to prevent multiple calls.\r\n  var text1_length = text1.length;\r\n  var text2_length = text2.length;\r\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\r\n  var v_offset = max_d;\r\n  var v_length = 2 * max_d;\r\n  var v1 = new Array(v_length);\r\n  var v2 = new Array(v_length);\r\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\r\n  // integers and undefined.\r\n  for (var x = 0; x < v_length; x++) {\r\n    v1[x] = -1;\r\n    v2[x] = -1;\r\n  }\r\n  v1[v_offset + 1] = 0;\r\n  v2[v_offset + 1] = 0;\r\n  var delta = text1_length - text2_length;\r\n  // If the total number of characters is odd, then the front path will collide\r\n  // with the reverse path.\r\n  var front = (delta % 2 != 0);\r\n  // Offsets for start and end of k loop.\r\n  // Prevents mapping of space beyond the grid.\r\n  var k1start = 0;\r\n  var k1end = 0;\r\n  var k2start = 0;\r\n  var k2end = 0;\r\n  for (var d = 0; d < max_d; d++) {\r\n    // Bail out if deadline is reached.\r\n    if ((new Date()).getTime() > deadline) {\r\n      break;\r\n    }\r\n\r\n    // Walk the front path one step.\r\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\r\n      var k1_offset = v_offset + k1;\r\n      var x1;\r\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\r\n        x1 = v1[k1_offset + 1];\r\n      } else {\r\n        x1 = v1[k1_offset - 1] + 1;\r\n      }\r\n      var y1 = x1 - k1;\r\n      while (x1 < text1_length && y1 < text2_length &&\r\n             text1.charAt(x1) == text2.charAt(y1)) {\r\n        x1++;\r\n        y1++;\r\n      }\r\n      v1[k1_offset] = x1;\r\n      if (x1 > text1_length) {\r\n        // Ran off the right of the graph.\r\n        k1end += 2;\r\n      } else if (y1 > text2_length) {\r\n        // Ran off the bottom of the graph.\r\n        k1start += 2;\r\n      } else if (front) {\r\n        var k2_offset = v_offset + delta - k1;\r\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\r\n          // Mirror x2 onto top-left coordinate system.\r\n          var x2 = text1_length - v2[k2_offset];\r\n          if (x1 >= x2) {\r\n            // Overlap detected.\r\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Walk the reverse path one step.\r\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\r\n      var k2_offset = v_offset + k2;\r\n      var x2;\r\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\r\n        x2 = v2[k2_offset + 1];\r\n      } else {\r\n        x2 = v2[k2_offset - 1] + 1;\r\n      }\r\n      var y2 = x2 - k2;\r\n      while (x2 < text1_length && y2 < text2_length &&\r\n             text1.charAt(text1_length - x2 - 1) ==\r\n             text2.charAt(text2_length - y2 - 1)) {\r\n        x2++;\r\n        y2++;\r\n      }\r\n      v2[k2_offset] = x2;\r\n      if (x2 > text1_length) {\r\n        // Ran off the left of the graph.\r\n        k2end += 2;\r\n      } else if (y2 > text2_length) {\r\n        // Ran off the top of the graph.\r\n        k2start += 2;\r\n      } else if (!front) {\r\n        var k1_offset = v_offset + delta - k2;\r\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\r\n          var x1 = v1[k1_offset];\r\n          var y1 = v_offset + x1 - k1_offset;\r\n          // Mirror x2 onto top-left coordinate system.\r\n          x2 = text1_length - x2;\r\n          if (x1 >= x2) {\r\n            // Overlap detected.\r\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Diff took too long and hit the deadline or\r\n  // number of diffs equals number of characters, no commonality at all.\r\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\r\n};\r\n\r\n\r\n/**\r\n * Given the location of the 'middle snake', split the diff in two parts\r\n * and recurse.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {number} x Index of split point in text1.\r\n * @param {number} y Index of split point in text2.\r\n * @param {number} deadline Time at which to bail if not yet complete.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\r\n    deadline) {\r\n  var text1a = text1.substring(0, x);\r\n  var text2a = text2.substring(0, y);\r\n  var text1b = text1.substring(x);\r\n  var text2b = text2.substring(y);\r\n\r\n  // Compute both diffs serially.\r\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\r\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\r\n\r\n  return diffs.concat(diffsb);\r\n};\r\n\r\n\r\n/**\r\n * Split two texts into an array of strings.  Reduce the texts to a string of\r\n * hashes where each Unicode character represents one line.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\r\n *     An object containing the encoded text1, the encoded text2 and\r\n *     the array of unique strings.\r\n *     The zeroth element of the array of unique strings is intentionally blank.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\r\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\r\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\r\n\r\n  // '\\x00' is a valid character, but various debuggers don't like it.\r\n  // So we'll insert a junk entry to avoid generating a null character.\r\n  lineArray[0] = '';\r\n\r\n  /**\r\n   * Split a text into an array of strings.  Reduce the texts to a string of\r\n   * hashes where each Unicode character represents one line.\r\n   * Modifies linearray and linehash through being a closure.\r\n   * @param {string} text String to encode.\r\n   * @return {string} Encoded string.\r\n   * @private\r\n   */\r\n  function diff_linesToCharsMunge_(text) {\r\n    var chars = '';\r\n    // Walk the text, pulling out a substring for each line.\r\n    // text.split('\\n') would would temporarily double our memory footprint.\r\n    // Modifying text would create many large strings to garbage collect.\r\n    var lineStart = 0;\r\n    var lineEnd = -1;\r\n    // Keeping our own length variable is faster than looking it up.\r\n    var lineArrayLength = lineArray.length;\r\n    while (lineEnd < text.length - 1) {\r\n      lineEnd = text.indexOf('\\n', lineStart);\r\n      if (lineEnd == -1) {\r\n        lineEnd = text.length - 1;\r\n      }\r\n      var line = text.substring(lineStart, lineEnd + 1);\r\n      lineStart = lineEnd + 1;\r\n\r\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\r\n          (lineHash[line] !== undefined)) {\r\n        chars += String.fromCharCode(lineHash[line]);\r\n      } else {\r\n        chars += String.fromCharCode(lineArrayLength);\r\n        lineHash[line] = lineArrayLength;\r\n        lineArray[lineArrayLength++] = line;\r\n      }\r\n    }\r\n    return chars;\r\n  }\r\n\r\n  var chars1 = diff_linesToCharsMunge_(text1);\r\n  var chars2 = diff_linesToCharsMunge_(text2);\r\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\r\n};\r\n\r\n\r\n/**\r\n * Rehydrate the text in a diff from a string of line hashes to real lines of\r\n * text.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @param {!Array.<string>} lineArray Array of unique strings.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var chars = diffs[x][1];\r\n    var text = [];\r\n    for (var y = 0; y < chars.length; y++) {\r\n      text[y] = lineArray[chars.charCodeAt(y)];\r\n    }\r\n    diffs[x][1] = text.join('');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Determine the common prefix of two strings.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the start of each\r\n *     string.\r\n */\r\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\r\n  // Quick check for common null cases.\r\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\r\n    return 0;\r\n  }\r\n  // Binary search.\r\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n  var pointermin = 0;\r\n  var pointermax = Math.min(text1.length, text2.length);\r\n  var pointermid = pointermax;\r\n  var pointerstart = 0;\r\n  while (pointermin < pointermid) {\r\n    if (text1.substring(pointerstart, pointermid) ==\r\n        text2.substring(pointerstart, pointermid)) {\r\n      pointermin = pointermid;\r\n      pointerstart = pointermin;\r\n    } else {\r\n      pointermax = pointermid;\r\n    }\r\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n  }\r\n  return pointermid;\r\n};\r\n\r\n\r\n/**\r\n * Determine the common suffix of two strings.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the end of each string.\r\n */\r\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\r\n  // Quick check for common null cases.\r\n  if (!text1 || !text2 ||\r\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\r\n    return 0;\r\n  }\r\n  // Binary search.\r\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n  var pointermin = 0;\r\n  var pointermax = Math.min(text1.length, text2.length);\r\n  var pointermid = pointermax;\r\n  var pointerend = 0;\r\n  while (pointermin < pointermid) {\r\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\r\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\r\n      pointermin = pointermid;\r\n      pointerend = pointermin;\r\n    } else {\r\n      pointermax = pointermid;\r\n    }\r\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n  }\r\n  return pointermid;\r\n};\r\n\r\n\r\n/**\r\n * Determine if the suffix of one string is the prefix of another.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the end of the first\r\n *     string and the start of the second string.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\r\n  // Cache the text lengths to prevent multiple calls.\r\n  var text1_length = text1.length;\r\n  var text2_length = text2.length;\r\n  // Eliminate the null case.\r\n  if (text1_length == 0 || text2_length == 0) {\r\n    return 0;\r\n  }\r\n  // Truncate the longer string.\r\n  if (text1_length > text2_length) {\r\n    text1 = text1.substring(text1_length - text2_length);\r\n  } else if (text1_length < text2_length) {\r\n    text2 = text2.substring(0, text1_length);\r\n  }\r\n  var text_length = Math.min(text1_length, text2_length);\r\n  // Quick check for the worst case.\r\n  if (text1 == text2) {\r\n    return text_length;\r\n  }\r\n\r\n  // Start by looking for a single character match\r\n  // and increase length until no match is found.\r\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\r\n  var best = 0;\r\n  var length = 1;\r\n  while (true) {\r\n    var pattern = text1.substring(text_length - length);\r\n    var found = text2.indexOf(pattern);\r\n    if (found == -1) {\r\n      return best;\r\n    }\r\n    length += found;\r\n    if (found == 0 || text1.substring(text_length - length) ==\r\n        text2.substring(0, length)) {\r\n      best = length;\r\n      length++;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Do the two texts share a substring which is at least half the length of the\r\n * longer text?\r\n * This speedup can produce non-minimal diffs.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {Array.<string>} Five element Array, containing the prefix of\r\n *     text1, the suffix of text1, the prefix of text2, the suffix of\r\n *     text2 and the common middle.  Or null if there was no match.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\r\n  if (this.Diff_Timeout <= 0) {\r\n    // Don't risk returning a non-optimal diff if we have unlimited time.\r\n    return null;\r\n  }\r\n  var longtext = text1.length > text2.length ? text1 : text2;\r\n  var shorttext = text1.length > text2.length ? text2 : text1;\r\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\r\n    return null;  // Pointless.\r\n  }\r\n  var dmp = this;  // 'this' becomes 'window' in a closure.\r\n\r\n  /**\r\n   * Does a substring of shorttext exist within longtext such that the substring\r\n   * is at least half the length of longtext?\r\n   * Closure, but does not reference any external variables.\r\n   * @param {string} longtext Longer string.\r\n   * @param {string} shorttext Shorter string.\r\n   * @param {number} i Start index of quarter length substring within longtext.\r\n   * @return {Array.<string>} Five element Array, containing the prefix of\r\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\r\n   *     of shorttext and the common middle.  Or null if there was no match.\r\n   * @private\r\n   */\r\n  function diff_halfMatchI_(longtext, shorttext, i) {\r\n    // Start with a 1/4 length substring at position i as a seed.\r\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\r\n    var j = -1;\r\n    var best_common = '';\r\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\r\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\r\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\r\n                                               shorttext.substring(j));\r\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\r\n                                               shorttext.substring(0, j));\r\n      if (best_common.length < suffixLength + prefixLength) {\r\n        best_common = shorttext.substring(j - suffixLength, j) +\r\n            shorttext.substring(j, j + prefixLength);\r\n        best_longtext_a = longtext.substring(0, i - suffixLength);\r\n        best_longtext_b = longtext.substring(i + prefixLength);\r\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\r\n        best_shorttext_b = shorttext.substring(j + prefixLength);\r\n      }\r\n    }\r\n    if (best_common.length * 2 >= longtext.length) {\r\n      return [best_longtext_a, best_longtext_b,\r\n              best_shorttext_a, best_shorttext_b, best_common];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // First check if the second quarter is the seed for a half-match.\r\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\r\n                             Math.ceil(longtext.length / 4));\r\n  // Check again based on the third quarter.\r\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\r\n                             Math.ceil(longtext.length / 2));\r\n  var hm;\r\n  if (!hm1 && !hm2) {\r\n    return null;\r\n  } else if (!hm2) {\r\n    hm = hm1;\r\n  } else if (!hm1) {\r\n    hm = hm2;\r\n  } else {\r\n    // Both matched.  Select the longest.\r\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\r\n  }\r\n\r\n  // A half-match was found, sort out the return data.\r\n  var text1_a, text1_b, text2_a, text2_b;\r\n  if (text1.length > text2.length) {\r\n    text1_a = hm[0];\r\n    text1_b = hm[1];\r\n    text2_a = hm[2];\r\n    text2_b = hm[3];\r\n  } else {\r\n    text2_a = hm[0];\r\n    text2_b = hm[1];\r\n    text1_a = hm[2];\r\n    text1_b = hm[3];\r\n  }\r\n  var mid_common = hm[4];\r\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\r\n};\r\n\r\n\r\n/**\r\n * Reduce the number of edits by eliminating semantically trivial equalities.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\r\n  var changes = false;\r\n  var equalities = [];  // Stack of indices where equalities are found.\r\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\r\n  /** @type {?string} */\r\n  var lastequality = null;\r\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\r\n  var pointer = 0;  // Index of current position.\r\n  // Number of characters that changed prior to the equality.\r\n  var length_insertions1 = 0;\r\n  var length_deletions1 = 0;\r\n  // Number of characters that changed after the equality.\r\n  var length_insertions2 = 0;\r\n  var length_deletions2 = 0;\r\n  while (pointer < diffs.length) {\r\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\r\n      equalities[equalitiesLength++] = pointer;\r\n      length_insertions1 = length_insertions2;\r\n      length_deletions1 = length_deletions2;\r\n      length_insertions2 = 0;\r\n      length_deletions2 = 0;\r\n      lastequality = diffs[pointer][1];\r\n    } else {  // An insertion or deletion.\r\n      if (diffs[pointer][0] == DIFF_INSERT) {\r\n        length_insertions2 += diffs[pointer][1].length;\r\n      } else {\r\n        length_deletions2 += diffs[pointer][1].length;\r\n      }\r\n      // Eliminate an equality that is smaller or equal to the edits on both\r\n      // sides of it.\r\n      if (lastequality && (lastequality.length <=\r\n          Math.max(length_insertions1, length_deletions1)) &&\r\n          (lastequality.length <= Math.max(length_insertions2,\r\n                                           length_deletions2))) {\r\n        // Duplicate record.\r\n        diffs.splice(equalities[equalitiesLength - 1], 0,\r\n                     [DIFF_DELETE, lastequality]);\r\n        // Change second copy to insert.\r\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\r\n        // Throw away the equality we just deleted.\r\n        equalitiesLength--;\r\n        // Throw away the previous equality (it needs to be reevaluated).\r\n        equalitiesLength--;\r\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\r\n        length_insertions1 = 0;  // Reset the counters.\r\n        length_deletions1 = 0;\r\n        length_insertions2 = 0;\r\n        length_deletions2 = 0;\r\n        lastequality = null;\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n\r\n  // Normalize the diff.\r\n  if (changes) {\r\n    this.diff_cleanupMerge(diffs);\r\n  }\r\n  this.diff_cleanupSemanticLossless(diffs);\r\n\r\n  // Find any overlaps between deletions and insertions.\r\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\r\n  //   -> <del>abc</del>xxx<ins>def</ins>\r\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\r\n  //   -> <ins>def</ins>xxx<del>abc</del>\r\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\r\n  pointer = 1;\r\n  while (pointer < diffs.length) {\r\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\r\n        diffs[pointer][0] == DIFF_INSERT) {\r\n      var deletion = diffs[pointer - 1][1];\r\n      var insertion = diffs[pointer][1];\r\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\r\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\r\n      if (overlap_length1 >= overlap_length2) {\r\n        if (overlap_length1 >= deletion.length / 2 ||\r\n            overlap_length1 >= insertion.length / 2) {\r\n          // Overlap found.  Insert an equality and trim the surrounding edits.\r\n          diffs.splice(pointer, 0,\r\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\r\n          diffs[pointer - 1][1] =\r\n              deletion.substring(0, deletion.length - overlap_length1);\r\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\r\n          pointer++;\r\n        }\r\n      } else {\r\n        if (overlap_length2 >= deletion.length / 2 ||\r\n            overlap_length2 >= insertion.length / 2) {\r\n          // Reverse overlap found.\r\n          // Insert an equality and swap and trim the surrounding edits.\r\n          diffs.splice(pointer, 0,\r\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\r\n          diffs[pointer - 1][0] = DIFF_INSERT;\r\n          diffs[pointer - 1][1] =\r\n              insertion.substring(0, insertion.length - overlap_length2);\r\n          diffs[pointer + 1][0] = DIFF_DELETE;\r\n          diffs[pointer + 1][1] =\r\n              deletion.substring(overlap_length2);\r\n          pointer++;\r\n        }\r\n      }\r\n      pointer++;\r\n    }\r\n    pointer++;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Look for single edits surrounded on both sides by equalities\r\n * which can be shifted sideways to align the edit to a word boundary.\r\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\r\n  /**\r\n   * Given two strings, compute a score representing whether the internal\r\n   * boundary falls on logical boundaries.\r\n   * Scores range from 6 (best) to 0 (worst).\r\n   * Closure, but does not reference any external variables.\r\n   * @param {string} one First string.\r\n   * @param {string} two Second string.\r\n   * @return {number} The score.\r\n   * @private\r\n   */\r\n  function diff_cleanupSemanticScore_(one, two) {\r\n    if (!one || !two) {\r\n      // Edges are the best.\r\n      return 6;\r\n    }\r\n\r\n    // Each port of this function behaves slightly differently due to\r\n    // subtle differences in each language's definition of things like\r\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\r\n    // the choice has been made to use each language's native features\r\n    // rather than force total conformity.\r\n    var char1 = one.charAt(one.length - 1);\r\n    var char2 = two.charAt(0);\r\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\r\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\r\n    var whitespace1 = nonAlphaNumeric1 &&\r\n        char1.match(diff_match_patch.whitespaceRegex_);\r\n    var whitespace2 = nonAlphaNumeric2 &&\r\n        char2.match(diff_match_patch.whitespaceRegex_);\r\n    var lineBreak1 = whitespace1 &&\r\n        char1.match(diff_match_patch.linebreakRegex_);\r\n    var lineBreak2 = whitespace2 &&\r\n        char2.match(diff_match_patch.linebreakRegex_);\r\n    var blankLine1 = lineBreak1 &&\r\n        one.match(diff_match_patch.blanklineEndRegex_);\r\n    var blankLine2 = lineBreak2 &&\r\n        two.match(diff_match_patch.blanklineStartRegex_);\r\n\r\n    if (blankLine1 || blankLine2) {\r\n      // Five points for blank lines.\r\n      return 5;\r\n    } else if (lineBreak1 || lineBreak2) {\r\n      // Four points for line breaks.\r\n      return 4;\r\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\r\n      // Three points for end of sentences.\r\n      return 3;\r\n    } else if (whitespace1 || whitespace2) {\r\n      // Two points for whitespace.\r\n      return 2;\r\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\r\n      // One point for non-alphanumeric.\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  var pointer = 1;\r\n  // Intentionally ignore the first and last element (don't need checking).\r\n  while (pointer < diffs.length - 1) {\r\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\r\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\r\n      // This is a single edit surrounded by equalities.\r\n      var equality1 = diffs[pointer - 1][1];\r\n      var edit = diffs[pointer][1];\r\n      var equality2 = diffs[pointer + 1][1];\r\n\r\n      // First, shift the edit as far left as possible.\r\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\r\n      if (commonOffset) {\r\n        var commonString = edit.substring(edit.length - commonOffset);\r\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\r\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\r\n        equality2 = commonString + equality2;\r\n      }\r\n\r\n      // Second, step character by character right, looking for the best fit.\r\n      var bestEquality1 = equality1;\r\n      var bestEdit = edit;\r\n      var bestEquality2 = equality2;\r\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\r\n          diff_cleanupSemanticScore_(edit, equality2);\r\n      while (edit.charAt(0) === equality2.charAt(0)) {\r\n        equality1 += edit.charAt(0);\r\n        edit = edit.substring(1) + equality2.charAt(0);\r\n        equality2 = equality2.substring(1);\r\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\r\n            diff_cleanupSemanticScore_(edit, equality2);\r\n        // The >= encourages trailing rather than leading whitespace on edits.\r\n        if (score >= bestScore) {\r\n          bestScore = score;\r\n          bestEquality1 = equality1;\r\n          bestEdit = edit;\r\n          bestEquality2 = equality2;\r\n        }\r\n      }\r\n\r\n      if (diffs[pointer - 1][1] != bestEquality1) {\r\n        // We have an improvement, save it back to the diff.\r\n        if (bestEquality1) {\r\n          diffs[pointer - 1][1] = bestEquality1;\r\n        } else {\r\n          diffs.splice(pointer - 1, 1);\r\n          pointer--;\r\n        }\r\n        diffs[pointer][1] = bestEdit;\r\n        if (bestEquality2) {\r\n          diffs[pointer + 1][1] = bestEquality2;\r\n        } else {\r\n          diffs.splice(pointer + 1, 1);\r\n          pointer--;\r\n        }\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n};\r\n\r\n// Define some regex patterns for matching boundaries.\r\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\r\ndiff_match_patch.whitespaceRegex_ = /\\s/;\r\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\r\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\r\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\r\n\r\n/**\r\n * Reduce the number of edits by eliminating operationally trivial equalities.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\r\n  var changes = false;\r\n  var equalities = [];  // Stack of indices where equalities are found.\r\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\r\n  /** @type {?string} */\r\n  var lastequality = null;\r\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\r\n  var pointer = 0;  // Index of current position.\r\n  // Is there an insertion operation before the last equality.\r\n  var pre_ins = false;\r\n  // Is there a deletion operation before the last equality.\r\n  var pre_del = false;\r\n  // Is there an insertion operation after the last equality.\r\n  var post_ins = false;\r\n  // Is there a deletion operation after the last equality.\r\n  var post_del = false;\r\n  while (pointer < diffs.length) {\r\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\r\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\r\n          (post_ins || post_del)) {\r\n        // Candidate found.\r\n        equalities[equalitiesLength++] = pointer;\r\n        pre_ins = post_ins;\r\n        pre_del = post_del;\r\n        lastequality = diffs[pointer][1];\r\n      } else {\r\n        // Not a candidate, and can never become one.\r\n        equalitiesLength = 0;\r\n        lastequality = null;\r\n      }\r\n      post_ins = post_del = false;\r\n    } else {  // An insertion or deletion.\r\n      if (diffs[pointer][0] == DIFF_DELETE) {\r\n        post_del = true;\r\n      } else {\r\n        post_ins = true;\r\n      }\r\n      /*\r\n       * Five types to be split:\r\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\r\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\r\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\r\n       * <ins>A</del>X<ins>C</ins><del>D</del>\r\n       * <ins>A</ins><del>B</del>X<del>C</del>\r\n       */\r\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\r\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\r\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\r\n        // Duplicate record.\r\n        diffs.splice(equalities[equalitiesLength - 1], 0,\r\n                     [DIFF_DELETE, lastequality]);\r\n        // Change second copy to insert.\r\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\r\n        equalitiesLength--;  // Throw away the equality we just deleted;\r\n        lastequality = null;\r\n        if (pre_ins && pre_del) {\r\n          // No changes made which could affect previous entry, keep going.\r\n          post_ins = post_del = true;\r\n          equalitiesLength = 0;\r\n        } else {\r\n          equalitiesLength--;  // Throw away the previous equality.\r\n          pointer = equalitiesLength > 0 ?\r\n              equalities[equalitiesLength - 1] : -1;\r\n          post_ins = post_del = false;\r\n        }\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n\r\n  if (changes) {\r\n    this.diff_cleanupMerge(diffs);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Reorder and merge like edit sections.  Merge equalities.\r\n * Any edit section can move as long as it doesn't cross an equality.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\r\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\r\n  var pointer = 0;\r\n  var count_delete = 0;\r\n  var count_insert = 0;\r\n  var text_delete = '';\r\n  var text_insert = '';\r\n  var commonlength;\r\n  while (pointer < diffs.length) {\r\n    switch (diffs[pointer][0]) {\r\n      case DIFF_INSERT:\r\n        count_insert++;\r\n        text_insert += diffs[pointer][1];\r\n        pointer++;\r\n        break;\r\n      case DIFF_DELETE:\r\n        count_delete++;\r\n        text_delete += diffs[pointer][1];\r\n        pointer++;\r\n        break;\r\n      case DIFF_EQUAL:\r\n        // Upon reaching an equality, check for prior redundancies.\r\n        if (count_delete + count_insert > 1) {\r\n          if (count_delete !== 0 && count_insert !== 0) {\r\n            // Factor out any common prefixies.\r\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\r\n            if (commonlength !== 0) {\r\n              if ((pointer - count_delete - count_insert) > 0 &&\r\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\r\n                  DIFF_EQUAL) {\r\n                diffs[pointer - count_delete - count_insert - 1][1] +=\r\n                    text_insert.substring(0, commonlength);\r\n              } else {\r\n                diffs.splice(0, 0, [DIFF_EQUAL,\r\n                                    text_insert.substring(0, commonlength)]);\r\n                pointer++;\r\n              }\r\n              text_insert = text_insert.substring(commonlength);\r\n              text_delete = text_delete.substring(commonlength);\r\n            }\r\n            // Factor out any common suffixies.\r\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\r\n            if (commonlength !== 0) {\r\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\r\n                  commonlength) + diffs[pointer][1];\r\n              text_insert = text_insert.substring(0, text_insert.length -\r\n                  commonlength);\r\n              text_delete = text_delete.substring(0, text_delete.length -\r\n                  commonlength);\r\n            }\r\n          }\r\n          // Delete the offending records and add the merged ones.\r\n          if (count_delete === 0) {\r\n            diffs.splice(pointer - count_insert,\r\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\r\n          } else if (count_insert === 0) {\r\n            diffs.splice(pointer - count_delete,\r\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\r\n          } else {\r\n            diffs.splice(pointer - count_delete - count_insert,\r\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\r\n                [DIFF_INSERT, text_insert]);\r\n          }\r\n          pointer = pointer - count_delete - count_insert +\r\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\r\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\r\n          // Merge this equality with the previous one.\r\n          diffs[pointer - 1][1] += diffs[pointer][1];\r\n          diffs.splice(pointer, 1);\r\n        } else {\r\n          pointer++;\r\n        }\r\n        count_insert = 0;\r\n        count_delete = 0;\r\n        text_delete = '';\r\n        text_insert = '';\r\n        break;\r\n    }\r\n  }\r\n  if (diffs[diffs.length - 1][1] === '') {\r\n    diffs.pop();  // Remove the dummy entry at the end.\r\n  }\r\n\r\n  // Second pass: look for single edits surrounded on both sides by equalities\r\n  // which can be shifted sideways to eliminate an equality.\r\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\r\n  var changes = false;\r\n  pointer = 1;\r\n  // Intentionally ignore the first and last element (don't need checking).\r\n  while (pointer < diffs.length - 1) {\r\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\r\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\r\n      // This is a single edit surrounded by equalities.\r\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\r\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\r\n        // Shift the edit over the previous equality.\r\n        diffs[pointer][1] = diffs[pointer - 1][1] +\r\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\r\n                                        diffs[pointer - 1][1].length);\r\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\r\n        diffs.splice(pointer - 1, 1);\r\n        changes = true;\r\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\r\n          diffs[pointer + 1][1]) {\r\n        // Shift the edit over the next equality.\r\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\r\n        diffs[pointer][1] =\r\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\r\n            diffs[pointer + 1][1];\r\n        diffs.splice(pointer + 1, 1);\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n  // If shifts were made, the diff needs reordering and another shift sweep.\r\n  if (changes) {\r\n    this.diff_cleanupMerge(diffs);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * loc is a location in text1, compute and return the equivalent location in\r\n * text2.\r\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @param {number} loc Location within text1.\r\n * @return {number} Location within text2.\r\n */\r\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\r\n  var chars1 = 0;\r\n  var chars2 = 0;\r\n  var last_chars1 = 0;\r\n  var last_chars2 = 0;\r\n  var x;\r\n  for (x = 0; x < diffs.length; x++) {\r\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\r\n      chars1 += diffs[x][1].length;\r\n    }\r\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\r\n      chars2 += diffs[x][1].length;\r\n    }\r\n    if (chars1 > loc) {  // Overshot the location.\r\n      break;\r\n    }\r\n    last_chars1 = chars1;\r\n    last_chars2 = chars2;\r\n  }\r\n  // Was the location was deleted?\r\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\r\n    return last_chars2;\r\n  }\r\n  // Add the remaining character length.\r\n  return last_chars2 + (loc - last_chars1);\r\n};\r\n\r\n\r\n/**\r\n * Convert a diff array into a pretty HTML report.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} HTML representation.\r\n */\r\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\r\n  var html = [];\r\n  var pattern_amp = /&/g;\r\n  var pattern_lt = /</g;\r\n  var pattern_gt = />/g;\r\n  var pattern_para = /\\n/g;\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\r\n    var data = diffs[x][1];  // Text of change.\r\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\r\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\r\n    switch (op) {\r\n      case DIFF_INSERT:\r\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\r\n        break;\r\n      case DIFF_DELETE:\r\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\r\n        break;\r\n      case DIFF_EQUAL:\r\n        html[x] = '<span>' + text + '</span>';\r\n        break;\r\n    }\r\n  }\r\n  return html.join('');\r\n};\r\n\r\n\r\n/**\r\n * Compute and return the source text (all equalities and deletions).\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} Source text.\r\n */\r\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\r\n  var text = [];\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    if (diffs[x][0] !== DIFF_INSERT) {\r\n      text[x] = diffs[x][1];\r\n    }\r\n  }\r\n  return text.join('');\r\n};\r\n\r\n\r\n/**\r\n * Compute and return the destination text (all equalities and insertions).\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} Destination text.\r\n */\r\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\r\n  var text = [];\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    if (diffs[x][0] !== DIFF_DELETE) {\r\n      text[x] = diffs[x][1];\r\n    }\r\n  }\r\n  return text.join('');\r\n};\r\n\r\n\r\n/**\r\n * Compute the Levenshtein distance; the number of inserted, deleted or\r\n * substituted characters.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {number} Number of changes.\r\n */\r\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\r\n  var levenshtein = 0;\r\n  var insertions = 0;\r\n  var deletions = 0;\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var op = diffs[x][0];\r\n    var data = diffs[x][1];\r\n    switch (op) {\r\n      case DIFF_INSERT:\r\n        insertions += data.length;\r\n        break;\r\n      case DIFF_DELETE:\r\n        deletions += data.length;\r\n        break;\r\n      case DIFF_EQUAL:\r\n        // A deletion and an insertion is one substitution.\r\n        levenshtein += Math.max(insertions, deletions);\r\n        insertions = 0;\r\n        deletions = 0;\r\n        break;\r\n    }\r\n  }\r\n  levenshtein += Math.max(insertions, deletions);\r\n  return levenshtein;\r\n};\r\n\r\n\r\n/**\r\n * Crush the diff into an encoded string which describes the operations\r\n * required to transform text1 into text2.\r\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\r\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} Delta text.\r\n */\r\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\r\n  var text = [];\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    switch (diffs[x][0]) {\r\n      case DIFF_INSERT:\r\n        text[x] = '+' + encodeURI(diffs[x][1]);\r\n        break;\r\n      case DIFF_DELETE:\r\n        text[x] = '-' + diffs[x][1].length;\r\n        break;\r\n      case DIFF_EQUAL:\r\n        text[x] = '=' + diffs[x][1].length;\r\n        break;\r\n    }\r\n  }\r\n  return text.join('\\t').replace(/%20/g, ' ');\r\n};\r\n\r\n\r\n/**\r\n * Given the original text1, and an encoded string which describes the\r\n * operations required to transform text1 into text2, compute the full diff.\r\n * @param {string} text1 Source string for the diff.\r\n * @param {string} delta Delta text.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @throws {!Error} If invalid input.\r\n */\r\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\r\n  var diffs = [];\r\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\r\n  var pointer = 0;  // Cursor in text1\r\n  var tokens = delta.split(/\\t/g);\r\n  for (var x = 0; x < tokens.length; x++) {\r\n    // Each token begins with a one character parameter which specifies the\r\n    // operation of this token (delete, insert, equality).\r\n    var param = tokens[x].substring(1);\r\n    switch (tokens[x].charAt(0)) {\r\n      case '+':\r\n        try {\r\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\r\n        } catch (ex) {\r\n          // Malformed URI sequence.\r\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\r\n        }\r\n        break;\r\n      case '-':\r\n        // Fall through.\r\n      case '=':\r\n        var n = parseInt(param, 10);\r\n        if (isNaN(n) || n < 0) {\r\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\r\n        }\r\n        var text = text1.substring(pointer, pointer += n);\r\n        if (tokens[x].charAt(0) == '=') {\r\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\r\n        } else {\r\n          diffs[diffsLength++] = [DIFF_DELETE, text];\r\n        }\r\n        break;\r\n      default:\r\n        // Blank tokens are ok (from a trailing \\t).\r\n        // Anything else is an error.\r\n        if (tokens[x]) {\r\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\r\n                          tokens[x]);\r\n        }\r\n    }\r\n  }\r\n  if (pointer != text1.length) {\r\n    throw new Error('Delta length (' + pointer +\r\n        ') does not equal source text length (' + text1.length + ').');\r\n  }\r\n  return diffs;\r\n};\r\n\r\n\r\n//  MATCH FUNCTIONS\r\n\r\n\r\n/**\r\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\r\n * @param {string} text The text to search.\r\n * @param {string} pattern The pattern to search for.\r\n * @param {number} loc The location to search around.\r\n * @return {number} Best match index or -1.\r\n */\r\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\r\n  // Check for null inputs.\r\n  if (text == null || pattern == null || loc == null) {\r\n    throw new Error('Null input. (match_main)');\r\n  }\r\n\r\n  loc = Math.max(0, Math.min(loc, text.length));\r\n  if (text == pattern) {\r\n    // Shortcut (potentially not guaranteed by the algorithm)\r\n    return 0;\r\n  } else if (!text.length) {\r\n    // Nothing to match.\r\n    return -1;\r\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\r\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\r\n    return loc;\r\n  } else {\r\n    // Do a fuzzy compare.\r\n    return this.match_bitap_(text, pattern, loc);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\r\n * Bitap algorithm.\r\n * @param {string} text The text to search.\r\n * @param {string} pattern The pattern to search for.\r\n * @param {number} loc The location to search around.\r\n * @return {number} Best match index or -1.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\r\n  if (pattern.length > this.Match_MaxBits) {\r\n    throw new Error('Pattern too long for this browser.');\r\n  }\r\n\r\n  // Initialise the alphabet.\r\n  var s = this.match_alphabet_(pattern);\r\n\r\n  var dmp = this;  // 'this' becomes 'window' in a closure.\r\n\r\n  /**\r\n   * Compute and return the score for a match with e errors and x location.\r\n   * Accesses loc and pattern through being a closure.\r\n   * @param {number} e Number of errors in match.\r\n   * @param {number} x Location of match.\r\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\r\n   * @private\r\n   */\r\n  function match_bitapScore_(e, x) {\r\n    var accuracy = e / pattern.length;\r\n    var proximity = Math.abs(loc - x);\r\n    if (!dmp.Match_Distance) {\r\n      // Dodge divide by zero error.\r\n      return proximity ? 1.0 : accuracy;\r\n    }\r\n    return accuracy + (proximity / dmp.Match_Distance);\r\n  }\r\n\r\n  // Highest score beyond which we give up.\r\n  var score_threshold = this.Match_Threshold;\r\n  // Is there a nearby exact match? (speedup)\r\n  var best_loc = text.indexOf(pattern, loc);\r\n  if (best_loc != -1) {\r\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\r\n    // What about in the other direction? (speedup)\r\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\r\n    if (best_loc != -1) {\r\n      score_threshold =\r\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\r\n    }\r\n  }\r\n\r\n  // Initialise the bit arrays.\r\n  var matchmask = 1 << (pattern.length - 1);\r\n  best_loc = -1;\r\n\r\n  var bin_min, bin_mid;\r\n  var bin_max = pattern.length + text.length;\r\n  var last_rd;\r\n  for (var d = 0; d < pattern.length; d++) {\r\n    // Scan for the best match; each iteration allows for one more error.\r\n    // Run a binary search to determine how far from 'loc' we can stray at this\r\n    // error level.\r\n    bin_min = 0;\r\n    bin_mid = bin_max;\r\n    while (bin_min < bin_mid) {\r\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\r\n        bin_min = bin_mid;\r\n      } else {\r\n        bin_max = bin_mid;\r\n      }\r\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\r\n    }\r\n    // Use the result from this iteration as the maximum for the next.\r\n    bin_max = bin_mid;\r\n    var start = Math.max(1, loc - bin_mid + 1);\r\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\r\n\r\n    var rd = Array(finish + 2);\r\n    rd[finish + 1] = (1 << d) - 1;\r\n    for (var j = finish; j >= start; j--) {\r\n      // The alphabet (s) is a sparse hash, so the following line generates\r\n      // warnings.\r\n      var charMatch = s[text.charAt(j - 1)];\r\n      if (d === 0) {  // First pass: exact match.\r\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n      } else {  // Subsequent passes: fuzzy match.\r\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\r\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\r\n                last_rd[j + 1];\r\n      }\r\n      if (rd[j] & matchmask) {\r\n        var score = match_bitapScore_(d, j - 1);\r\n        // This match will almost certainly be better than any existing match.\r\n        // But check anyway.\r\n        if (score <= score_threshold) {\r\n          // Told you so.\r\n          score_threshold = score;\r\n          best_loc = j - 1;\r\n          if (best_loc > loc) {\r\n            // When passing loc, don't exceed our current distance from loc.\r\n            start = Math.max(1, 2 * loc - best_loc);\r\n          } else {\r\n            // Already passed loc, downhill from here on in.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // No hope for a (better) match at greater error levels.\r\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\r\n      break;\r\n    }\r\n    last_rd = rd;\r\n  }\r\n  return best_loc;\r\n};\r\n\r\n\r\n/**\r\n * Initialise the alphabet for the Bitap algorithm.\r\n * @param {string} pattern The text to encode.\r\n * @return {!Object} Hash of character locations.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\r\n  var s = {};\r\n  for (var i = 0; i < pattern.length; i++) {\r\n    s[pattern.charAt(i)] = 0;\r\n  }\r\n  for (var i = 0; i < pattern.length; i++) {\r\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\r\n  }\r\n  return s;\r\n};\r\n\r\n\r\n//  PATCH FUNCTIONS\r\n\r\n\r\n/**\r\n * Increase the context until it is unique,\r\n * but don't let the pattern expand beyond Match_MaxBits.\r\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\r\n * @param {string} text Source text.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\r\n  if (text.length == 0) {\r\n    return;\r\n  }\r\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\r\n  var padding = 0;\r\n\r\n  // Look for the first and last matches of pattern in text.  If two different\r\n  // matches are found, increase the pattern length.\r\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\r\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\r\n         this.Patch_Margin) {\r\n    padding += this.Patch_Margin;\r\n    pattern = text.substring(patch.start2 - padding,\r\n                             patch.start2 + patch.length1 + padding);\r\n  }\r\n  // Add one chunk for good luck.\r\n  padding += this.Patch_Margin;\r\n\r\n  // Add the prefix.\r\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\r\n  if (prefix) {\r\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\r\n  }\r\n  // Add the suffix.\r\n  var suffix = text.substring(patch.start2 + patch.length1,\r\n                              patch.start2 + patch.length1 + padding);\r\n  if (suffix) {\r\n    patch.diffs.push([DIFF_EQUAL, suffix]);\r\n  }\r\n\r\n  // Roll back the start points.\r\n  patch.start1 -= prefix.length;\r\n  patch.start2 -= prefix.length;\r\n  // Extend the lengths.\r\n  patch.length1 += prefix.length + suffix.length;\r\n  patch.length2 += prefix.length + suffix.length;\r\n};\r\n\r\n\r\n/**\r\n * Compute a list of patches to turn text1 into text2.\r\n * Use diffs if provided, otherwise compute it ourselves.\r\n * There are four ways to call this function, depending on what data is\r\n * available to the caller:\r\n * Method 1:\r\n * a = text1, b = text2\r\n * Method 2:\r\n * a = diffs\r\n * Method 3 (optimal):\r\n * a = text1, b = diffs\r\n * Method 4 (deprecated, use method 3):\r\n * a = text1, b = text2, c = diffs\r\n *\r\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\r\n * Array of diff tuples for text1 to text2 (method 2).\r\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\r\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\r\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\r\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\r\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n */\r\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\r\n  var text1, diffs;\r\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\r\n      typeof opt_c == 'undefined') {\r\n    // Method 1: text1, text2\r\n    // Compute diffs from text1 and text2.\r\n    text1 = /** @type {string} */(a);\r\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\r\n    if (diffs.length > 2) {\r\n      this.diff_cleanupSemantic(diffs);\r\n      this.diff_cleanupEfficiency(diffs);\r\n    }\r\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\r\n      typeof opt_c == 'undefined') {\r\n    // Method 2: diffs\r\n    // Compute text1 from diffs.\r\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\r\n    text1 = this.diff_text1(diffs);\r\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\r\n      typeof opt_c == 'undefined') {\r\n    // Method 3: text1, diffs\r\n    text1 = /** @type {string} */(a);\r\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\r\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\r\n      opt_c && typeof opt_c == 'object') {\r\n    // Method 4: text1, text2, diffs\r\n    // text2 is not used.\r\n    text1 = /** @type {string} */(a);\r\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\r\n  } else {\r\n    throw new Error('Unknown call format to patch_make.');\r\n  }\r\n\r\n  if (diffs.length === 0) {\r\n    return [];  // Get rid of the null case.\r\n  }\r\n  var patches = [];\r\n  var patch = new diff_match_patch.patch_obj();\r\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\r\n  var char_count1 = 0;  // Number of characters into the text1 string.\r\n  var char_count2 = 0;  // Number of characters into the text2 string.\r\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\r\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\r\n  // context info.\r\n  var prepatch_text = text1;\r\n  var postpatch_text = text1;\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var diff_type = diffs[x][0];\r\n    var diff_text = diffs[x][1];\r\n\r\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\r\n      // A new patch starts here.\r\n      patch.start1 = char_count1;\r\n      patch.start2 = char_count2;\r\n    }\r\n\r\n    switch (diff_type) {\r\n      case DIFF_INSERT:\r\n        patch.diffs[patchDiffLength++] = diffs[x];\r\n        patch.length2 += diff_text.length;\r\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\r\n                         postpatch_text.substring(char_count2);\r\n        break;\r\n      case DIFF_DELETE:\r\n        patch.length1 += diff_text.length;\r\n        patch.diffs[patchDiffLength++] = diffs[x];\r\n        postpatch_text = postpatch_text.substring(0, char_count2) +\r\n                         postpatch_text.substring(char_count2 +\r\n                             diff_text.length);\r\n        break;\r\n      case DIFF_EQUAL:\r\n        if (diff_text.length <= 2 * this.Patch_Margin &&\r\n            patchDiffLength && diffs.length != x + 1) {\r\n          // Small equality inside a patch.\r\n          patch.diffs[patchDiffLength++] = diffs[x];\r\n          patch.length1 += diff_text.length;\r\n          patch.length2 += diff_text.length;\r\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\r\n          // Time for a new patch.\r\n          if (patchDiffLength) {\r\n            this.patch_addContext_(patch, prepatch_text);\r\n            patches.push(patch);\r\n            patch = new diff_match_patch.patch_obj();\r\n            patchDiffLength = 0;\r\n            // Unlike Unidiff, our patch lists have a rolling context.\r\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\r\n            // Update prepatch text & pos to reflect the application of the\r\n            // just completed patch.\r\n            prepatch_text = postpatch_text;\r\n            char_count1 = char_count2;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n\r\n    // Update the current character count.\r\n    if (diff_type !== DIFF_INSERT) {\r\n      char_count1 += diff_text.length;\r\n    }\r\n    if (diff_type !== DIFF_DELETE) {\r\n      char_count2 += diff_text.length;\r\n    }\r\n  }\r\n  // Pick up the leftover patch if not empty.\r\n  if (patchDiffLength) {\r\n    this.patch_addContext_(patch, prepatch_text);\r\n    patches.push(patch);\r\n  }\r\n\r\n  return patches;\r\n};\r\n\r\n\r\n/**\r\n * Given an array of patches, return another array that is identical.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n */\r\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\r\n  // Making deep copies is hard in JavaScript.\r\n  var patchesCopy = [];\r\n  for (var x = 0; x < patches.length; x++) {\r\n    var patch = patches[x];\r\n    var patchCopy = new diff_match_patch.patch_obj();\r\n    patchCopy.diffs = [];\r\n    for (var y = 0; y < patch.diffs.length; y++) {\r\n      patchCopy.diffs[y] = patch.diffs[y].slice();\r\n    }\r\n    patchCopy.start1 = patch.start1;\r\n    patchCopy.start2 = patch.start2;\r\n    patchCopy.length1 = patch.length1;\r\n    patchCopy.length2 = patch.length2;\r\n    patchesCopy[x] = patchCopy;\r\n  }\r\n  return patchesCopy;\r\n};\r\n\r\n\r\n/**\r\n * Merge a set of patches onto the text.  Return a patched text, as well\r\n * as a list of true/false values indicating which patches were applied.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @param {string} text Old text.\r\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\r\n *      new text and an array of boolean values.\r\n */\r\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\r\n  if (patches.length == 0) {\r\n    return [text, []];\r\n  }\r\n\r\n  // Deep copy the patches so that no changes are made to originals.\r\n  patches = this.patch_deepCopy(patches);\r\n\r\n  var nullPadding = this.patch_addPadding(patches);\r\n  text = nullPadding + text + nullPadding;\r\n\r\n  this.patch_splitMax(patches);\r\n  // delta keeps track of the offset between the expected and actual location\r\n  // of the previous patch.  If there are patches expected at positions 10 and\r\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\r\n  // has an effective expected position of 22.\r\n  var delta = 0;\r\n  var results = [];\r\n  for (var x = 0; x < patches.length; x++) {\r\n    var expected_loc = patches[x].start2 + delta;\r\n    var text1 = this.diff_text1(patches[x].diffs);\r\n    var start_loc;\r\n    var end_loc = -1;\r\n    if (text1.length > this.Match_MaxBits) {\r\n      // patch_splitMax will only provide an oversized pattern in the case of\r\n      // a monster delete.\r\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\r\n                                  expected_loc);\r\n      if (start_loc != -1) {\r\n        end_loc = this.match_main(text,\r\n            text1.substring(text1.length - this.Match_MaxBits),\r\n            expected_loc + text1.length - this.Match_MaxBits);\r\n        if (end_loc == -1 || start_loc >= end_loc) {\r\n          // Can't find valid trailing context.  Drop this patch.\r\n          start_loc = -1;\r\n        }\r\n      }\r\n    } else {\r\n      start_loc = this.match_main(text, text1, expected_loc);\r\n    }\r\n    if (start_loc == -1) {\r\n      // No match found.  :(\r\n      results[x] = false;\r\n      // Subtract the delta for this failed patch from subsequent patches.\r\n      delta -= patches[x].length2 - patches[x].length1;\r\n    } else {\r\n      // Found a match.  :)\r\n      results[x] = true;\r\n      delta = start_loc - expected_loc;\r\n      var text2;\r\n      if (end_loc == -1) {\r\n        text2 = text.substring(start_loc, start_loc + text1.length);\r\n      } else {\r\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\r\n      }\r\n      if (text1 == text2) {\r\n        // Perfect match, just shove the replacement text in.\r\n        text = text.substring(0, start_loc) +\r\n               this.diff_text2(patches[x].diffs) +\r\n               text.substring(start_loc + text1.length);\r\n      } else {\r\n        // Imperfect match.  Run a diff to get a framework of equivalent\r\n        // indices.\r\n        var diffs = this.diff_main(text1, text2, false);\r\n        if (text1.length > this.Match_MaxBits &&\r\n            this.diff_levenshtein(diffs) / text1.length >\r\n            this.Patch_DeleteThreshold) {\r\n          // The end points match, but the content is unacceptably bad.\r\n          results[x] = false;\r\n        } else {\r\n          this.diff_cleanupSemanticLossless(diffs);\r\n          var index1 = 0;\r\n          var index2;\r\n          for (var y = 0; y < patches[x].diffs.length; y++) {\r\n            var mod = patches[x].diffs[y];\r\n            if (mod[0] !== DIFF_EQUAL) {\r\n              index2 = this.diff_xIndex(diffs, index1);\r\n            }\r\n            if (mod[0] === DIFF_INSERT) {  // Insertion\r\n              text = text.substring(0, start_loc + index2) + mod[1] +\r\n                     text.substring(start_loc + index2);\r\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\r\n              text = text.substring(0, start_loc + index2) +\r\n                     text.substring(start_loc + this.diff_xIndex(diffs,\r\n                         index1 + mod[1].length));\r\n            }\r\n            if (mod[0] !== DIFF_DELETE) {\r\n              index1 += mod[1].length;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Strip the padding off.\r\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\r\n  return [text, results];\r\n};\r\n\r\n\r\n/**\r\n * Add some padding on text start and end so that edges can match something.\r\n * Intended to be called only from within patch_apply.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @return {string} The padding string added to each side.\r\n */\r\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\r\n  var paddingLength = this.Patch_Margin;\r\n  var nullPadding = '';\r\n  for (var x = 1; x <= paddingLength; x++) {\r\n    nullPadding += String.fromCharCode(x);\r\n  }\r\n\r\n  // Bump all the patches forward.\r\n  for (var x = 0; x < patches.length; x++) {\r\n    patches[x].start1 += paddingLength;\r\n    patches[x].start2 += paddingLength;\r\n  }\r\n\r\n  // Add some padding on start of first diff.\r\n  var patch = patches[0];\r\n  var diffs = patch.diffs;\r\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\r\n    // Add nullPadding equality.\r\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\r\n    patch.start1 -= paddingLength;  // Should be 0.\r\n    patch.start2 -= paddingLength;  // Should be 0.\r\n    patch.length1 += paddingLength;\r\n    patch.length2 += paddingLength;\r\n  } else if (paddingLength > diffs[0][1].length) {\r\n    // Grow first equality.\r\n    var extraLength = paddingLength - diffs[0][1].length;\r\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\r\n    patch.start1 -= extraLength;\r\n    patch.start2 -= extraLength;\r\n    patch.length1 += extraLength;\r\n    patch.length2 += extraLength;\r\n  }\r\n\r\n  // Add some padding on end of last diff.\r\n  patch = patches[patches.length - 1];\r\n  diffs = patch.diffs;\r\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\r\n    // Add nullPadding equality.\r\n    diffs.push([DIFF_EQUAL, nullPadding]);\r\n    patch.length1 += paddingLength;\r\n    patch.length2 += paddingLength;\r\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\r\n    // Grow last equality.\r\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\r\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\r\n    patch.length1 += extraLength;\r\n    patch.length2 += extraLength;\r\n  }\r\n\r\n  return nullPadding;\r\n};\r\n\r\n\r\n/**\r\n * Look through the patches and break up any which are longer than the maximum\r\n * limit of the match algorithm.\r\n * Intended to be called only from within patch_apply.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n */\r\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\r\n  var patch_size = this.Match_MaxBits;\r\n  for (var x = 0; x < patches.length; x++) {\r\n    if (patches[x].length1 <= patch_size) {\r\n      continue;\r\n    }\r\n    var bigpatch = patches[x];\r\n    // Remove the big old patch.\r\n    patches.splice(x--, 1);\r\n    var start1 = bigpatch.start1;\r\n    var start2 = bigpatch.start2;\r\n    var precontext = '';\r\n    while (bigpatch.diffs.length !== 0) {\r\n      // Create one of several smaller patches.\r\n      var patch = new diff_match_patch.patch_obj();\r\n      var empty = true;\r\n      patch.start1 = start1 - precontext.length;\r\n      patch.start2 = start2 - precontext.length;\r\n      if (precontext !== '') {\r\n        patch.length1 = patch.length2 = precontext.length;\r\n        patch.diffs.push([DIFF_EQUAL, precontext]);\r\n      }\r\n      while (bigpatch.diffs.length !== 0 &&\r\n             patch.length1 < patch_size - this.Patch_Margin) {\r\n        var diff_type = bigpatch.diffs[0][0];\r\n        var diff_text = bigpatch.diffs[0][1];\r\n        if (diff_type === DIFF_INSERT) {\r\n          // Insertions are harmless.\r\n          patch.length2 += diff_text.length;\r\n          start2 += diff_text.length;\r\n          patch.diffs.push(bigpatch.diffs.shift());\r\n          empty = false;\r\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\r\n                   patch.diffs[0][0] == DIFF_EQUAL &&\r\n                   diff_text.length > 2 * patch_size) {\r\n          // This is a large deletion.  Let it pass in one chunk.\r\n          patch.length1 += diff_text.length;\r\n          start1 += diff_text.length;\r\n          empty = false;\r\n          patch.diffs.push([diff_type, diff_text]);\r\n          bigpatch.diffs.shift();\r\n        } else {\r\n          // Deletion or equality.  Only take as much as we can stomach.\r\n          diff_text = diff_text.substring(0,\r\n              patch_size - patch.length1 - this.Patch_Margin);\r\n          patch.length1 += diff_text.length;\r\n          start1 += diff_text.length;\r\n          if (diff_type === DIFF_EQUAL) {\r\n            patch.length2 += diff_text.length;\r\n            start2 += diff_text.length;\r\n          } else {\r\n            empty = false;\r\n          }\r\n          patch.diffs.push([diff_type, diff_text]);\r\n          if (diff_text == bigpatch.diffs[0][1]) {\r\n            bigpatch.diffs.shift();\r\n          } else {\r\n            bigpatch.diffs[0][1] =\r\n                bigpatch.diffs[0][1].substring(diff_text.length);\r\n          }\r\n        }\r\n      }\r\n      // Compute the head context for the next patch.\r\n      precontext = this.diff_text2(patch.diffs);\r\n      precontext =\r\n          precontext.substring(precontext.length - this.Patch_Margin);\r\n      // Append the end context for this patch.\r\n      var postcontext = this.diff_text1(bigpatch.diffs)\r\n                            .substring(0, this.Patch_Margin);\r\n      if (postcontext !== '') {\r\n        patch.length1 += postcontext.length;\r\n        patch.length2 += postcontext.length;\r\n        if (patch.diffs.length !== 0 &&\r\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\r\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\r\n        } else {\r\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\r\n        }\r\n      }\r\n      if (!empty) {\r\n        patches.splice(++x, 0, patch);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Take a list of patches and return a textual representation.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @return {string} Text representation of patches.\r\n */\r\ndiff_match_patch.prototype.patch_toText = function(patches) {\r\n  var text = [];\r\n  for (var x = 0; x < patches.length; x++) {\r\n    text[x] = patches[x];\r\n  }\r\n  return text.join('');\r\n};\r\n\r\n\r\n/**\r\n * Parse a textual representation of patches and return a list of Patch objects.\r\n * @param {string} textline Text representation of patches.\r\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n * @throws {!Error} If invalid input.\r\n */\r\ndiff_match_patch.prototype.patch_fromText = function(textline) {\r\n  var patches = [];\r\n  if (!textline) {\r\n    return patches;\r\n  }\r\n  var text = textline.split('\\n');\r\n  var textPointer = 0;\r\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\r\n  while (textPointer < text.length) {\r\n    var m = text[textPointer].match(patchHeader);\r\n    if (!m) {\r\n      throw new Error('Invalid patch string: ' + text[textPointer]);\r\n    }\r\n    var patch = new diff_match_patch.patch_obj();\r\n    patches.push(patch);\r\n    patch.start1 = parseInt(m[1], 10);\r\n    if (m[2] === '') {\r\n      patch.start1--;\r\n      patch.length1 = 1;\r\n    } else if (m[2] == '0') {\r\n      patch.length1 = 0;\r\n    } else {\r\n      patch.start1--;\r\n      patch.length1 = parseInt(m[2], 10);\r\n    }\r\n\r\n    patch.start2 = parseInt(m[3], 10);\r\n    if (m[4] === '') {\r\n      patch.start2--;\r\n      patch.length2 = 1;\r\n    } else if (m[4] == '0') {\r\n      patch.length2 = 0;\r\n    } else {\r\n      patch.start2--;\r\n      patch.length2 = parseInt(m[4], 10);\r\n    }\r\n    textPointer++;\r\n\r\n    while (textPointer < text.length) {\r\n      var sign = text[textPointer].charAt(0);\r\n      try {\r\n        var line = decodeURI(text[textPointer].substring(1));\r\n      } catch (ex) {\r\n        // Malformed URI sequence.\r\n        throw new Error('Illegal escape in patch_fromText: ' + line);\r\n      }\r\n      if (sign == '-') {\r\n        // Deletion.\r\n        patch.diffs.push([DIFF_DELETE, line]);\r\n      } else if (sign == '+') {\r\n        // Insertion.\r\n        patch.diffs.push([DIFF_INSERT, line]);\r\n      } else if (sign == ' ') {\r\n        // Minor equality.\r\n        patch.diffs.push([DIFF_EQUAL, line]);\r\n      } else if (sign == '@') {\r\n        // Start of next patch.\r\n        break;\r\n      } else if (sign === '') {\r\n        // Blank line?  Whatever.\r\n      } else {\r\n        // WTF?\r\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\r\n      }\r\n      textPointer++;\r\n    }\r\n  }\r\n  return patches;\r\n};\r\n\r\n\r\n/**\r\n * Class representing one patch operation.\r\n * @constructor\r\n */\r\ndiff_match_patch.patch_obj = function() {\r\n  /** @type {!Array.<!diff_match_patch.Diff>} */\r\n  this.diffs = [];\r\n  /** @type {?number} */\r\n  this.start1 = null;\r\n  /** @type {?number} */\r\n  this.start2 = null;\r\n  /** @type {number} */\r\n  this.length1 = 0;\r\n  /** @type {number} */\r\n  this.length2 = 0;\r\n};\r\n\r\n\r\n/**\r\n * Emmulate GNU diff's format.\r\n * Header: @@ -382,8 +481,9 @@\r\n * Indicies are printed as 1-based, not 0-based.\r\n * @return {string} The GNU diff string.\r\n */\r\ndiff_match_patch.patch_obj.prototype.toString = function() {\r\n  var coords1, coords2;\r\n  if (this.length1 === 0) {\r\n    coords1 = this.start1 + ',0';\r\n  } else if (this.length1 == 1) {\r\n    coords1 = this.start1 + 1;\r\n  } else {\r\n    coords1 = (this.start1 + 1) + ',' + this.length1;\r\n  }\r\n  if (this.length2 === 0) {\r\n    coords2 = this.start2 + ',0';\r\n  } else if (this.length2 == 1) {\r\n    coords2 = this.start2 + 1;\r\n  } else {\r\n    coords2 = (this.start2 + 1) + ',' + this.length2;\r\n  }\r\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\r\n  var op;\r\n  // Escape the body of the patch with %xx notation.\r\n  for (var x = 0; x < this.diffs.length; x++) {\r\n    switch (this.diffs[x][0]) {\r\n      case DIFF_INSERT:\r\n        op = '+';\r\n        break;\r\n      case DIFF_DELETE:\r\n        op = '-';\r\n        break;\r\n      case DIFF_EQUAL:\r\n        op = ' ';\r\n        break;\r\n    }\r\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\r\n  }\r\n  return text.join('').replace(/%20/g, ' ');\r\n};\r\n\r\n\r\n// The following export code was added by @ForbesLindesay\r\nmodule.exports = diff_match_patch;\r\nmodule.exports['diff_match_patch'] = diff_match_patch;\r\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\r\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\r\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;\r\n"],"sourceRoot":""}